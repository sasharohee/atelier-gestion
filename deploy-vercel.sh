#!/bin/bash

# Script de dÃ©ploiement automatisÃ© pour Vercel
# Atelier Gestion Application

echo "ðŸš€ DÃ©ploiement Vercel - Atelier Gestion"
echo "========================================"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# VÃ©rifier si on est dans le bon rÃ©pertoire
if [ ! -f "package.json" ]; then
    print_error "package.json non trouvÃ©. Assurez-vous d'Ãªtre dans le rÃ©pertoire du projet."
    exit 1
fi

print_status "VÃ©rification de l'environnement..."

# VÃ©rifier Node.js
if ! command -v node &> /dev/null; then
    print_error "Node.js n'est pas installÃ©"
    exit 1
fi

print_success "Node.js trouvÃ©: $(node --version)"

# VÃ©rifier npm
if ! command -v npm &> /dev/null; then
    print_error "npm n'est pas installÃ©"
    exit 1
fi

print_success "npm trouvÃ©: $(npm --version)"

# VÃ©rifier Vercel CLI
if ! command -v vercel &> /dev/null; then
    print_warning "Vercel CLI non trouvÃ©. Installation..."
    npm install -g vercel
    if [ $? -ne 0 ]; then
        print_error "Ã‰chec de l'installation de Vercel CLI"
        exit 1
    fi
fi

print_success "Vercel CLI trouvÃ©: $(vercel --version)"

# Nettoyer les anciens builds
print_status "Nettoyage des anciens builds..."
rm -rf dist
rm -rf .vercel

# Installer les dÃ©pendances
print_status "Installation des dÃ©pendances..."
npm install

if [ $? -ne 0 ]; then
    print_error "Ã‰chec de l'installation des dÃ©pendances"
    exit 1
fi

print_success "DÃ©pendances installÃ©es"

# ExÃ©cuter le diagnostic
print_status "ExÃ©cution du diagnostic..."
node diagnostic-vercel.js

if [ $? -ne 0 ]; then
    print_warning "Le diagnostic a dÃ©tectÃ© des problÃ¨mes. VÃ©rifiez la configuration."
fi

# Build de production
print_status "Build de production..."
npm run build

if [ $? -ne 0 ]; then
    print_error "Ã‰chec du build de production"
    exit 1
fi

print_success "Build de production rÃ©ussi"

# VÃ©rifier que le build a crÃ©Ã© les fichiers nÃ©cessaires
if [ ! -f "dist/index.html" ]; then
    print_error "Le fichier dist/index.html n'a pas Ã©tÃ© crÃ©Ã©"
    exit 1
fi

print_success "Fichiers de build vÃ©rifiÃ©s"

# Test local du build
print_status "Test local du build..."
npm run preview &
PREVIEW_PID=$!

# Attendre que le serveur dÃ©marre
sleep 3

# VÃ©rifier si le serveur fonctionne
if curl -s http://localhost:4173 > /dev/null; then
    print_success "Test local rÃ©ussi"
else
    print_warning "Test local Ã©chouÃ©, mais continuation du dÃ©ploiement"
fi

# ArrÃªter le serveur de preview
kill $PREVIEW_PID 2>/dev/null

# DÃ©ploiement Vercel
print_status "DÃ©ploiement sur Vercel..."

# VÃ©rifier si l'utilisateur est connectÃ© Ã  Vercel
if ! vercel whoami &> /dev/null; then
    print_warning "Vous n'Ãªtes pas connectÃ© Ã  Vercel"
    print_status "Connexion Ã  Vercel..."
    vercel login
fi

# DÃ©ployer
vercel --prod --yes

if [ $? -ne 0 ]; then
    print_error "Ã‰chec du dÃ©ploiement Vercel"
    exit 1
fi

print_success "DÃ©ploiement Vercel rÃ©ussi!"

# Afficher les informations finales
echo ""
echo "ðŸŽ‰ DÃ©ploiement terminÃ© avec succÃ¨s!"
echo ""
echo "ðŸ“‹ Prochaines Ã©tapes:"
echo "1. VÃ©rifiez votre application sur Vercel"
echo "2. Testez toutes les fonctionnalitÃ©s"
echo "3. VÃ©rifiez les variables d'environnement"
echo "4. Configurez Supabase si nÃ©cessaire"
echo ""
echo "ðŸ”— Liens utiles:"
echo "- Vercel Dashboard: https://vercel.com/dashboard"
echo "- Supabase Dashboard: https://supabase.com/dashboard"
echo "- Guide de dÃ©ploiement: GUIDE_DEPLOIEMENT_VERCEL.md"
echo ""

print_success "Script de dÃ©ploiement terminÃ©!"
