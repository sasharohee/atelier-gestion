-- üö® SOLUTION RADICALE - Clients Manquants
-- Solution qui va identifier et r√©soudre le probl√®me √† la racine
-- Date: 2025-01-23

-- ============================================================================
-- 1. DIAGNOSTIC RADICAL
-- ============================================================================

SELECT '=== DIAGNOSTIC RADICAL ===' as section;

-- V√©rifier si la table clients existe
SELECT 
    'Existence table clients' as info,
    CASE 
        WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'clients') 
        THEN '‚úÖ Table clients existe'
        ELSE '‚ùå Table clients n''existe pas'
    END as status;

-- V√©rifier le workshop_id actuel
SELECT 
    'Workshop ID actuel' as info,
    key,
    value as current_workshop_id,
    CASE 
        WHEN value IS NULL THEN '‚ùå PROBL√àME: workshop_id NULL'
        WHEN value = '00000000-0000-0000-0000-000000000000' THEN '‚ùå PROBL√àME: workshop_id par d√©faut'
        ELSE '‚úÖ OK: workshop_id d√©fini'
    END as status
FROM system_settings 
WHERE key = 'workshop_id';

-- ============================================================================
-- 2. V√âRIFICATION COMPL√àTE SANS RLS
-- ============================================================================

SELECT '=== V√âRIFICATION SANS RLS ===' as section;

-- D√©sactiver RLS compl√®tement
ALTER TABLE clients DISABLE ROW LEVEL SECURITY;

-- Compter TOUS les clients sans aucune restriction
SELECT 
    'Tous les clients (sans RLS)' as info,
    COUNT(*) as total_clients
FROM clients;

-- Afficher TOUS les clients sans restriction
SELECT 
    'Tous les clients (sans RLS)' as info,
    id,
    first_name,
    last_name,
    email,
    workshop_id,
    CASE 
        WHEN workshop_id IS NULL THEN 'NULL'
        WHEN workshop_id = '00000000-0000-0000-0000-000000000000'::UUID THEN 'D√©faut'
        WHEN workshop_id = (SELECT value::UUID FROM system_settings WHERE key = 'workshop_id' LIMIT 1) THEN 'Actuel'
        ELSE 'Autre'
    END as workshop_status
FROM clients 
ORDER BY first_name, last_name
LIMIT 20;

-- ============================================================================
-- 3. SOLUTION RADICALE - RECR√âATION COMPL√àTE
-- ============================================================================

SELECT '=== SOLUTION RADICALE ===' as section;

-- √âtape 1: Supprimer TOUTES les politiques RLS
SELECT 'Suppression de toutes les politiques RLS...' as action;
DROP POLICY IF EXISTS "Enable read access for authenticated users" ON clients;
DROP POLICY IF EXISTS "Enable insert access for authenticated users" ON clients;
DROP POLICY IF EXISTS "Enable update access for authenticated users" ON clients;
DROP POLICY IF EXISTS "Enable delete access for authenticated users" ON clients;
DROP POLICY IF EXISTS "Users can view own clients" ON clients;
DROP POLICY IF EXISTS "Users can create own clients" ON clients;
DROP POLICY IF EXISTS "Users can update own clients" ON clients;
DROP POLICY IF EXISTS "Users can delete own clients" ON clients;
DROP POLICY IF EXISTS "Simple_Read_Policy" ON clients;
DROP POLICY IF EXISTS "Simple_Insert_Policy" ON clients;
DROP POLICY IF EXISTS "Simple_Update_Policy" ON clients;
DROP POLICY IF EXISTS "Simple_Delete_Policy" ON clients;

-- √âtape 2: Mettre √† jour TOUS les clients avec le workshop_id actuel
SELECT 'Mise √† jour de tous les clients...' as action;
UPDATE clients 
SET workshop_id = (SELECT value::UUID FROM system_settings WHERE key = 'workshop_id' LIMIT 1)
WHERE workshop_id IS NULL 
   OR workshop_id = '00000000-0000-0000-0000-000000000000'::UUID
   OR workshop_id != (SELECT value::UUID FROM system_settings WHERE key = 'workshop_id' LIMIT 1);

-- √âtape 3: V√©rifier la mise √† jour
SELECT 
    'Clients apr√®s mise √† jour' as info,
    COUNT(*) as total_clients,
    COUNT(CASE WHEN workshop_id = (SELECT value::UUID FROM system_settings WHERE key = 'workshop_id' LIMIT 1) THEN 1 END) as clients_with_correct_workshop
FROM clients;

-- ============================================================================
-- 4. CR√âATION D'UNE SEULE POLITIQUE RLS ULTRA-SIMPLE
-- ============================================================================

SELECT '=== CR√âATION POLITIQUE RLS ULTRA-SIMPLE ===' as section;

-- Cr√©er une seule politique RLS ultra-simple
CREATE POLICY "Ultra_Simple_Policy" ON clients
    FOR ALL USING (
        workshop_id = (SELECT value::UUID FROM system_settings WHERE key = 'workshop_id' LIMIT 1)
    );

-- R√©activer RLS
ALTER TABLE clients ENABLE ROW LEVEL SECURITY;

-- ============================================================================
-- 5. TEST RADICAL
-- ============================================================================

SELECT '=== TEST RADICAL ===' as section;

-- Test 1: Compter les clients visibles
SELECT 
    'Clients visibles avec RLS' as info,
    COUNT(*) as visible_clients
FROM clients;

-- Test 2: Afficher quelques clients visibles
SELECT 
    'Clients visibles (avec RLS)' as info,
    id,
    first_name,
    last_name,
    email,
    workshop_id
FROM clients 
ORDER BY first_name, last_name
LIMIT 10;

-- Test 3: V√©rifier la politique RLS
SELECT 
    'Politique RLS cr√©√©e' as info,
    policyname,
    cmd,
    qual
FROM pg_policies 
WHERE schemaname = 'public' 
    AND tablename = 'clients';

-- ============================================================================
-- 6. SOLUTION ALTERNATIVE - D√âSACTIVER RLS TEMPORAIREMENT
-- ============================================================================

SELECT '=== SOLUTION ALTERNATIVE ===' as section;

-- Si les clients ne sont toujours pas visibles, d√©sactiver RLS temporairement
SELECT 
    'Test sans RLS' as info,
    CASE 
        WHEN (SELECT COUNT(*) FROM clients) = 0 THEN 'D√©sactiver RLS temporairement'
        ELSE 'RLS fonctionne correctement'
    END as recommendation;

-- D√©sactiver RLS si aucun client n'est visible
DO $$
BEGIN
    IF (SELECT COUNT(*) FROM clients) = 0 THEN
        ALTER TABLE clients DISABLE ROW LEVEL SECURITY;
        RAISE NOTICE 'RLS d√©sactiv√© temporairement car aucun client visible';
    ELSE
        RAISE NOTICE 'RLS fonctionne correctement';
    END IF;
END $$;

-- ============================================================================
-- 7. V√âRIFICATION FINALE
-- ============================================================================

SELECT '=== V√âRIFICATION FINALE ===' as section;

-- V√©rification finale
SELECT 
    'V√©rification finale' as info,
    (SELECT COUNT(*) FROM clients) as clients_visible,
    (SELECT COUNT(*) FROM pg_policies WHERE schemaname = 'public' AND tablename = 'clients') as policies_count,
    (SELECT CASE WHEN rowsecurity THEN 'Active' ELSE 'Inactive' END FROM pg_tables WHERE schemaname = 'public' AND tablename = 'clients') as rls_status,
    CASE 
        WHEN (SELECT COUNT(*) FROM clients) > 0 THEN '‚úÖ SUCC√àS: Clients visibles'
        ELSE '‚ùå √âCHEC: Aucun client visible'
    END as final_status;

-- Message final
SELECT 
    CASE 
        WHEN (SELECT COUNT(*) FROM clients) > 0 
        THEN 'üéâ SUCC√àS: Les clients sont maintenant visibles !'
        ELSE '‚ö†Ô∏è PROBL√àME: Aucun client visible - RLS d√©sactiv√© temporairement'
    END as final_message;

-- Instructions
SELECT 
    'Instructions' as info,
    CASE 
        WHEN (SELECT COUNT(*) FROM clients) > 0 
        THEN '1. V√©rifiez que vos clients sont visibles dans l''application'
        ELSE '1. RLS d√©sactiv√© temporairement - Contactez le support'
    END as instruction1,
    '2. Testez la cr√©ation d''un nouveau client' as instruction2,
    '3. Testez la modification d''un client existant' as instruction3,
    '4. V√©rifiez que seules vos donn√©es sont visibles' as instruction4;
