// Script de test pour v√©rifier l'enregistrement des donn√©es client
// √Ä ex√©cuter dans la console du navigateur apr√®s avoir cr√©√© un client

console.log('üß™ Test d\'enregistrement des donn√©es client');

// Fonction pour r√©cup√©rer le dernier client cr√©√©
async function testClientData() {
  try {
    // R√©cup√©rer les clients depuis le store
    const store = window.__ZUSTAND_STORE__;
    if (!store) {
      console.log('‚ùå Store Zustand non trouv√©');
      return;
    }

    const clients = store.getState().clients;
    if (clients.length === 0) {
      console.log('‚ùå Aucun client trouv√©');
      return;
    }

    // Prendre le dernier client cr√©√©
    const lastClient = clients[clients.length - 1];
    console.log('üìã Dernier client cr√©√©:', lastClient);

    // V√©rifier les nouveaux champs
    const newFields = {
      // Informations personnelles et entreprise
      category: lastClient.category,
      title: lastClient.title,
      companyName: lastClient.companyName,
      vatNumber: lastClient.vatNumber,
      sirenNumber: lastClient.sirenNumber,
      countryCode: lastClient.countryCode,
      
      // Adresse d√©taill√©e
      addressComplement: lastClient.addressComplement,
      region: lastClient.region,
      postalCode: lastClient.postalCode,
      city: lastClient.city,
      
      // Adresse de facturation
      billingAddressSame: lastClient.billingAddressSame,
      billingAddress: lastClient.billingAddress,
      billingAddressComplement: lastClient.billingAddressComplement,
      billingRegion: lastClient.billingRegion,
      billingPostalCode: lastClient.billingPostalCode,
      billingCity: lastClient.billingCity,
      
      // Informations compl√©mentaires
      accountingCode: lastClient.accountingCode,
      cniIdentifier: lastClient.cniIdentifier,
      attachedFilePath: lastClient.attachedFilePath,
      internalNote: lastClient.internalNote,
      
      // Pr√©f√©rences
      status: lastClient.status,
      smsNotification: lastClient.smsNotification,
      emailNotification: lastClient.emailNotification,
      smsMarketing: lastClient.smsMarketing,
      emailMarketing: lastClient.emailMarketing,
    };

    console.log('üîç V√©rification des nouveaux champs:');
    Object.entries(newFields).forEach(([field, value]) => {
      const status = value !== undefined && value !== null && value !== '' ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${field}: ${value}`);
    });

    // Test d'acc√®s direct √† Supabase
    console.log('üîó Test d\'acc√®s direct √† Supabase...');
    
    // Note: Cette partie n√©cessite que vous ayez acc√®s √† l'objet supabase
    if (window.supabase) {
      const { data, error } = await window.supabase
        .from('clients')
        .select('*')
        .eq('id', lastClient.id)
        .single();
      
      if (error) {
        console.log('‚ùå Erreur Supabase:', error);
      } else {
        console.log('‚úÖ Donn√©es brutes Supabase:', data);
        
        // V√©rifier les champs snake_case
        const snakeCaseFields = {
          category: data.category,
          title: data.title,
          company_name: data.company_name,
          vat_number: data.vat_number,
          siren_number: data.siren_number,
          country_code: data.country_code,
          address_complement: data.address_complement,
          region: data.region,
          postal_code: data.postal_code,
          city: data.city,
          billing_address_same: data.billing_address_same,
          billing_address: data.billing_address,
          billing_address_complement: data.billing_address_complement,
          billing_region: data.billing_region,
          billing_postal_code: data.billing_postal_code,
          billing_city: data.billing_city,
          accounting_code: data.accounting_code,
          cni_identifier: data.cni_identifier,
          attached_file_path: data.attached_file_path,
          internal_note: data.internal_note,
          status: data.status,
          sms_notification: data.sms_notification,
          email_notification: data.email_notification,
          sms_marketing: data.sms_marketing,
          email_marketing: data.email_marketing,
        };

        console.log('üîç V√©rification des champs snake_case dans Supabase:');
        Object.entries(snakeCaseFields).forEach(([field, value]) => {
          const status = value !== undefined && value !== null && value !== '' ? '‚úÖ' : '‚ùå';
          console.log(`${status} ${field}: ${value}`);
        });
      }
    } else {
      console.log('‚ö†Ô∏è Objet Supabase non disponible dans la console');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Ex√©cuter le test
testClientData();

// Instructions pour l'utilisateur
console.log(`
üìù Instructions pour tester le formulaire client:

1. Cr√©ez un nouveau client avec le formulaire √©tendu
2. Remplissez tous les champs (r√©gion, code postal, ville, etc.)
3. Sauvegardez le client
4. Ex√©cutez ce script dans la console du navigateur
5. V√©rifiez que tous les champs sont bien enregistr√©s

Si des champs montrent ‚ùå, cela signifie qu'ils ne sont pas enregistr√©s correctement.
`);
