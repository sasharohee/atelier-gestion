// Script de test pour le syst√®me de fid√©lit√© automatique
// √Ä ex√©cuter dans la console du navigateur ou dans Node.js

console.log('üß™ Test du Syst√®me de Fid√©lit√© Automatique');
console.log('==========================================');

// Configuration de test
const TEST_CONFIG = {
  clientId: 'client_id_a_remplacer', // Remplacez par un vrai ID de client
  testAmounts: [25, 75, 150, 300], // Montants de test en euros
  supabaseUrl: 'VOTRE_URL_SUPABASE',
  supabaseKey: 'VOTRE_CLE_SUPABASE'
};

// Fonction de test principale
async function testLoyaltySystem() {
  try {
    console.log('üöÄ D√©marrage des tests...');
    
    // Test 1: V√©rifier la configuration
    await testConfiguration();
    
    // Test 2: Tester le calcul des points
    await testPointCalculation();
    
    // Test 3: Tester l'attribution automatique
    await testAutomaticPoints();
    
    // Test 4: V√©rifier les statistiques
    await testStatistics();
    
    console.log('‚úÖ Tous les tests sont termin√©s !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  }
}

// Test 1: V√©rifier la configuration
async function testConfiguration() {
  console.log('\nüìã Test 1: V√©rification de la configuration...');
  
  try {
    const { data, error } = await supabase
      .from('loyalty_config')
      .select('*')
      .order('key');
    
    if (error) throw error;
    
    console.log('‚úÖ Configuration charg√©e:', data.length, 'param√®tres');
    
    // V√©rifier les param√®tres essentiels
    const requiredKeys = [
      'points_per_euro',
      'minimum_purchase_for_points',
      'bonus_threshold_50',
      'bonus_threshold_100',
      'bonus_threshold_200'
    ];
    
    const missingKeys = requiredKeys.filter(key => 
      !data.find(item => item.key === key)
    );
    
    if (missingKeys.length > 0) {
      console.warn('‚ö†Ô∏è Param√®tres manquants:', missingKeys);
    } else {
      console.log('‚úÖ Tous les param√®tres requis sont pr√©sents');
    }
    
    // Afficher la configuration
    data.forEach(item => {
      console.log(`   ${item.key}: ${item.value} (${item.description})`);
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification de la configuration:', error);
    throw error;
  }
}

// Test 2: Tester le calcul des points
async function testPointCalculation() {
  console.log('\nüßÆ Test 2: Test du calcul des points...');
  
  try {
    for (const amount of TEST_CONFIG.testAmounts) {
      const { data, error } = await supabase.rpc('calculate_loyalty_points', {
        p_amount: amount,
        p_client_id: TEST_CONFIG.clientId
      });
      
      if (error) throw error;
      
      console.log(`   Achat de ${amount}‚Ç¨ ‚Üí ${data} points`);
      
      // V√©rifier la logique de bonus
      let expectedPoints = Math.floor(amount); // Points de base
      let bonus = 0;
      
      if (amount >= 200) {
        bonus = Math.floor(expectedPoints * 0.30);
      } else if (amount >= 100) {
        bonus = Math.floor(expectedPoints * 0.20);
      } else if (amount >= 50) {
        bonus = Math.floor(expectedPoints * 0.10);
      }
      
      const totalExpected = expectedPoints + bonus;
      
      if (data === totalExpected) {
        console.log(`   ‚úÖ Calcul correct: ${expectedPoints} + ${bonus} = ${data}`);
      } else {
        console.warn(`   ‚ö†Ô∏è Calcul inattendu: attendu ${totalExpected}, obtenu ${data}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test du calcul des points:', error);
    throw error;
  }
}

// Test 3: Tester l'attribution automatique
async function testAutomaticPoints() {
  console.log('\nüéÅ Test 3: Test de l\'attribution automatique...');
  
  try {
    // R√©cup√©rer les points actuels du client
    const { data: clientData, error: clientError } = await supabase
      .from('clients')
      .select('loyalty_points, current_tier_id')
      .eq('id', TEST_CONFIG.clientId)
      .single();
    
    if (clientError) throw clientError;
    
    const pointsBefore = clientData.loyalty_points || 0;
    console.log(`   Points actuels du client: ${pointsBefore}`);
    
    // Tester l'attribution pour un achat de 75‚Ç¨
    const testAmount = 75;
    const { data, error } = await supabase.rpc('auto_add_loyalty_points_from_purchase', {
      p_client_id: TEST_CONFIG.clientId,
      p_amount: testAmount,
      p_source_type: 'test',
      p_description: 'Test automatique - Achat 75‚Ç¨'
    });
    
    if (error) throw error;
    
    if (data.success) {
      console.log(`   ‚úÖ Points attribu√©s avec succ√®s pour ${testAmount}‚Ç¨`);
      console.log(`   Points gagn√©s: ${data.points_earned}`);
      console.log(`   Points avant: ${data.points_before}`);
      console.log(`   Points apr√®s: ${data.points_after}`);
      console.log(`   Niveau mis √† jour: ${data.tier_upgraded ? 'Oui' : 'Non'}`);
      
      // V√©rifier que les points ont bien √©t√© ajout√©s
      if (data.points_after === data.points_before + data.points_earned) {
        console.log('   ‚úÖ V√©rification des points: OK');
      } else {
        console.warn('   ‚ö†Ô∏è V√©rification des points: Incoh√©rence d√©tect√©e');
      }
      
    } else {
      console.warn(`   ‚ö†Ô∏è √âchec de l'attribution: ${data.message}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de l\'attribution automatique:', error);
    throw error;
  }
}

// Test 4: V√©rifier les statistiques
async function testStatistics() {
  console.log('\nüìä Test 4: V√©rification des statistiques...');
  
  try {
    const { data, error } = await supabase.rpc('get_loyalty_statistics');
    
    if (error) throw error;
    
    console.log('‚úÖ Statistiques r√©cup√©r√©es:');
    console.log(`   Clients avec points: ${data.total_clients_with_points}`);
    console.log(`   Points moyens: ${Math.round(data.average_points)}`);
    console.log(`   Total distribu√©: ${data.total_points_distributed}`);
    
    // Afficher la distribution par niveau
    console.log('   Distribution par niveau:');
    Object.entries(data.tier_distribution).forEach(([tier, count]) => {
      console.log(`     ${tier}: ${count} clients`);
    });
    
    // Afficher les top clients
    if (data.top_clients && data.top_clients.length > 0) {
      console.log('   Top clients:');
      data.top_clients.slice(0, 3).forEach((client, index) => {
        console.log(`     ${index + 1}. ${client.name}: ${client.points} points (${client.tier})`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des statistiques:', error);
    throw error;
  }
}

// Test 5: V√©rifier le tableau de bord
async function testDashboard() {
  console.log('\nüéØ Test 5: V√©rification du tableau de bord...');
  
  try {
    const { data, error } = await supabase
      .from('loyalty_dashboard')
      .select('*')
      .limit(5);
    
    if (error) throw error;
    
    console.log(`‚úÖ Tableau de bord charg√©: ${data.length} clients`);
    
    if (data.length > 0) {
      console.log('   Exemple de client:');
      const client = data[0];
      console.log(`     Nom: ${client.first_name} ${client.last_name}`);
      console.log(`     Points: ${client.current_points}`);
      console.log(`     Niveau: ${client.current_tier || 'Sans niveau'}`);
      console.log(`     R√©duction: ${client.discount_percentage || 0}%`);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification du tableau de bord:', error);
    throw error;
  }
}

// Test 6: V√©rifier les niveaux de fid√©lit√©
async function testLoyaltyTiers() {
  console.log('\n‚≠ê Test 6: V√©rification des niveaux de fid√©lit√©...');
  
  try {
    const { data, error } = await supabase
      .from('loyalty_tiers_advanced')
      .select('*')
      .order('points_required');
    
    if (error) throw error;
    
    console.log(`‚úÖ Niveaux de fid√©lit√© charg√©s: ${data.length} niveaux`);
    
    data.forEach(tier => {
      console.log(`   ${tier.name}: ${tier.points_required} points requis, ${tier.discount_percentage}% de r√©duction`);
      if (tier.benefits && tier.benefits.length > 0) {
        console.log(`     Avantages: ${tier.benefits.join(', ')}`);
      }
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des niveaux:', error);
    throw error;
  }
}

// Fonction de nettoyage (optionnelle)
async function cleanupTestData() {
  console.log('\nüßπ Nettoyage des donn√©es de test...');
  
  try {
    // Supprimer l'historique de test
    const { error } = await supabase
      .from('loyalty_points_history')
      .delete()
      .eq('source_type', 'test');
    
    if (error) throw error;
    
    console.log('‚úÖ Donn√©es de test nettoy√©es');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
  }
}

// Instructions d'utilisation
console.log('\nüìñ Instructions d\'utilisation:');
console.log('1. Remplacez TEST_CONFIG.clientId par un vrai ID de client');
console.log('2. Assurez-vous que Supabase est configur√©');
console.log('3. Ex√©cutez testLoyaltySystem() pour lancer tous les tests');
console.log('4. Ex√©cutez cleanupTestData() pour nettoyer les donn√©es de test');

// Exporter les fonctions pour utilisation
window.testLoyaltySystem = testLoyaltySystem;
window.testConfiguration = testConfiguration;
window.testPointCalculation = testPointCalculation;
window.testAutomaticPoints = testAutomaticPoints;
window.testStatistics = testStatistics;
window.testDashboard = testDashboard;
window.testLoyaltyTiers = testLoyaltyTiers;
window.cleanupTestData = cleanupTestData;

console.log('\nüéØ Fonctions de test disponibles:');
console.log('- testLoyaltySystem() : Lance tous les tests');
console.log('- testConfiguration() : Test de la configuration');
console.log('- testPointCalculation() : Test du calcul des points');
console.log('- testAutomaticPoints() : Test de l\'attribution');
console.log('- testStatistics() : Test des statistiques');
console.log('- testDashboard() : Test du tableau de bord');
console.log('- testLoyaltyTiers() : Test des niveaux');
console.log('- cleanupTestData() : Nettoyage des donn√©es de test');





