// =====================================================
// TEST ISOLATION NIVEAUX DE FID√âLIT√â PAR ATELIER
// =====================================================
// Script pour tester que chaque atelier ne voit que ses propres niveaux
// Date: 2025-01-23
// =====================================================

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase (remplacer par vos vraies valeurs)
const supabaseUrl = process.env.SUPABASE_URL || 'YOUR_SUPABASE_URL';
const supabaseKey = process.env.SUPABASE_ANON_KEY || 'YOUR_SUPABASE_ANON_KEY';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testLoyaltyIsolation() {
  console.log('üß™ === TEST ISOLATION NIVEAUX DE FID√âLIT√â ===\n');

  try {
    // Test 1: V√©rifier que les fonctions existent
    console.log('1Ô∏è‚É£ Test des fonctions utilitaires...');
    
    const { data: tiersData, error: tiersError } = await supabase.rpc('get_workshop_loyalty_tiers');
    if (tiersError) {
      console.log('‚ùå Fonction get_workshop_loyalty_tiers non disponible:', tiersError.message);
    } else {
      console.log('‚úÖ Fonction get_workshop_loyalty_tiers disponible');
      console.log(`   üìä Niveaux trouv√©s: ${tiersData?.length || 0}`);
    }

    const { data: configData, error: configError } = await supabase.rpc('get_workshop_loyalty_config');
    if (configError) {
      console.log('‚ùå Fonction get_workshop_loyalty_config non disponible:', configError.message);
    } else {
      console.log('‚úÖ Fonction get_workshop_loyalty_config disponible');
      console.log(`   üìä Configurations trouv√©es: ${configData?.length || 0}`);
    }

    // Test 2: V√©rifier l'isolation RLS
    console.log('\n2Ô∏è‚É£ Test de l\'isolation RLS...');
    
    const { data: directTiers, error: directError } = await supabase
      .from('loyalty_tiers_advanced')
      .select('*')
      .order('points_required');

    if (directError) {
      console.log('‚ùå Erreur lors du chargement direct:', directError.message);
    } else {
      console.log('‚úÖ Chargement direct r√©ussi');
      console.log(`   üìä Niveaux visibles: ${directTiers?.length || 0}`);
      
      if (directTiers && directTiers.length > 0) {
        console.log('   üìã D√©tail des niveaux:');
        directTiers.forEach(tier => {
          console.log(`      - ${tier.name}: ${tier.points_required} pts (${tier.discount_percentage}% r√©duction)`);
        });
      }
    }

    // Test 3: V√©rifier la configuration
    console.log('\n3Ô∏è‚É£ Test de la configuration...');
    
    const { data: directConfig, error: directConfigError } = await supabase
      .from('loyalty_config')
      .select('*')
      .order('key');

    if (directConfigError) {
      console.log('‚ùå Erreur lors du chargement de la config:', directConfigError.message);
    } else {
      console.log('‚úÖ Chargement de la config r√©ussi');
      console.log(`   üìä Configurations visibles: ${directConfig?.length || 0}`);
      
      if (directConfig && directConfig.length > 0) {
        console.log('   üìã D√©tail des configurations:');
        directConfig.forEach(config => {
          console.log(`      - ${config.key}: ${config.value} (${config.description})`);
        });
      }
    }

    // Test 4: Tester la cr√©ation d'un niveau
    console.log('\n4Ô∏è‚É£ Test de cr√©ation d\'un niveau...');
    
    const testTier = {
      name: 'Test Isolation',
      points_required: 50,
      discount_percentage: 2.5,
      color: '#FF0000',
      description: 'Niveau de test pour v√©rifier l\'isolation',
      is_active: true
    };

    const { data: insertData, error: insertError } = await supabase
      .from('loyalty_tiers_advanced')
      .insert([testTier])
      .select();

    if (insertError) {
      console.log('‚ùå Erreur lors de la cr√©ation du niveau test:', insertError.message);
    } else {
      console.log('‚úÖ Niveau test cr√©√© avec succ√®s');
      console.log(`   üÜî ID du niveau: ${insertData[0]?.id}`);
      
      // V√©rifier que le niveau est visible
      const { data: verifyData, error: verifyError } = await supabase
        .from('loyalty_tiers_advanced')
        .select('*')
        .eq('id', insertData[0]?.id);

      if (verifyError) {
        console.log('‚ùå Erreur lors de la v√©rification:', verifyError.message);
      } else if (verifyData && verifyData.length > 0) {
        console.log('‚úÖ Niveau test visible apr√®s cr√©ation');
        
        // Nettoyer le test
        const { error: deleteError } = await supabase
          .from('loyalty_tiers_advanced')
          .delete()
          .eq('id', insertData[0]?.id);

        if (deleteError) {
          console.log('‚ö†Ô∏è Erreur lors du nettoyage:', deleteError.message);
        } else {
          console.log('‚úÖ Niveau test supprim√©');
        }
      } else {
        console.log('‚ùå Niveau test non visible apr√®s cr√©ation');
      }
    }

    // Test 5: Tester la fonction de cr√©ation par d√©faut
    console.log('\n5Ô∏è‚É£ Test de la fonction de cr√©ation par d√©faut...');
    
    const { data: createResult, error: createError } = await supabase.rpc(
      'create_default_loyalty_tiers_for_workshop',
      { p_workshop_id: '00000000-0000-0000-0000-000000000000' } // UUID de test
    );

    if (createError) {
      console.log('‚ùå Erreur lors de la cr√©ation par d√©faut:', createError.message);
    } else {
      console.log('‚úÖ Fonction de cr√©ation par d√©faut test√©e');
      console.log(`   üìä R√©sultat: ${JSON.stringify(createResult)}`);
    }

    // Test 6: V√©rifier les politiques RLS
    console.log('\n6Ô∏è‚É£ Test des politiques RLS...');
    
    // Essayer de voir tous les niveaux (devrait √™tre filtr√© par RLS)
    const { data: allTiers, error: allTiersError } = await supabase
      .from('loyalty_tiers_advanced')
      .select('id, name, workshop_id')
      .limit(10);

    if (allTiersError) {
      console.log('‚ùå Erreur lors du test RLS:', allTiersError.message);
    } else {
      console.log('‚úÖ Test RLS r√©ussi');
      console.log(`   üìä Niveaux visibles: ${allTiers?.length || 0}`);
      
      if (allTiers && allTiers.length > 0) {
        console.log('   üìã D√©tail des niveaux visibles:');
        allTiers.forEach(tier => {
          console.log(`      - ${tier.name} (workshop_id: ${tier.workshop_id})`);
        });
      }
    }

    console.log('\nüéâ === R√âSUM√â DU TEST ===');
    console.log('‚úÖ Tests d\'isolation des niveaux de fid√©lit√© termin√©s');
    console.log('üìä V√©rifiez les r√©sultats ci-dessus pour confirmer l\'isolation');
    console.log('üîí Chaque atelier devrait ne voir que ses propres niveaux');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Fonction pour tester avec un utilisateur sp√©cifique
async function testWithUser(userId) {
  console.log(`\nüîê Test avec utilisateur sp√©cifique: ${userId}`);
  
  // Note: Dans un vrai test, vous devriez vous authentifier avec cet utilisateur
  // Ici on simule juste l'appel des fonctions
  
  try {
    const { data: tiersData, error: tiersError } = await supabase.rpc('get_workshop_loyalty_tiers');
    
    if (tiersError) {
      console.log('‚ùå Erreur avec utilisateur sp√©cifique:', tiersError.message);
    } else {
      console.log(`‚úÖ Niveaux pour l'utilisateur ${userId}: ${tiersData?.length || 0}`);
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du test utilisateur:', error);
  }
}

// Ex√©cuter les tests
if (require.main === module) {
  testLoyaltyIsolation()
    .then(() => {
      console.log('\n‚úÖ Tests termin√©s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erreur fatale:', error);
      process.exit(1);
    });
}

module.exports = {
  testLoyaltyIsolation,
  testWithUser
};
