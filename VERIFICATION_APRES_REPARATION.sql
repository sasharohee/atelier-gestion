-- üîç V√âRIFICATION APR√àS R√âPARATION
-- Ex√©cutez ce script pour v√©rifier l'√©tat du syst√®me

-- 1. V√âRIFICATION DE L'√âTAT DU SYST√àME
SELECT 'V√âRIFICATION: √âtat du syst√®me apr√®s r√©paration' as info;

SELECT 
    'Table users' as component,
    CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'users' AND table_schema = 'public') 
         THEN '‚úÖ Existe' 
         ELSE '‚ùå MANQUANTE' 
    END as status
UNION ALL
SELECT 
    'Trigger on_auth_user_created' as component,
    CASE WHEN EXISTS (SELECT 1 FROM information_schema.triggers WHERE trigger_name = 'on_auth_user_created') 
         THEN '‚úÖ Actif' 
         ELSE '‚ùå INACTIF' 
    END as status
UNION ALL
SELECT 
    'Fonction handle_new_user' as component,
    CASE WHEN EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_name = 'handle_new_user' AND routine_schema = 'public') 
         THEN '‚úÖ Existe' 
         ELSE '‚ùå MANQUANTE' 
    END as status;

-- 2. V√âRIFICATION DES POLITIQUES RLS
SELECT 'V√âRIFICATION: Politiques RLS' as info;
SELECT 
    policyname,
    permissive,
    cmd,
    CASE WHEN qual IS NOT NULL THEN 'Configur√©e' ELSE 'Non configur√©e' END as qual_status
FROM pg_policies 
WHERE tablename = 'users' AND schemaname = 'public';

-- 3. TEST DE LA FONCTION handle_new_user
SELECT 'TEST: Fonction handle_new_user' as info;
SELECT 
    routine_name,
    routine_type,
    data_type as return_type,
    routine_definition IS NOT NULL as has_definition
FROM information_schema.routines 
WHERE routine_name = 'handle_new_user' AND routine_schema = 'public';

-- 4. V√âRIFICATION DES UTILISATEURS EXISTANTS
SELECT 'UTILISATEURS: Dans auth.users (5 derniers)' as info;
SELECT 
    id,
    email,
    email_confirmed_at,
    created_at,
    raw_user_meta_data->>'firstName' as first_name,
    raw_user_meta_data->>'lastName' as last_name
FROM auth.users 
ORDER BY created_at DESC 
LIMIT 5;

-- 5. V√âRIFICATION DES UTILISATEURS DANS public.users
SELECT 'UTILISATEURS: Dans public.users (5 derniers)' as info;
SELECT 
    id,
    first_name,
    last_name,
    email,
    role,
    created_at
FROM public.users 
ORDER BY created_at DESC 
LIMIT 5;

-- 6. V√âRIFICATION DES ERREURS POTENTIELLES
SELECT 'DIAGNOSTIC: V√©rification des erreurs potentielles' as info;

-- V√©rifier s'il y a des contraintes de cl√© √©trang√®re cass√©es
SELECT 
    'Contraintes FK' as check_type,
    CASE WHEN COUNT(*) = 0 THEN '‚úÖ OK' ELSE '‚ùå PROBL√àME: ' || COUNT(*) || ' contraintes cass√©es' END as status
FROM information_schema.table_constraints tc
JOIN information_schema.constraint_column_usage ccu ON tc.constraint_name = ccu.constraint_name
WHERE tc.constraint_type = 'FOREIGN KEY' 
AND tc.table_name = 'users' 
AND tc.table_schema = 'public';

-- 7. TEST DE CR√âATION D'UN UTILISATEUR TEST (SANS R√âEL INSERTION)
SELECT 'TEST: Simulation de cr√©ation utilisateur' as info;
SELECT 
    'Simulation OK' as status,
    'La structure est pr√™te pour la cr√©ation d''utilisateurs' as message;

-- 8. V√âRIFICATION DES PERMISSIONS
SELECT 'PERMISSIONS: V√©rification des permissions' as info;
SELECT 
    schemaname,
    tablename,
    hasinserts,
    hasselects,
    hasupdates,
    hasdeletes
FROM pg_tables 
WHERE tablename = 'users' AND schemaname = 'public';

-- 9. MESSAGE FINAL
SELECT 'R√âSULTAT: Si tous les composants montrent ‚úÖ, le syst√®me est pr√™t' as info;
SELECT 'Si des ‚ùå apparaissent, il y a encore un probl√®me √† r√©soudre' as warning;
