#!/usr/bin/env node

const { createClient } = require('@supabase/supabase-js');

// Configuration pour la base distante
const supabaseUrl = 'https://olrihggkxyksuofkesnk.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9scmloZ2dreHlrc3VvZmtlc25rIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc5NDA2OTMsImV4cCI6MjA3MzUxNjY5M30.-Gypdwe8jMt3qVqrl4pKc6a98rzO0lxlYh5ZCtgG7oE';

const supabase = createClient(supabaseUrl, supabaseKey);

const USER_ID = '13d6e91c-8f4b-415a-b165-d5f8b4b0f72a';
const USER_EMAIL = 'sasharohee@icloud.com';

async function initUserData() {
  console.log('üöÄ Initialisation des donn√©es utilisateur dans la base distante...\n');
  
  try {
    // S'authentifier d'abord
    console.log('üîê Authentification...');
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: USER_EMAIL,
      password: 'woJcy7-cusmod-sywxyn@'
    });

    if (authError) {
      console.error('‚ùå Erreur d\'authentification:', authError.message);
      return;
    }

    console.log('‚úÖ Authentification r√©ussie');
    console.log('üë§ Utilisateur connect√©:', authData.user.email);
    // 1. V√©rifier/cr√©er subscription_status
    console.log('üìã V√©rification de subscription_status...');
    const { data: existingStatus } = await supabase
      .from('subscription_status')
      .select('*')
      .eq('user_id', USER_ID)
      .single();

    if (!existingStatus) {
      console.log('‚úÖ Cr√©ation de subscription_status...');
      const { error: statusError } = await supabase
        .from('subscription_status')
        .insert({
          user_id: USER_ID,
          email: USER_EMAIL,
          first_name: 'Sasha',
          last_name: 'Rohee',
          is_active: true,
          subscription_type: 'premium',
          status: 'active',
          role: 'admin'
        });

      if (statusError) {
        console.error('‚ùå Erreur subscription_status:', statusError.message);
      } else {
        console.log('‚úÖ subscription_status cr√©√©');
      }
    } else {
      console.log('‚úÖ subscription_status existe d√©j√†');
    }

    // 2. Cr√©er un profil utilisateur
    console.log('\nüë§ Cr√©ation du profil utilisateur...');
    const { error: userError } = await supabase
      .from('users')
      .upsert({
        id: USER_ID,
        email: USER_EMAIL,
        first_name: 'Sasha',
        last_name: 'Rohee',
        role: 'admin'
      });

    if (userError) {
      console.error('‚ùå Erreur users:', userError.message);
    } else {
      console.log('‚úÖ Profil utilisateur cr√©√©/mis √† jour');
    }

    // 3. Cr√©er des param√®tres syst√®me par d√©faut
    console.log('\n‚öôÔ∏è  Cr√©ation des param√®tres syst√®me...');
    const { error: settingsError } = await supabase
      .from('system_settings')
      .upsert({
        user_id: USER_ID,
        setting_key: 'workshop_name',
        setting_value: 'Atelier Sasha',
        setting_type: 'string'
      });

    if (settingsError) {
      console.error('‚ùå Erreur system_settings:', settingsError.message);
    } else {
      console.log('‚úÖ Param√®tres syst√®me cr√©√©s');
    }

    // 4. Cr√©er des cat√©gories par d√©faut
    console.log('\nüìÇ Cr√©ation des cat√©gories par d√©faut...');
    const defaultCategories = [
      { name: 'Smartphones', description: 'R√©paration de smartphones' },
      { name: 'Ordinateurs', description: 'R√©paration d\'ordinateurs' },
      { name: 'Tablettes', description: 'R√©paration de tablettes' }
    ];

    for (const category of defaultCategories) {
      const { error: catError } = await supabase
        .from('device_categories')
        .upsert({
          name: category.name,
          description: category.description,
          user_id: USER_ID
        });

      if (catError) {
        console.error(`‚ùå Erreur cat√©gorie ${category.name}:`, catError.message);
      } else {
        console.log(`‚úÖ Cat√©gorie "${category.name}" cr√©√©e`);
      }
    }

    // 5. Cr√©er des services par d√©faut
    console.log('\nüîß Cr√©ation des services par d√©faut...');
    const defaultServices = [
      { name: 'Diagnostic', description: 'Diagnostic complet', price: 25.00 },
      { name: 'R√©paration √©cran', description: 'Remplacement d\'√©cran', price: 80.00 },
      { name: 'R√©paration batterie', description: 'Remplacement de batterie', price: 45.00 }
    ];

    for (const service of defaultServices) {
      const { error: serviceError } = await supabase
        .from('services')
        .upsert({
          name: service.name,
          description: service.description,
          price: service.price,
          user_id: USER_ID
        });

      if (serviceError) {
        console.error(`‚ùå Erreur service ${service.name}:`, serviceError.message);
      } else {
        console.log(`‚úÖ Service "${service.name}" cr√©√©`);
      }
    }

    console.log('\nüéâ Initialisation termin√©e avec succ√®s!');
    console.log('üåê Votre application est maintenant pr√™te √† √™tre utilis√©e avec la base distante.');
    console.log('\nüìù Identifiants de connexion:');
    console.log(`   Email: ${USER_EMAIL}`);
    console.log('   Mot de passe: woJcy7-cusmod-sywxyn@');

  } catch (err) {
    console.error('‚ùå Erreur g√©n√©rale:', err.message);
  }
}

initUserData().catch(console.error);
