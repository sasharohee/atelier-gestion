// Script de test pour v√©rifier le mapping des donn√©es dans l'application
// √Ä ex√©cuter dans la console du navigateur pendant l'utilisation du formulaire client

console.log('üîç Test du mapping des donn√©es dans l\'application');

// Fonction pour surveiller les appels √† Supabase
function monitorSupabaseCalls() {
  console.log('üëÄ Surveillance des appels Supabase...');
  
  // Intercepter les appels √† Supabase
  const originalSupabase = window.supabase;
  if (originalSupabase) {
    const originalFrom = originalSupabase.from;
    
    originalSupabase.from = function(tableName) {
      const table = originalFrom.call(this, tableName);
      
      // Intercepter les m√©thodes
      const originalInsert = table.insert;
      const originalUpdate = table.update;
      const originalSelect = table.select;
      
      table.insert = function(data) {
        console.log('üìù INSERT appel√© sur', tableName, 'avec donn√©es:', data);
        return originalInsert.call(this, data);
      };
      
      table.update = function(data) {
        console.log('üîÑ UPDATE appel√© sur', tableName, 'avec donn√©es:', data);
        return originalUpdate.call(this, data);
      };
      
      table.select = function(columns) {
        console.log('üìã SELECT appel√© sur', tableName, 'avec colonnes:', columns);
        return originalSelect.call(this, columns);
      };
      
      return table;
    };
    
    console.log('‚úÖ Surveillance Supabase activ√©e');
  } else {
    console.log('‚ùå Objet Supabase non trouv√©');
  }
}

// Fonction pour tester le store Zustand
function testZustandStore() {
  console.log('üìä Test du store Zustand...');
  
  const store = window.__ZUSTAND_STORE__;
  if (!store) {
    console.log('‚ùå Store Zustand non trouv√©');
    return;
  }

  const state = store.getState();
  console.log('üìã √âtat actuel du store:', state);
  
  // V√©rifier les fonctions du store
  if (state.addClient) {
    console.log('‚úÖ Fonction addClient disponible');
  } else {
    console.log('‚ùå Fonction addClient manquante');
  }
  
  if (state.updateClient) {
    console.log('‚úÖ Fonction updateClient disponible');
  } else {
    console.log('‚ùå Fonction updateClient manquante');
  }
  
  if (state.clients) {
    console.log('‚úÖ Liste des clients disponible:', state.clients.length, 'clients');
  } else {
    console.log('‚ùå Liste des clients manquante');
  }
}

// Fonction pour tester le formulaire client
function testClientForm() {
  console.log('üìù Test du formulaire client...');
  
  // V√©rifier si le formulaire est ouvert
  const dialog = document.querySelector('[role="dialog"]');
  if (!dialog) {
    console.log('‚ùå Aucun formulaire client ouvert');
    return;
  }

  console.log('‚úÖ Formulaire client d√©tect√©');

  // R√©cup√©rer tous les champs du formulaire
  const formFields = {
    // D√©tails Client
    category: getFormFieldValue('category'),
    title: getFormFieldValue('title'),
    firstName: getFormFieldValue('firstName'),
    lastName: getFormFieldValue('lastName'),
    companyName: getFormFieldValue('companyName'),
    vatNumber: getFormFieldValue('vatNumber'),
    sirenNumber: getFormFieldValue('sirenNumber'),
    email: getFormFieldValue('email'),
    countryCode: getFormFieldValue('countryCode'),
    mobile: getFormFieldValue('mobile'),
    
    // D√©tails Adresse
    address: getFormFieldValue('address'),
    addressComplement: getFormFieldValue('addressComplement'),
    region: getFormFieldValue('region'),
    postalCode: getFormFieldValue('postalCode'),
    city: getFormFieldValue('city'),
    
    // Autres informations
    accountingCode: getFormFieldValue('accountingCode'),
    cniIdentifier: getFormFieldValue('cniIdentifier'),
    internalNote: getFormFieldValue('internalNote'),
  };

  console.log('üìã Valeurs actuelles du formulaire:');
  Object.entries(formFields).forEach(([field, value]) => {
    const status = value !== undefined && value !== null && value !== '' ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${field}: ${value}`);
  });

  // V√©rifier les champs probl√©matiques sp√©cifiquement
  const problematicFields = ['region', 'postalCode', 'city', 'accountingCode', 'cniIdentifier', 'companyName', 'sirenNumber', 'vatNumber'];
  const emptyProblematicFields = problematicFields.filter(field => !formFields[field] || formFields[field] === '');
  
  if (emptyProblematicFields.length > 0) {
    console.log('‚ùå Champs probl√©matiques vides:', emptyProblematicFields);
  } else {
    console.log('‚úÖ Tous les champs probl√©matiques sont remplis');
  }
}

// Fonction utilitaire pour r√©cup√©rer la valeur d'un champ
function getFormFieldValue(fieldName) {
  // Essayer diff√©rents s√©lecteurs
  const selectors = [
    `input[name="${fieldName}"]`,
    `input[id="${fieldName}"]`,
    `select[name="${fieldName}"]`,
    `select[id="${fieldName}"]`,
    `textarea[name="${fieldName}"]`,
    `textarea[id="${fieldName}"]`,
    `[data-field="${fieldName}"]`,
    `[data-testid="${fieldName}"]`
  ];

  for (const selector of selectors) {
    const element = document.querySelector(selector);
    if (element) {
      if (element.type === 'checkbox') {
        return element.checked;
      } else if (element.type === 'radio') {
        const checkedRadio = element.closest('div')?.querySelector('input[type="radio"]:checked');
        return checkedRadio ? checkedRadio.value : null;
      } else {
        return element.value;
      }
    }
  }

  return null;
}

// Fonction pour simuler la soumission du formulaire
function simulateFormSubmission() {
  console.log('üöÄ Simulation de soumission du formulaire...');
  
  const dialog = document.querySelector('[role="dialog"]');
  if (!dialog) {
    console.log('‚ùå Aucun formulaire ouvert');
    return;
  }

  // R√©cup√©rer le bouton de soumission
  const submitButton = dialog.querySelector('button[type="submit"], button:contains("Modifier"), button:contains("Cr√©er")');
  if (submitButton) {
    console.log('üîò Bouton de soumission trouv√©:', submitButton.textContent);
    console.log('üîò Bouton d√©sactiv√©:', submitButton.disabled);
    
    if (!submitButton.disabled) {
      console.log('üí° Le bouton est activ√© - pr√™t pour la soumission');
    } else {
      console.log('‚ö†Ô∏è Le bouton est d√©sactiv√© - v√©rifiez la validation du formulaire');
    }
  } else {
    console.log('‚ùå Bouton de soumission non trouv√©');
  }
}

// Fonction pour surveiller les changements de donn√©es
function watchDataChanges() {
  console.log('üëÄ Surveillance des changements de donn√©es...');
  
  const store = window.__ZUSTAND_STORE__;
  if (store) {
    let previousClients = store.getState().clients;
    
    setInterval(() => {
      const currentClients = store.getState().clients;
      if (currentClients.length !== previousClients.length) {
        console.log('üîÑ Changement d√©tect√© dans les clients:', currentClients.length);
        
        // Analyser le dernier client ajout√©
        if (currentClients.length > previousClients.length) {
          const newClient = currentClients[0]; // Le plus r√©cent
          console.log('üìã Nouveau client ajout√©:', newClient);
          
          // V√©rifier les champs probl√©matiques
          const problematicFields = ['region', 'postalCode', 'city', 'accountingCode', 'cniIdentifier', 'companyName', 'sirenNumber', 'vatNumber'];
          problematicFields.forEach(field => {
            const value = newClient[field];
            const status = value !== undefined && value !== null && value !== '' ? '‚úÖ' : '‚ùå';
            console.log(`${status} ${field}: ${value}`);
          });
        }
        
        previousClients = currentClients;
      }
    }, 1000);
  }
}

// Fonction pour tester la validation du formulaire
function testFormValidation() {
  console.log('‚úÖ Test de validation du formulaire...');
  
  const dialog = document.querySelector('[role="dialog"]');
  if (!dialog) {
    console.log('‚ùå Aucun formulaire ouvert');
    return;
  }

  // V√©rifier les champs requis
  const requiredFields = dialog.querySelectorAll('input[required], select[required], textarea[required]');
  console.log('üìã Champs requis trouv√©s:', requiredFields.length);
  
  requiredFields.forEach((field, index) => {
    const isValid = field.checkValidity();
    const status = isValid ? '‚úÖ' : '‚ùå';
    console.log(`${status} Champ requis ${index + 1}: ${field.name || field.id} - Valide: ${isValid}`);
  });

  // V√©rifier les messages d'erreur
  const errorMessages = dialog.querySelectorAll('.Mui-error, [role="alert"], .error-message');
  if (errorMessages.length > 0) {
    console.log('‚ùå Messages d\'erreur trouv√©s:', errorMessages.length);
    errorMessages.forEach((error, index) => {
      console.log(`   Erreur ${index + 1}: ${error.textContent}`);
    });
  } else {
    console.log('‚úÖ Aucun message d\'erreur trouv√©');
  }
}

// Ex√©cuter tous les tests
console.log('üöÄ D√©marrage des tests de mapping...');

// Test 1: Store Zustand
testZustandStore();

// Test 2: Surveillance Supabase
monitorSupabaseCalls();

// Test 3: Formulaire client
setTimeout(() => {
  testClientForm();
}, 1000);

// Test 4: Validation du formulaire
setTimeout(() => {
  testFormValidation();
}, 1500);

// Test 5: Simulation de soumission
setTimeout(() => {
  simulateFormSubmission();
}, 2000);

// Test 6: Surveillance des changements
setTimeout(() => {
  watchDataChanges();
}, 2500);

// Instructions pour l'utilisateur
console.log(`
üìù Instructions pour tester le mapping:

1. Ouvrez le formulaire "Nouveau Client" ou "Modifier le Client"
2. Remplissez tous les champs (r√©gion, code postal, ville, etc.)
3. Ce script va surveiller:
   - Les appels √† Supabase
   - Les changements dans le store
   - La validation du formulaire
   - Les donn√©es transmises

4. Cliquez sur "Cr√©er" ou "Modifier" et observez les logs
5. V√©rifiez que toutes les donn√©es sont bien transmises

Si des champs montrent ‚ùå, cela signifie qu'ils ne sont pas correctement mapp√©s.
`);

// Fonction pour afficher les donn√©es en temps r√©el
function showRealTimeData() {
  const store = window.__ZUSTAND_STORE__;
  if (store) {
    setInterval(() => {
      const clients = store.getState().clients;
      if (clients.length > 0) {
        const lastClient = clients[0];
        console.log('üìä Dernier client en temps r√©el:', {
          id: lastClient.id,
          firstName: lastClient.firstName,
          lastName: lastClient.lastName,
          email: lastClient.email,
          region: lastClient.region,
          postalCode: lastClient.postalCode,
          city: lastClient.city,
          accountingCode: lastClient.accountingCode,
          cniIdentifier: lastClient.cniIdentifier,
          companyName: lastClient.companyName,
          sirenNumber: lastClient.sirenNumber,
          vatNumber: lastClient.vatNumber
        });
      }
    }, 5000);
  }
}

// D√©marrer l'affichage en temps r√©el
setTimeout(showRealTimeData, 3000);
