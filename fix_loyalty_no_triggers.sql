-- =====================================================
-- CORRECTION LOYALTY SANS TRIGGERS
-- =====================================================
-- Script pour corriger les donn√©es en d√©sactivant temporairement les triggers
-- Date: 2025-01-23
-- =====================================================

-- 1. DIAGNOSTIC de l'√©tat actuel
SELECT '=== DIAGNOSTIC √âTAT ACTUEL ===' as etape;

-- V√©rifier les donn√©es dans loyalty_tiers_advanced
SELECT 
    'loyalty_tiers_advanced' as table_name,
    COUNT(*) as total_count,
    COUNT(CASE WHEN workshop_id IS NULL THEN 1 END) as null_workshop_id,
    COUNT(CASE WHEN is_active = true THEN 1 END) as active_count
FROM loyalty_tiers_advanced;

-- V√©rifier les donn√©es dans loyalty_config
SELECT 
    'loyalty_config' as table_name,
    COUNT(*) as total_count,
    COUNT(CASE WHEN workshop_id IS NULL THEN 1 END) as null_workshop_id
FROM loyalty_config;

-- 2. D√âSACTIVER temporairement les triggers
SELECT '=== D√âSACTIVATION TRIGGERS ===' as etape;

-- D√©sactiver les triggers sur loyalty_tiers_advanced
ALTER TABLE loyalty_tiers_advanced DISABLE TRIGGER ALL;

-- D√©sactiver les triggers sur loyalty_config
ALTER TABLE loyalty_config DISABLE TRIGGER ALL;

-- 3. NETTOYER les donn√©es existantes
SELECT '=== NETTOYAGE DONN√âES EXISTANTES ===' as etape;

-- Supprimer toutes les donn√©es existantes
DELETE FROM loyalty_tiers_advanced;
DELETE FROM loyalty_config;

-- V√©rifier que les tables sont vides
SELECT 'loyalty_tiers_advanced' as table_name, COUNT(*) as count FROM loyalty_tiers_advanced
UNION ALL
SELECT 'loyalty_config' as table_name, COUNT(*) as count FROM loyalty_config;

-- 4. CR√âER des donn√©es pour tous les utilisateurs
SELECT '=== CR√âATION DONN√âES POUR TOUS LES UTILISATEURS ===' as etape;

-- Cr√©er des niveaux par d√©faut pour tous les utilisateurs
INSERT INTO loyalty_tiers_advanced (workshop_id, name, points_required, discount_percentage, color, description, is_active, created_at, updated_at)
SELECT 
    au.id,
    'Bronze',
    0,
    0.00,
    '#CD7F32',
    'Niveau de base',
    true,
    NOW(),
    NOW()
FROM auth.users au;

INSERT INTO loyalty_tiers_advanced (workshop_id, name, points_required, discount_percentage, color, description, is_active, created_at, updated_at)
SELECT 
    au.id,
    'Argent',
    100,
    5.00,
    '#C0C0C0',
    '5% de r√©duction',
    true,
    NOW(),
    NOW()
FROM auth.users au;

INSERT INTO loyalty_tiers_advanced (workshop_id, name, points_required, discount_percentage, color, description, is_active, created_at, updated_at)
SELECT 
    au.id,
    'Or',
    500,
    10.00,
    '#FFD700',
    '10% de r√©duction',
    true,
    NOW(),
    NOW()
FROM auth.users au;

INSERT INTO loyalty_tiers_advanced (workshop_id, name, points_required, discount_percentage, color, description, is_active, created_at, updated_at)
SELECT 
    au.id,
    'Platine',
    1000,
    15.00,
    '#E5E4E2',
    '15% de r√©duction',
    true,
    NOW(),
    NOW()
FROM auth.users au;

INSERT INTO loyalty_tiers_advanced (workshop_id, name, points_required, discount_percentage, color, description, is_active, created_at, updated_at)
SELECT 
    au.id,
    'Diamant',
    2000,
    20.00,
    '#B9F2FF',
    '20% de r√©duction',
    true,
    NOW(),
    NOW()
FROM auth.users au;

-- Cr√©er des configurations par d√©faut pour tous les utilisateurs
INSERT INTO loyalty_config (workshop_id, key, value, description, created_at, updated_at)
SELECT 
    au.id,
    'points_per_euro',
    '1',
    'Points gagn√©s par euro d√©pens√©',
    NOW(),
    NOW()
FROM auth.users au;

INSERT INTO loyalty_config (workshop_id, key, value, description, created_at, updated_at)
SELECT 
    au.id,
    'minimum_purchase',
    '10',
    'Montant minimum pour gagner des points',
    NOW(),
    NOW()
FROM auth.users au;

INSERT INTO loyalty_config (workshop_id, key, value, description, created_at, updated_at)
SELECT 
    au.id,
    'bonus_threshold',
    '100',
    'Seuil pour bonus de points',
    NOW(),
    NOW()
FROM auth.users au;

INSERT INTO loyalty_config (workshop_id, key, value, description, created_at, updated_at)
SELECT 
    au.id,
    'bonus_multiplier',
    '1.5',
    'Multiplicateur de bonus',
    NOW(),
    NOW()
FROM auth.users au;

INSERT INTO loyalty_config (workshop_id, key, value, description, created_at, updated_at)
SELECT 
    au.id,
    'points_expiry_days',
    '365',
    'Dur√©e de validit√© des points en jours',
    NOW(),
    NOW()
FROM auth.users au;

INSERT INTO loyalty_config (workshop_id, key, value, description, created_at, updated_at)
SELECT 
    au.id,
    'auto_tier_upgrade',
    'true',
    'Mise √† jour automatique des niveaux de fid√©lit√©',
    NOW(),
    NOW()
FROM auth.users au;

-- 5. NETTOYER les clients avec des tier_id invalides
SELECT '=== NETTOYAGE CLIENTS ===' as etape;

-- Supprimer les current_tier_id qui ne correspondent √† aucun tier existant
UPDATE clients 
SET current_tier_id = NULL 
WHERE current_tier_id IS NOT NULL 
AND current_tier_id NOT IN (
    SELECT id FROM loyalty_tiers_advanced
);

-- 6. R√âACTIVER les triggers
SELECT '=== R√âACTIVATION TRIGGERS ===' as etape;

-- R√©activer les triggers sur loyalty_tiers_advanced
ALTER TABLE loyalty_tiers_advanced ENABLE TRIGGER ALL;

-- R√©activer les triggers sur loyalty_config
ALTER TABLE loyalty_config ENABLE TRIGGER ALL;

-- 7. V√âRIFICATION FINALE
SELECT '=== V√âRIFICATION FINALE ===' as etape;

-- V√©rifier les niveaux apr√®s cr√©ation
SELECT 
    'Niveaux apr√®s cr√©ation' as info,
    workshop_id,
    COUNT(*) as count,
    STRING_AGG(name, ', ') as names
FROM loyalty_tiers_advanced 
GROUP BY workshop_id
ORDER BY workshop_id;

-- V√©rifier les configurations apr√®s cr√©ation
SELECT 
    'Configurations apr√®s cr√©ation' as info,
    workshop_id,
    COUNT(*) as count,
    STRING_AGG(key, ', ') as keys
FROM loyalty_config 
GROUP BY workshop_id
ORDER BY workshop_id;

-- V√©rifier les clients apr√®s nettoyage
SELECT 
    'Clients apr√®s nettoyage' as info,
    COUNT(*) as total_clients,
    COUNT(CASE WHEN loyalty_points > 0 THEN 1 END) as clients_with_points,
    COUNT(CASE WHEN current_tier_id IS NOT NULL THEN 1 END) as clients_with_tier_id
FROM clients;

-- 8. TEST des politiques RLS
SELECT '=== TEST POLITIQUES RLS ===' as etape;

-- V√©rifier les politiques
SELECT 
    tablename,
    policyname,
    cmd,
    CASE 
        WHEN qual LIKE '%workshop_id = auth.uid()%' AND qual LIKE '%auth.uid() IS NOT NULL%' THEN '‚úÖ Ultra-strict OK'
        WHEN qual LIKE '%workshop_id = auth.uid()%' THEN '‚ö†Ô∏è Strict OK'
        ELSE '‚ùå Isolation manquante'
    END as isolation_status
FROM pg_policies 
WHERE tablename IN ('loyalty_tiers_advanced', 'loyalty_config')
ORDER BY tablename, policyname;

-- 9. Instructions finales
SELECT '=== INSTRUCTIONS FINALES ===' as etape;
SELECT '‚úÖ Triggers d√©sactiv√©s temporairement' as message;
SELECT '‚úÖ Donn√©es cr√©√©es pour tous les utilisateurs' as creation;
SELECT '‚úÖ Niveaux par d√©faut cr√©√©s' as niveaux;
SELECT '‚úÖ Configuration par d√©faut cr√©√©e' as config;
SELECT '‚úÖ Clients nettoy√©s (tier_id invalides supprim√©s)' as nettoyage;
SELECT '‚úÖ Triggers r√©activ√©s' as triggers;
SELECT 'üö® RED√âPLOYEZ L''APPLICATION' as deploy;
SELECT '‚ÑπÔ∏è Les niveaux devraient maintenant s''afficher dans l''interface' as note;
