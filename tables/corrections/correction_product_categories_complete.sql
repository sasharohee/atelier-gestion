-- ============================================================================
-- CORRECTION COMPL√àTE DES PROBL√àMES PRODUCT_CATEGORIES
-- ============================================================================
-- Date: $(date)
-- Description: R√©solution des erreurs de cr√©ation de cat√©gories
-- Probl√®mes r√©solus:
-- 1. Champ 'created_by' manquant dans la table
-- 2. Cat√©gories par d√©faut non d√©sir√©es
-- 3. Erreur 400 sur l'API
-- 4. Champ workshop_id manquant dans les insertions
-- ============================================================================

-- 1. SUPPRIMER LES CAT√âGORIES PAR D√âFAUT NON D√âSIR√âES
-- ============================================================================
SELECT '=== SUPPRESSION CAT√âGORIES PAR D√âFAUT ===' as section;

-- Supprimer toutes les cat√©gories existantes (elles ne devraient pas exister)
DO $$
BEGIN
    DELETE FROM public.product_categories;
    RAISE NOTICE '‚úÖ Toutes les cat√©gories par d√©faut ont √©t√© supprim√©es';
END $$;

-- 2. AJOUTER LA COLONNE CREATED_BY MANQUANTE
-- ============================================================================
SELECT '=== AJOUT COLONNE CREATED_BY ===' as section;

DO $$
BEGIN
    -- V√©rifier si la colonne created_by existe
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'product_categories' 
        AND column_name = 'created_by'
    ) THEN
        ALTER TABLE public.product_categories 
        ADD COLUMN created_by UUID REFERENCES auth.users(id);
        RAISE NOTICE '‚úÖ Colonne created_by ajout√©e √† product_categories';
    ELSE
        RAISE NOTICE '‚úÖ Colonne created_by existe d√©j√† dans product_categories';
    END IF;
END $$;

-- 3. V√âRIFIER ET AJOUTER LA COLONNE WORKSHOP_ID SI N√âCESSAIRE
-- ============================================================================
SELECT '=== V√âRIFICATION COLONNE WORKSHOP_ID ===' as section;

DO $$
BEGIN
    -- V√©rifier si la colonne workshop_id existe
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'product_categories' 
        AND column_name = 'workshop_id'
    ) THEN
        ALTER TABLE public.product_categories 
        ADD COLUMN workshop_id UUID REFERENCES auth.users(id);
        RAISE NOTICE '‚úÖ Colonne workshop_id ajout√©e √† product_categories';
    ELSE
        RAISE NOTICE '‚úÖ Colonne workshop_id existe d√©j√† dans product_categories';
    END IF;
END $$;

-- 4. CR√âER/METTRE √Ä JOUR LES TRIGGERS POUR L'ISOLATION
-- ============================================================================
SELECT '=== CR√âATION TRIGGERS ISOLATION ===' as section;

-- Fonction pour d√©finir automatiquement user_id et workshop_id
CREATE OR REPLACE FUNCTION set_product_categories_context()
RETURNS TRIGGER AS $$
BEGIN
    -- D√©finir user_id et workshop_id automatiquement
    NEW.user_id := auth.uid();
    NEW.workshop_id := auth.uid();
    NEW.created_by := auth.uid();
    
    -- D√©finir les timestamps
    NEW.created_at := NOW();
    NEW.updated_at := NOW();
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Supprimer les anciens triggers s'ils existent
DROP TRIGGER IF EXISTS set_product_categories_user_id_trigger ON public.product_categories;
DROP TRIGGER IF EXISTS set_product_categories_workshop_id_trigger ON public.product_categories;
DROP TRIGGER IF EXISTS set_product_category_context_trigger ON public.product_categories;

-- Cr√©er le nouveau trigger unifi√©
CREATE TRIGGER set_product_categories_context_trigger
    BEFORE INSERT ON public.product_categories
    FOR EACH ROW
    EXECUTE FUNCTION set_product_categories_context();

-- 5. CR√âER LES INDEX POUR LES PERFORMANCES
-- ============================================================================
SELECT '=== CR√âATION INDEX ===' as section;

CREATE INDEX IF NOT EXISTS idx_product_categories_user_id ON public.product_categories(user_id);
CREATE INDEX IF NOT EXISTS idx_product_categories_workshop_id ON public.product_categories(workshop_id);
CREATE INDEX IF NOT EXISTS idx_product_categories_created_by ON public.product_categories(created_by);
CREATE INDEX IF NOT EXISTS idx_product_categories_name ON public.product_categories(name);
CREATE INDEX IF NOT EXISTS idx_product_categories_active ON public.product_categories(is_active);

-- 6. METTRE √Ä JOUR LES POLITIQUES RLS
-- ============================================================================
SELECT '=== MISE √Ä JOUR POLITIQUES RLS ===' as section;

-- Supprimer les anciennes politiques
DROP POLICY IF EXISTS "Users can view their own product categories" ON public.product_categories;
DROP POLICY IF EXISTS "Users can insert their own product categories" ON public.product_categories;
DROP POLICY IF EXISTS "Users can update their own product categories" ON public.product_categories;
DROP POLICY IF EXISTS "Users can delete their own product categories" ON public.product_categories;

-- Cr√©er les nouvelles politiques RLS
CREATE POLICY "Users can view their own product categories" ON public.product_categories
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own product categories" ON public.product_categories
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own product categories" ON public.product_categories
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own product categories" ON public.product_categories
    FOR DELETE USING (auth.uid() = user_id);

-- 7. TEST DE FONCTIONNEMENT
-- ============================================================================
SELECT '=== TEST DE FONCTIONNEMENT ===' as section;

DO $$
DECLARE
    v_user_id UUID;
    v_test_category_id UUID;
    v_test_result BOOLEAN;
BEGIN
    -- R√©cup√©rer l'utilisateur actuel
    v_user_id := auth.uid();
    
    IF v_user_id IS NOT NULL THEN
        RAISE NOTICE 'üß™ Test avec l''utilisateur: %', v_user_id;
        
        -- Test 1: Cr√©er une cat√©gorie de test
        BEGIN
            INSERT INTO public.product_categories (
                name, description, icon, color, is_active, sort_order
            ) VALUES (
                'Test Category ' || extract(epoch from now()), 
                'Cat√©gorie de test pour v√©rification', 
                'test', 
                '#ff0000', 
                true, 
                0
            ) RETURNING id INTO v_test_category_id;
            
            RAISE NOTICE '‚úÖ Test r√©ussi : Cat√©gorie cr√©√©e - ID: %', v_test_category_id;
            
            -- V√©rifier que les champs sont correctement remplis
            SELECT 
                (user_id = v_user_id) AND 
                (workshop_id = v_user_id) AND 
                (created_by = v_user_id) AND
                (created_at IS NOT NULL) AND
                (updated_at IS NOT NULL)
            INTO v_test_result
            FROM public.product_categories 
            WHERE id = v_test_category_id;
            
            IF v_test_result THEN
                RAISE NOTICE '‚úÖ Test r√©ussi : Tous les champs sont correctement remplis';
            ELSE
                RAISE NOTICE '‚ùå Test √©chou√© : Certains champs ne sont pas correctement remplis';
            END IF;
            
            -- Nettoyer la cat√©gorie de test
            DELETE FROM public.product_categories WHERE id = v_test_category_id;
            RAISE NOTICE '‚úÖ Cat√©gorie de test supprim√©e';
            
        EXCEPTION WHEN OTHERS THEN
            RAISE NOTICE '‚ùå Erreur lors du test: %', SQLERRM;
        END;
    ELSE
        RAISE NOTICE '‚ö†Ô∏è Aucun utilisateur connect√© pour le test';
    END IF;
END $$;

-- 8. V√âRIFICATION FINALE
-- ============================================================================
SELECT '=== V√âRIFICATION FINALE ===' as section;

-- V√©rifier la structure de la table
SELECT 
    column_name, 
    data_type, 
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_schema = 'public' 
AND table_name = 'product_categories'
ORDER BY ordinal_position;

-- V√©rifier qu'il n'y a plus de cat√©gories par d√©faut
SELECT 
    COUNT(*) as total_categories,
    COUNT(CASE WHEN user_id IS NULL THEN 1 END) as categories_without_user
FROM public.product_categories;

-- V√©rifier les triggers
SELECT 
    trigger_name, 
    event_manipulation, 
    action_timing
FROM information_schema.triggers 
WHERE event_object_table = 'product_categories';

-- V√©rifier les politiques RLS
SELECT 
    policyname, 
    cmd, 
    qual
FROM pg_policies 
WHERE tablename = 'product_categories';

DO $$
BEGIN
    RAISE NOTICE 'üéâ Correction compl√®te des probl√®mes product_categories termin√©e !';
    RAISE NOTICE '‚úÖ Les cat√©gories par d√©faut ont √©t√© supprim√©es';
    RAISE NOTICE '‚úÖ La colonne created_by a √©t√© ajout√©e';
    RAISE NOTICE '‚úÖ Les triggers d''isolation ont √©t√© mis √† jour';
    RAISE NOTICE '‚úÖ Les politiques RLS ont √©t√© configur√©es';
    RAISE NOTICE '‚úÖ Vous pouvez maintenant cr√©er des cat√©gories sans erreur';
END $$;
