-- Correction de la r√©cursion infinie dans les politiques RLS
-- Date: 2024-01-24
-- Solution pour r√©soudre l'erreur "infinite recursion detected in policy for relation users"

-- ========================================
-- 1. SUPPRIMER TOUTES LES POLITIQUES RLS PROBL√âMATIQUES
-- ========================================

-- Supprimer toutes les politiques sur subscription_status
DROP POLICY IF EXISTS "Users can view own subscription" ON subscription_status;
DROP POLICY IF EXISTS "Users can update own subscription" ON subscription_status;
DROP POLICY IF EXISTS "Admins can manage all subscriptions" ON subscription_status;
DROP POLICY IF EXISTS "Allow all operations on subscription_status" ON subscription_status;

-- Supprimer toutes les politiques sur users
DROP POLICY IF EXISTS "Users can view own data" ON public.users;
DROP POLICY IF EXISTS "Users can update own data" ON public.users;
DROP POLICY IF EXISTS "Admins can manage all users" ON public.users;
DROP POLICY IF EXISTS "Allow all operations on users" ON public.users;

-- ========================================
-- 2. D√âSACTIVER RLS TEMPORAIREMENT
-- ========================================

-- D√©sactiver RLS sur toutes les tables probl√©matiques
ALTER TABLE subscription_status DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.users DISABLE ROW LEVEL SECURITY;

-- ========================================
-- 3. CR√âER DES POLITIQUES RLS SIMPLES SANS R√âCURSION
-- ========================================

-- R√©activer RLS
ALTER TABLE subscription_status ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- Politiques tr√®s simples pour subscription_status
CREATE POLICY "subscription_status_select_policy" ON subscription_status
    FOR SELECT USING (true);

CREATE POLICY "subscription_status_insert_policy" ON subscription_status
    FOR INSERT WITH CHECK (true);

CREATE POLICY "subscription_status_update_policy" ON subscription_status
    FOR UPDATE USING (true);

CREATE POLICY "subscription_status_delete_policy" ON subscription_status
    FOR DELETE USING (true);

-- Politiques tr√®s simples pour users
CREATE POLICY "users_select_policy" ON public.users
    FOR SELECT USING (true);

CREATE POLICY "users_insert_policy" ON public.users
    FOR INSERT WITH CHECK (true);

CREATE POLICY "users_update_policy" ON public.users
    FOR UPDATE USING (true);

CREATE POLICY "users_delete_policy" ON public.users
    FOR DELETE USING (true);

-- ========================================
-- 4. V√âRIFIER QUE LES TABLES EXISTENT
-- ========================================

-- Cr√©er la table subscription_status si elle n'existe pas
CREATE TABLE IF NOT EXISTS subscription_status (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    first_name TEXT,
    last_name TEXT,
    email TEXT,
    is_active BOOLEAN DEFAULT true,
    role TEXT DEFAULT 'technician',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Cr√©er la table users si elle n'existe pas
CREATE TABLE IF NOT EXISTS public.users (
    id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
    email TEXT,
    role TEXT DEFAULT 'technician',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- 5. CR√âER UNE FONCTION RPC SIMPLE
-- ========================================

CREATE OR REPLACE FUNCTION create_user_default_data(p_user_id UUID, p_email TEXT DEFAULT NULL)
RETURNS JSON AS $$
DECLARE
    user_email TEXT;
    is_admin BOOLEAN;
    user_role TEXT;
BEGIN
    -- D√©terminer si l'utilisateur est admin
    user_email := COALESCE(p_email, '');
    is_admin := (user_email = 'srohee32@gmail.com' OR user_email = 'repphonereparation@gmail.com');
    user_role := CASE WHEN is_admin THEN 'admin' ELSE 'technician' END;
    
    -- Ins√©rer dans users
    INSERT INTO public.users (id, email, role)
    VALUES (p_user_id, user_email, user_role)
    ON CONFLICT (id) DO UPDATE SET
        email = EXCLUDED.email,
        role = EXCLUDED.role,
        updated_at = NOW();
    
    -- Ins√©rer dans subscription_status
    INSERT INTO subscription_status (user_id, first_name, last_name, email, is_active, role)
    VALUES (p_user_id, 'Utilisateur', 'Test', user_email, true, user_role)
    ON CONFLICT (user_id) DO UPDATE SET
        first_name = EXCLUDED.first_name,
        last_name = EXCLUDED.last_name,
        email = EXCLUDED.email,
        is_active = EXCLUDED.is_active,
        role = EXCLUDED.role,
        updated_at = NOW();
    
    RETURN json_build_object(
        'success', true,
        'message', 'Donn√©es utilisateur cr√©√©es avec succ√®s',
        'user_id', p_user_id,
        'is_admin', is_admin,
        'role', user_role
    );
    
EXCEPTION WHEN OTHERS THEN
    RETURN json_build_object(
        'success', false,
        'error', 'Erreur lors de la cr√©ation des donn√©es: ' || SQLERRM
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ========================================
-- 6. V√âRIFICATIONS
-- ========================================

-- V√©rifier que les tables existent
SELECT 
    'V√âRIFICATION DES TABLES' as check_type,
    table_name,
    CASE 
        WHEN table_name IN ('users', 'subscription_status') THEN '‚úÖ Table pr√©sente'
        ELSE '‚ùì ' || table_name
    END as status
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name IN ('users', 'subscription_status');

-- V√©rifier les politiques RLS
SELECT 
    'V√âRIFICATION DES POLITIQUES RLS' as check_type,
    schemaname,
    tablename,
    policyname,
    cmd,
    CASE 
        WHEN cmd IN ('SELECT', 'INSERT', 'UPDATE', 'DELETE') THEN '‚úÖ Politique simple pr√©sente'
        ELSE '‚ö†Ô∏è ' || cmd
    END as status
FROM pg_policies 
WHERE schemaname = 'public' 
AND tablename IN ('users', 'subscription_status')
ORDER BY tablename, cmd;

-- ========================================
-- 7. MESSAGES DE CONFIRMATION
-- ========================================

DO $$
BEGIN
    RAISE NOTICE 'üéâ CORRECTION DE LA R√âCURSION TERMIN√âE !';
    RAISE NOTICE '‚úÖ Toutes les politiques probl√©matiques supprim√©es';
    RAISE NOTICE '‚úÖ RLS d√©sactiv√© temporairement';
    RAISE NOTICE '‚úÖ Politiques RLS simples cr√©√©es (sans r√©cursion)';
    RAISE NOTICE '‚úÖ Tables cr√©√©es/v√©rifi√©es';
    RAISE NOTICE '‚úÖ Fonction RPC cr√©√©e';
    RAISE NOTICE '';
    RAISE NOTICE 'üìã TESTEZ MAINTENANT:';
    RAISE NOTICE '1. Rechargez votre application';
    RAISE NOTICE '2. L''erreur de r√©cursion devrait √™tre r√©solue';
    RAISE NOTICE '3. L''inscription devrait fonctionner !';
    RAISE NOTICE '';
    RAISE NOTICE 'üîß FONCTION DISPONIBLE:';
    RAISE NOTICE '- create_user_default_data(user_id, email)';
    RAISE NOTICE '';
    RAISE NOTICE '‚ö†Ô∏è NOTE: RLS est configur√© de mani√®re permissive pour √©viter les r√©cursions';
    RAISE NOTICE '   Vous pourrez ajuster les politiques plus tard si n√©cessaire.';
END $$;
