-- Test de la fonction add_loyalty_points
-- Ce script teste si la fonction fonctionne correctement

-- 1. S√âLECTIONNER UN CLIENT POUR LE TEST
SELECT 'üß™ S√âLECTION D''UN CLIENT DE TEST:' as info;

WITH client_test AS (
    SELECT 
        id as client_id,
        first_name,
        last_name,
        COALESCE(loyalty_points, 0) as points_avant,
        current_tier_id
    FROM clients
    LIMIT 1
)
SELECT 
    client_id,
    first_name || ' ' || last_name as nom_complet,
    points_avant,
    current_tier_id
FROM client_test;

-- 2. TESTER LA FONCTION ADD_LOYALTY_POINTS
SELECT 'üîß TEST DE LA FONCTION ADD_LOYALTY_POINTS:' as info;

-- Test avec un client existant
DO $$ 
DECLARE
    v_client_id UUID;
    v_points_avant INTEGER;
    v_result JSON;
    v_points_apres INTEGER;
BEGIN
    -- R√©cup√©rer un client pour le test
    SELECT id, COALESCE(loyalty_points, 0) 
    INTO v_client_id, v_points_avant
    FROM clients 
    LIMIT 1;
    
    IF v_client_id IS NULL THEN
        RAISE NOTICE '‚ùå Aucun client trouv√© pour le test';
        RETURN;
    END IF;
    
    RAISE NOTICE 'üß™ Test avec client: % (points avant: %)', v_client_id, v_points_avant;
    
    -- Appeler la fonction
    SELECT add_loyalty_points(v_client_id, 50, 'Test de la fonction') INTO v_result;
    
    RAISE NOTICE 'üìä R√©sultat de la fonction: %', v_result;
    
    -- V√©rifier le r√©sultat
    IF v_result->>'success' = 'true' THEN
        RAISE NOTICE '‚úÖ Fonction ex√©cut√©e avec succ√®s';
        
        -- V√©rifier les points apr√®s
        SELECT COALESCE(loyalty_points, 0) INTO v_points_apres
        FROM clients 
        WHERE id = v_client_id;
        
        RAISE NOTICE 'üìà Points avant: %, Points apr√®s: %, Diff√©rence: %', 
            v_points_avant, v_points_apres, v_points_apres - v_points_avant;
        
        IF v_points_apres = v_points_avant + 50 THEN
            RAISE NOTICE '‚úÖ Points correctement ajout√©s !';
        ELSE
            RAISE NOTICE '‚ùå Probl√®me: les points n''ont pas √©t√© ajout√©s correctement';
        END IF;
        
    ELSE
        RAISE NOTICE '‚ùå Erreur dans la fonction: %', v_result->>'error';
    END IF;
    
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'üí• Exception lors du test: %', SQLERRM;
END $$;

-- 3. V√âRIFIER L'HISTORIQUE
SELECT 'üìä V√âRIFICATION DE L''HISTORIQUE:' as info;

SELECT 
    lph.client_id,
    c.first_name || ' ' || c.last_name as nom_client,
    lph.points_change,
    lph.points_before,
    lph.points_after,
    lph.description,
    lph.points_type,
    lph.source_type,
    lph.created_at
FROM loyalty_points_history lph
JOIN clients c ON lph.client_id = c.id
ORDER BY lph.created_at DESC
LIMIT 5;

-- 4. V√âRIFIER LES CLIENTS APR√àS LE TEST
SELECT 'üë• √âTAT DES CLIENTS APR√àS LE TEST:' as info;

SELECT 
    id,
    first_name || ' ' || last_name as nom_complet,
    COALESCE(loyalty_points, 0) as loyalty_points,
    current_tier_id,
    updated_at
FROM clients
ORDER BY updated_at DESC
LIMIT 5;

-- 5. TEST DE LA FONCTION USE_LOYALTY_POINTS
SELECT 'üîß TEST DE LA FONCTION USE_LOYALTY_POINTS:' as info;

DO $$ 
DECLARE
    v_client_id UUID;
    v_points_avant INTEGER;
    v_result JSON;
    v_points_apres INTEGER;
BEGIN
    -- R√©cup√©rer un client avec des points pour le test
    SELECT id, COALESCE(loyalty_points, 0) 
    INTO v_client_id, v_points_avant
    FROM clients 
    WHERE COALESCE(loyalty_points, 0) > 0
    LIMIT 1;
    
    IF v_client_id IS NULL THEN
        RAISE NOTICE '‚ùå Aucun client avec des points trouv√© pour le test';
        RETURN;
    END IF;
    
    RAISE NOTICE 'üß™ Test use_loyalty_points avec client: % (points avant: %)', v_client_id, v_points_avant;
    
    -- Appeler la fonction
    SELECT use_loyalty_points(v_client_id, 10, 'Test utilisation points') INTO v_result;
    
    RAISE NOTICE 'üìä R√©sultat de la fonction: %', v_result;
    
    -- V√©rifier le r√©sultat
    IF v_result->>'success' = 'true' THEN
        RAISE NOTICE '‚úÖ Fonction use_loyalty_points ex√©cut√©e avec succ√®s';
        
        -- V√©rifier les points apr√®s
        SELECT COALESCE(loyalty_points, 0) INTO v_points_apres
        FROM clients 
        WHERE id = v_client_id;
        
        RAISE NOTICE 'üìà Points avant: %, Points apr√®s: %, Diff√©rence: %', 
            v_points_avant, v_points_apres, v_points_apres - v_points_avant;
        
        IF v_points_apres = v_points_avant - 10 THEN
            RAISE NOTICE '‚úÖ Points correctement utilis√©s !';
        ELSE
            RAISE NOTICE '‚ùå Probl√®me: les points n''ont pas √©t√© utilis√©s correctement';
        END IF;
        
    ELSE
        RAISE NOTICE '‚ùå Erreur dans la fonction use_loyalty_points: %', v_result->>'error';
    END IF;
    
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'üí• Exception lors du test use_loyalty_points: %', SQLERRM;
END $$;

-- 6. R√âSUM√â DES TESTS
SELECT 'üìã R√âSUM√â DES TESTS:' as info;

SELECT 
    'Test add_loyalty_points' as test,
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM loyalty_points_history 
            WHERE description = 'Test de la fonction'
            AND points_change = 50
        ) THEN '‚úÖ R√©ussi'
        ELSE '‚ùå √âchou√©'
    END as result

UNION ALL

SELECT 
    'Test use_loyalty_points' as test,
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM loyalty_points_history 
            WHERE description = 'Test utilisation points'
            AND points_change = -10
        ) THEN '‚úÖ R√©ussi'
        ELSE '‚ùå √âchou√©'
    END as result;

SELECT '‚úÖ Tests termin√©s !' as result;
