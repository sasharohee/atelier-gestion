-- VIDER COMPL√àTEMENT LE CATALOGUE
-- Ce script supprime toutes les donn√©es des tables du catalogue pour faire des tests propres

-- ============================================================================
-- 1. DIAGNOSTIC AVANT VIDAGE
-- ============================================================================

-- Compter les donn√©es avant suppression
SELECT 
    'AVANT VIDAGE' as periode,
    table_name,
    COUNT(*) as nombre_enregistrements
FROM (
    SELECT 'devices' as table_name, id FROM public.devices
    UNION ALL
    SELECT 'services', id FROM public.services  
    UNION ALL
    SELECT 'parts', id FROM public.parts
    UNION ALL
    SELECT 'products', id FROM public.products
    UNION ALL
    SELECT 'clients', id FROM public.clients
) t
GROUP BY table_name
ORDER BY table_name;

-- ============================================================================
-- 2. VIDAGE COMPLET DES TABLES (M√âTHODE S√õRE)
-- ============================================================================

-- Vider toutes les tables du catalogue avec DELETE (plus s√ªr que TRUNCATE)
-- Cette m√©thode respecte les contraintes et triggers sans n√©cessiter de permissions sp√©ciales

-- Vider les tables dans l'ordre pour respecter les contraintes de cl√©s √©trang√®res
DELETE FROM public.devices;
DELETE FROM public.services;
DELETE FROM public.parts;
DELETE FROM public.products;
DELETE FROM public.clients;

-- ============================================================================
-- 3. V√âRIFICATION APR√àS VIDAGE
-- ============================================================================

-- V√©rifier que toutes les tables sont vides
SELECT 
    'APR√àS VIDAGE' as periode,
    table_name,
    COUNT(*) as nombre_enregistrements
FROM (
    SELECT 'devices' as table_name, id FROM public.devices
    UNION ALL
    SELECT 'services', id FROM public.services  
    UNION ALL
    SELECT 'parts', id FROM public.parts
    UNION ALL
    SELECT 'products', id FROM public.products
    UNION ALL
    SELECT 'clients', id FROM public.clients
) t
GROUP BY table_name
ORDER BY table_name;

-- ============================================================================
-- 4. V√âRIFICATION DE LA STRUCTURE
-- ============================================================================

-- V√©rifier que la structure des tables est intacte
SELECT 
    'STRUCTURE' as verification,
    table_name,
    column_name,
    data_type,
    is_nullable
FROM information_schema.columns 
WHERE table_schema = 'public' 
    AND table_name IN ('devices', 'services', 'parts', 'products', 'clients')
ORDER BY table_name, ordinal_position;

-- ============================================================================
-- 5. V√âRIFICATION DES POLITIQUES RLS
-- ============================================================================

-- V√©rifier que les politiques RLS sont toujours en place
SELECT 
    'POLITIQUES RLS' as verification,
    schemaname,
    tablename,
    policyname,
    cmd
FROM pg_policies 
WHERE tablename IN ('devices', 'services', 'parts', 'products', 'clients')
    AND policyname LIKE '%CATALOG_ISOLATION%'
ORDER BY tablename, policyname;

-- ============================================================================
-- 6. TEST D'INSERTION VIDE
-- ============================================================================

-- Tester qu'on peut toujours ins√©rer des donn√©es
DO $$
DECLARE
    current_user_id UUID;
    test_result BOOLEAN := TRUE;
BEGIN
    -- R√©cup√©rer l'utilisateur connect√©
    SELECT auth.uid() INTO current_user_id;
    
    IF current_user_id IS NULL THEN
        RAISE NOTICE '‚ö†Ô∏è Aucun utilisateur connect√© - test d''insertion impossible';
        RETURN;
    END IF;
    
    RAISE NOTICE 'üß™ Test d''insertion avec utilisateur: %', current_user_id;
    
    -- Test d'insertion dans chaque table
    BEGIN
        INSERT INTO public.devices (brand, model, type, user_id) 
        VALUES ('Test Brand', 'Test Model', 'smartphone', current_user_id);
        RAISE NOTICE '‚úÖ Insertion devices: OK';
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ùå Erreur insertion devices: %', SQLERRM;
        test_result := FALSE;
    END;
    
    BEGIN
        INSERT INTO public.services (name, description, user_id) 
        VALUES ('Test Service', 'Test Description', current_user_id);
        RAISE NOTICE '‚úÖ Insertion services: OK';
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ùå Erreur insertion services: %', SQLERRM;
        test_result := FALSE;
    END;
    
    BEGIN
        INSERT INTO public.parts (name, part_number, brand, user_id) 
        VALUES ('Test Part', 'TEST001', 'Test Brand', current_user_id);
        RAISE NOTICE '‚úÖ Insertion parts: OK';
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ùå Erreur insertion parts: %', SQLERRM;
        test_result := FALSE;
    END;
    
    BEGIN
        INSERT INTO public.products (name, description, user_id) 
        VALUES ('Test Product', 'Test Description', current_user_id);
        RAISE NOTICE '‚úÖ Insertion products: OK';
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ùå Erreur insertion products: %', SQLERRM;
        test_result := FALSE;
    END;
    
    BEGIN
        INSERT INTO public.clients (first_name, last_name, email, user_id) 
        VALUES ('Test', 'Client', 'test@test.com', current_user_id);
        RAISE NOTICE '‚úÖ Insertion clients: OK';
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ùå Erreur insertion clients: %', SQLERRM;
        test_result := FALSE;
    END;
    
    -- Nettoyer les donn√©es de test
    DELETE FROM public.devices WHERE brand = 'Test Brand';
    DELETE FROM public.services WHERE name = 'Test Service';
    DELETE FROM public.parts WHERE name = 'Test Part';
    DELETE FROM public.products WHERE name = 'Test Product';
    DELETE FROM public.clients WHERE first_name = 'Test';
    
    IF test_result THEN
        RAISE NOTICE 'üéâ Tous les tests d''insertion r√©ussis - Catalogue pr√™t pour les tests';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è Certains tests d''insertion ont √©chou√©';
    END IF;
END $$;

-- ============================================================================
-- 7. MESSAGE DE CONFIRMATION FINAL
-- ============================================================================

SELECT 
    'üéâ CATALOGUE VID√â' as status,
    'Toutes les tables du catalogue ont √©t√© vid√©es avec succ√®s.' as message,
    'Le catalogue est maintenant pr√™t pour des tests propres.' as details,
    'Vous pouvez maintenant ajouter vos propres donn√©es de test.' as next_step;
