-- Ajout des colonnes manquantes pour les points de fid√©lit√© dans la table clients
-- Ce script ajoute les colonnes n√©cessaires pour le syst√®me de points de fid√©lit√©

-- 1. V√âRIFIER LA STRUCTURE ACTUELLE DE LA TABLE CLIENTS
SELECT 'üîç STRUCTURE ACTUELLE DE LA TABLE CLIENTS:' as info;

SELECT 
    column_name,
    data_type,
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_name = 'clients' 
AND table_schema = 'public'
ORDER BY ordinal_position;

-- 2. AJOUTER LES COLONNES MANQUANTES
SELECT '‚úÖ AJOUT DES COLONNES MANQUANTES...' as info;

-- Ajouter la colonne loyalty_points si elle n'existe pas
DO $$ 
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'clients' 
        AND column_name = 'loyalty_points'
        AND table_schema = 'public'
    ) THEN
        ALTER TABLE clients ADD COLUMN loyalty_points INTEGER DEFAULT 0;
        RAISE NOTICE 'Colonne loyalty_points ajout√©e';
    ELSE
        RAISE NOTICE 'Colonne loyalty_points existe d√©j√†';
    END IF;
END $$;

-- Ajouter la colonne current_tier_id si elle n'existe pas
DO $$ 
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'clients' 
        AND column_name = 'current_tier_id'
        AND table_schema = 'public'
    ) THEN
        ALTER TABLE clients ADD COLUMN current_tier_id UUID;
        RAISE NOTICE 'Colonne current_tier_id ajout√©e';
    ELSE
        RAISE NOTICE 'Colonne current_tier_id existe d√©j√†';
    END IF;
END $$;

-- Ajouter la colonne created_by si elle n'existe pas
DO $$ 
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'clients' 
        AND column_name = 'created_by'
        AND table_schema = 'public'
    ) THEN
        ALTER TABLE clients ADD COLUMN created_by UUID;
        RAISE NOTICE 'Colonne created_by ajout√©e';
    ELSE
        RAISE NOTICE 'Colonne created_by existe d√©j√†';
    END IF;
END $$;

-- 3. V√âRIFIER ET CR√âER LA TABLE loyalty_tiers
SELECT 'üèÜ V√âRIFICATION DE LA TABLE LOYALTY_TIERS...' as info;

-- V√©rifier si la table existe
DO $$ 
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = 'loyalty_tiers' 
        AND table_schema = 'public'
    ) THEN
        -- Cr√©er la table si elle n'existe pas
        CREATE TABLE loyalty_tiers (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            name TEXT NOT NULL,
            description TEXT,
            points_required INTEGER NOT NULL DEFAULT 0,
            discount_percentage DECIMAL(5,2) DEFAULT 0,
            color TEXT DEFAULT '#000000',
            is_active BOOLEAN DEFAULT true,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        RAISE NOTICE 'Table loyalty_tiers cr√©√©e';
    ELSE
        -- V√©rifier la structure existante et ajouter les colonnes manquantes
        IF NOT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'loyalty_tiers' 
            AND column_name = 'points_required'
            AND table_schema = 'public'
        ) THEN
            ALTER TABLE loyalty_tiers ADD COLUMN points_required INTEGER NOT NULL DEFAULT 0;
            RAISE NOTICE 'Colonne points_required ajout√©e √† loyalty_tiers';
        END IF;
        
        IF NOT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'loyalty_tiers' 
            AND column_name = 'discount_percentage'
            AND table_schema = 'public'
        ) THEN
            ALTER TABLE loyalty_tiers ADD COLUMN discount_percentage DECIMAL(5,2) DEFAULT 0;
            RAISE NOTICE 'Colonne discount_percentage ajout√©e √† loyalty_tiers';
        END IF;
        
        IF NOT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'loyalty_tiers' 
            AND column_name = 'color'
            AND table_schema = 'public'
        ) THEN
            ALTER TABLE loyalty_tiers ADD COLUMN color TEXT DEFAULT '#000000';
            RAISE NOTICE 'Colonne color ajout√©e √† loyalty_tiers';
        END IF;
        
        IF NOT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'loyalty_tiers' 
            AND column_name = 'is_active'
            AND table_schema = 'public'
        ) THEN
            ALTER TABLE loyalty_tiers ADD COLUMN is_active BOOLEAN DEFAULT true;
            RAISE NOTICE 'Colonne is_active ajout√©e √† loyalty_tiers';
        END IF;
        
        RAISE NOTICE 'Table loyalty_tiers existe d√©j√†, colonnes manquantes ajout√©es si n√©cessaire';
    END IF;
END $$;

-- 4. V√âRIFIER ET CR√âER LA TABLE loyalty_points_history
SELECT 'üìä V√âRIFICATION DE LA TABLE LOYALTY_POINTS_HISTORY...' as info;

-- V√©rifier si la table existe
DO $$ 
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_name = 'loyalty_points_history' 
        AND table_schema = 'public'
    ) THEN
        -- Cr√©er la table si elle n'existe pas
        CREATE TABLE loyalty_points_history (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            client_id UUID NOT NULL REFERENCES clients(id) ON DELETE CASCADE,
            points_change INTEGER NOT NULL,
            points_before INTEGER NOT NULL,
            points_after INTEGER NOT NULL,
            description TEXT,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        RAISE NOTICE 'Table loyalty_points_history cr√©√©e';
    ELSE
        -- V√©rifier la structure existante et ajouter les colonnes manquantes
        IF NOT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'loyalty_points_history' 
            AND column_name = 'points_change'
            AND table_schema = 'public'
        ) THEN
            ALTER TABLE loyalty_points_history ADD COLUMN points_change INTEGER NOT NULL DEFAULT 0;
            RAISE NOTICE 'Colonne points_change ajout√©e √† loyalty_points_history';
        END IF;
        
        IF NOT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'loyalty_points_history' 
            AND column_name = 'points_before'
            AND table_schema = 'public'
        ) THEN
            ALTER TABLE loyalty_points_history ADD COLUMN points_before INTEGER NOT NULL DEFAULT 0;
            RAISE NOTICE 'Colonne points_before ajout√©e √† loyalty_points_history';
        END IF;
        
        IF NOT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'loyalty_points_history' 
            AND column_name = 'points_after'
            AND table_schema = 'public'
        ) THEN
            ALTER TABLE loyalty_points_history ADD COLUMN points_after INTEGER NOT NULL DEFAULT 0;
            RAISE NOTICE 'Colonne points_after ajout√©e √† loyalty_points_history';
        END IF;
        
        IF NOT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'loyalty_points_history' 
            AND column_name = 'description'
            AND table_schema = 'public'
        ) THEN
            ALTER TABLE loyalty_points_history ADD COLUMN description TEXT;
            RAISE NOTICE 'Colonne description ajout√©e √† loyalty_points_history';
        END IF;
        
        IF NOT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'loyalty_points_history' 
            AND column_name = 'points_type'
            AND table_schema = 'public'
        ) THEN
            ALTER TABLE loyalty_points_history ADD COLUMN points_type TEXT NOT NULL DEFAULT 'manual';
            RAISE NOTICE 'Colonne points_type ajout√©e √† loyalty_points_history';
        END IF;
        
        IF NOT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'loyalty_points_history' 
            AND column_name = 'created_at'
            AND table_schema = 'public'
        ) THEN
            ALTER TABLE loyalty_points_history ADD COLUMN created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW();
            RAISE NOTICE 'Colonne created_at ajout√©e √† loyalty_points_history';
        END IF;
        
        RAISE NOTICE 'Table loyalty_points_history existe d√©j√†, colonnes manquantes ajout√©es si n√©cessaire';
    END IF;
END $$;

-- 5. INS√âRER LES NIVEAUX DE FID√âLIT√â PAR D√âFAUT
SELECT 'üéØ AJOUT DES NIVEAUX DE FID√âLIT√â PAR D√âFAUT...' as info;

-- Ins√©rer les niveaux de fid√©lit√© avec gestion d'erreur
DO $$ 
BEGIN
    -- V√©rifier si les colonnes existent avant d'ins√©rer
    IF EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'loyalty_tiers' 
        AND column_name = 'points_required'
        AND table_schema = 'public'
    ) THEN
        -- Ins√©rer avec toutes les colonnes
        INSERT INTO loyalty_tiers (name, description, points_required, discount_percentage, color) 
        VALUES 
            ('Bronze', 'Niveau de base', 0, 0, '#CD7F32'),
            ('Argent', 'Client r√©gulier', 100, 5, '#C0C0C0'),
            ('Or', 'Client fid√®le', 500, 10, '#FFD700'),
            ('Platine', 'Client VIP', 1000, 15, '#E5E4E2'),
            ('Diamant', 'Client premium', 2000, 20, '#B9F2FF')
        ON CONFLICT (name) DO NOTHING;
        RAISE NOTICE 'Niveaux de fid√©lit√© ins√©r√©s avec toutes les colonnes';
    ELSE
        -- Ins√©rer avec seulement les colonnes de base
        INSERT INTO loyalty_tiers (name, description) 
        VALUES 
            ('Bronze', 'Niveau de base'),
            ('Argent', 'Client r√©gulier'),
            ('Or', 'Client fid√®le'),
            ('Platine', 'Client VIP'),
            ('Diamant', 'Client premium')
        ON CONFLICT (name) DO NOTHING;
        RAISE NOTICE 'Niveaux de fid√©lit√© ins√©r√©s avec colonnes de base';
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Erreur lors de l''insertion des niveaux: %', SQLERRM;
END $$;

-- 6. METTRE √Ä JOUR LES CLIENTS EXISTANTS AVEC LE NIVEAU BRONZE
SELECT 'üîÑ MISE √Ä JOUR DES CLIENTS EXISTANTS...' as info;

-- Mettre √† jour les clients existants avec gestion d'erreur
DO $$ 
DECLARE
    bronze_tier_id UUID;
BEGIN
    -- R√©cup√©rer l'ID du niveau Bronze
    SELECT id INTO bronze_tier_id FROM loyalty_tiers WHERE name = 'Bronze' LIMIT 1;
    
    -- Mettre √† jour les points de fid√©lit√©
    IF EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'clients' 
        AND column_name = 'loyalty_points'
        AND table_schema = 'public'
    ) THEN
        UPDATE clients 
        SET loyalty_points = COALESCE(loyalty_points, 0)
        WHERE loyalty_points IS NULL;
        RAISE NOTICE 'Points de fid√©lit√© mis √† jour pour les clients existants';
    END IF;
    
    -- Mettre √† jour le niveau de fid√©lit√©
    IF EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'clients' 
        AND column_name = 'current_tier_id'
        AND table_schema = 'public'
    ) AND bronze_tier_id IS NOT NULL THEN
        UPDATE clients 
        SET current_tier_id = COALESCE(current_tier_id, bronze_tier_id)
        WHERE current_tier_id IS NULL;
        RAISE NOTICE 'Niveau de fid√©lit√© mis √† jour pour les clients existants';
    END IF;
    
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Erreur lors de la mise √† jour des clients: %', SQLERRM;
END $$;

-- 7. V√âRIFIER LA STRUCTURE FINALE
SELECT 'üîç V√âRIFICATION DE LA STRUCTURE FINALE:' as info;

SELECT 
    column_name,
    data_type,
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_name = 'clients' 
AND table_schema = 'public'
AND column_name IN ('loyalty_points', 'current_tier_id', 'created_by')
ORDER BY column_name;

-- 8. V√âRIFIER LES TABLES CR√â√âES
SELECT 'üìã TABLES CR√â√âES:' as info;

SELECT 
    table_name,
    (SELECT COUNT(*) FROM information_schema.columns WHERE table_name = t.table_name) as colonnes
FROM information_schema.tables t
WHERE table_schema = 'public' 
AND table_name IN ('loyalty_tiers', 'loyalty_points_history')
ORDER BY table_name;

-- 9. V√âRIFIER LES NIVEAUX DE FID√âLIT√â
SELECT 'üèÜ NIVEAUX DE FID√âLIT√â DISPONIBLES:' as info;

SELECT 
    name,
    description,
    points_required,
    discount_percentage,
    color,
    is_active
FROM loyalty_tiers
ORDER BY points_required;

-- 10. TEST DE LA STRUCTURE
SELECT 'üß™ TEST DE LA STRUCTURE...' as info;

SELECT 
    COUNT(*) as total_clients,
    COUNT(loyalty_points) as clients_avec_points,
    COUNT(current_tier_id) as clients_avec_niveau,
    AVG(COALESCE(loyalty_points, 0)) as moyenne_points
FROM clients;

SELECT '‚úÖ Configuration des points de fid√©lit√© termin√©e !' as result;
