-- =====================================================
-- CORRECTION COLONNE IS_ACTIVE - TABLE PRODUCTS
-- =====================================================
-- Objectif: Ajouter la colonne is_active manquante √† la table products
-- Date: 2025-01-23
-- =====================================================

-- 1. V√âRIFICATION STRUCTURE ACTUELLE
SELECT '=== 1. V√âRIFICATION STRUCTURE ACTUELLE ===' as section;

-- V√©rifier la structure actuelle de la table products
SELECT 
    'Structure actuelle products' as info,
    column_name,
    data_type,
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_schema = 'public' AND table_name = 'products'
ORDER BY ordinal_position;

-- 2. AJOUT DE LA COLONNE IS_ACTIVE
SELECT '=== 2. AJOUT COLONNE IS_ACTIVE ===' as section;

-- Ajouter la colonne is_active si elle n'existe pas
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'products' AND column_name = 'is_active'
    ) THEN
        ALTER TABLE public.products ADD COLUMN is_active BOOLEAN DEFAULT TRUE;
        RAISE NOTICE '‚úÖ Colonne is_active ajout√©e √† products avec valeur par d√©faut TRUE';
    ELSE
        RAISE NOTICE '‚úÖ Colonne is_active existe d√©j√† dans products';
    END IF;
END $$;

-- 3. V√âRIFICATION STRUCTURE APR√àS MODIFICATION
SELECT '=== 3. V√âRIFICATION STRUCTURE APR√àS MODIFICATION ===' as section;

-- V√©rifier la nouvelle structure de la table products
SELECT 
    'Nouvelle structure products' as info,
    column_name,
    data_type,
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_schema = 'public' AND table_name = 'products'
ORDER BY ordinal_position;

-- 4. MISE √Ä JOUR DES DONN√âES EXISTANTES
SELECT '=== 4. MISE √Ä JOUR DONN√âES EXISTANTES ===' as section;

-- Mettre √† jour les enregistrements existants pour avoir is_active = TRUE
UPDATE public.products 
SET is_active = TRUE 
WHERE is_active IS NULL;

-- V√©rifier le nombre d'enregistrements mis √† jour
SELECT 
    'Donn√©es mises √† jour' as info,
    COUNT(*) as nombre_produits,
    COUNT(CASE WHEN is_active = TRUE THEN 1 END) as produits_actifs,
    COUNT(CASE WHEN is_active = FALSE THEN 1 END) as produits_inactifs,
    COUNT(CASE WHEN is_active IS NULL THEN 1 END) as produits_sans_statut
FROM public.products;

-- 5. TEST D'INSERTION
SELECT '=== 5. TEST D''INSERTION ===' as section;

DO $$
DECLARE
    current_user_id UUID;
    test_id UUID;
    test_is_active BOOLEAN;
BEGIN
    current_user_id := auth.uid();
    
    IF current_user_id IS NULL THEN
        RAISE NOTICE '‚ùå Test d''insertion impossible - aucun utilisateur connect√©';
        RETURN;
    END IF;
    
    RAISE NOTICE 'üîç Test d''insertion avec is_active pour utilisateur: %', current_user_id;
    
    -- Test d'insertion dans products avec is_active
    INSERT INTO public.products (name, description, category, price, stock_quantity, is_active)
    VALUES ('Test Produit', 'Description test', 'Test', 99.99, 10, TRUE)
    RETURNING id, is_active INTO test_id, test_is_active;
    
    RAISE NOTICE '‚úÖ Produit cr√©√© avec ID: % et is_active: %', test_id, test_is_active;
    
    -- V√©rifier que le produit appartient √† l'utilisateur actuel
    SELECT user_id INTO current_user_id
    FROM public.products 
    WHERE id = test_id;
    
    RAISE NOTICE '‚úÖ Produit cr√©√© par: %', current_user_id;
    
    -- Nettoyer
    DELETE FROM public.products WHERE id = test_id;
    RAISE NOTICE 'üßπ Test nettoy√©';
    
EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Erreur lors du test d''insertion: %', SQLERRM;
END $$;

-- 6. V√âRIFICATION CACHE POSTGREST
SELECT '=== 6. V√âRIFICATION CACHE ===' as section;

-- Rafra√Æchir le cache PostgREST
NOTIFY pgrst, 'reload schema';
SELECT pg_sleep(2);

-- 7. V√âRIFICATION FINALE
SELECT '=== 7. V√âRIFICATION FINALE ===' as section;

-- V√©rifier que la colonne is_active est bien pr√©sente
SELECT 
    'V√©rification finale' as info,
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'products' AND column_name = 'is_active'
        ) THEN '‚úÖ Colonne is_active pr√©sente'
        ELSE '‚ùå Colonne is_active manquante'
    END as status_colonne;

-- V√©rifier les donn√©es
SELECT 
    'Donn√©es finales' as info,
    COUNT(*) as nombre_produits,
    COUNT(CASE WHEN is_active = TRUE THEN 1 END) as produits_actifs,
    COUNT(CASE WHEN is_active = FALSE THEN 1 END) as produits_inactifs
FROM public.products;

SELECT 'CORRECTION COLONNE IS_ACTIVE TERMIN√âE' as status;
