-- V√âRIFICATION DE L'INSTALLATION DES NOUVELLES CAT√âGORIES
-- Script √† ex√©cuter apr√®s ajout_categories_produits.sql

-- ============================================================================
-- 1. V√âRIFICATION DES TABLES
-- ============================================================================

-- V√©rifier que toutes les tables existent
SELECT 
    'V√âRIFICATION DES TABLES' as section,
    table_name,
    CASE 
        WHEN table_name IS NOT NULL THEN '‚úÖ EXISTE'
        ELSE '‚ùå MANQUANTE'
    END as status
FROM (
    SELECT 'product_categories' as table_name
    UNION SELECT 'sale_items'
    UNION SELECT 'products'
    UNION SELECT 'sales'
) t
WHERE EXISTS (
    SELECT 1 FROM information_schema.tables 
    WHERE table_schema = 'public' 
    AND table_name = t.table_name
);

-- ============================================================================
-- 2. V√âRIFICATION DES CAT√âGORIES
-- ============================================================================

-- V√©rifier que toutes les cat√©gories ont √©t√© cr√©√©es
SELECT 
    'CAT√âGORIES CR√â√âES' as section,
    name,
    description,
    sort_order,
    CASE 
        WHEN name IS NOT NULL THEN '‚úÖ AJOUT√âE'
        ELSE '‚ùå MANQUANTE'
    END as status
FROM public.product_categories
ORDER BY sort_order;

-- ============================================================================
-- 3. V√âRIFICATION DES CONTRAINTES
-- ============================================================================

-- V√©rifier la contrainte sur la table products
SELECT 
    'CONTRAINTE PRODUCTS' as section,
    constraint_name,
    constraint_type,
    CASE 
        WHEN constraint_name IS NOT NULL THEN '‚úÖ ACTIVE'
        ELSE '‚ùå MANQUANTE'
    END as status
FROM information_schema.table_constraints 
WHERE table_name = 'products' 
    AND table_schema = 'public'
    AND constraint_name = 'products_category_check';

-- ============================================================================
-- 4. V√âRIFICATION DES TRIGGERS
-- ============================================================================

-- V√©rifier que le trigger a √©t√© cr√©√©
SELECT 
    'TRIGGER SALE_ITEMS' as section,
    trigger_name,
    event_manipulation,
    CASE 
        WHEN trigger_name IS NOT NULL THEN '‚úÖ ACTIF'
        ELSE '‚ùå MANQUANT'
    END as status
FROM information_schema.triggers 
WHERE event_object_table = 'sale_items'
    AND trigger_schema = 'public'
    AND trigger_name = 'trigger_update_sale_item_category';

-- ============================================================================
-- 5. V√âRIFICATION DES VUES
-- ============================================================================

-- V√©rifier que la vue a √©t√© cr√©√©e
SELECT 
    'VUE STATISTIQUES' as section,
    table_name as vue_name,
    CASE 
        WHEN table_name IS NOT NULL THEN '‚úÖ CR√â√âE'
        ELSE '‚ùå MANQUANTE'
    END as status
FROM information_schema.views 
WHERE table_schema = 'public'
    AND table_name = 'sales_by_category';

-- ============================================================================
-- 6. V√âRIFICATION DES INDEX
-- ============================================================================

-- V√©rifier que les index ont √©t√© cr√©√©s
SELECT 
    'INDEX CR√â√âS' as section,
    indexname,
    CASE 
        WHEN indexname IS NOT NULL THEN '‚úÖ ACTIF'
        ELSE '‚ùå MANQUANT'
    END as status
FROM pg_indexes 
WHERE tablename IN ('products', 'sale_items', 'sales')
    AND schemaname = 'public'
    AND indexname LIKE '%category%';

-- ============================================================================
-- 7. V√âRIFICATION DES POLITIQUES RLS
-- ============================================================================

-- V√©rifier les politiques RLS sur sale_items
SELECT 
    'POLITIQUES RLS' as section,
    policyname,
    cmd,
    CASE 
        WHEN policyname IS NOT NULL THEN '‚úÖ ACTIVE'
        ELSE '‚ùå MANQUANTE'
    END as status
FROM pg_policies 
WHERE tablename = 'sale_items'
    AND schemaname = 'public';

-- ============================================================================
-- 8. TEST DE VALIDATION DES CAT√âGORIES
-- ============================================================================

-- Tester l'insertion d'un produit avec une nouvelle cat√©gorie
DO $$
DECLARE
    test_product_id UUID;
BEGIN
    -- Ins√©rer un produit de test
    INSERT INTO public.products (name, description, category, price, stock_quantity, is_active)
    VALUES ('Test Smartphone', 'Produit de test pour validation', 'smartphone', 299.99, 5, true)
    RETURNING id INTO test_product_id;
    
    -- V√©rifier que l'insertion a r√©ussi
    IF test_product_id IS NOT NULL THEN
        RAISE NOTICE '‚úÖ TEST R√âUSSI: Produit avec cat√©gorie smartphone cr√©√© (ID: %)', test_product_id;
        
        -- Nettoyer le produit de test
        DELETE FROM public.products WHERE id = test_product_id;
        RAISE NOTICE '‚úÖ NETTOYAGE: Produit de test supprim√©';
    ELSE
        RAISE NOTICE '‚ùå TEST √âCHOU√â: Impossible de cr√©er un produit avec la cat√©gorie smartphone';
    END IF;
    
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE '‚ùå ERREUR LORS DU TEST: %', SQLERRM;
END $$;

-- ============================================================================
-- 9. R√âSUM√â FINAL
-- ============================================================================

SELECT 
    'üéâ R√âSUM√â FINAL' as section,
    'Installation des nouvelles cat√©gories termin√©e' as message,
    'V√©rifiez les r√©sultats ci-dessus pour confirmer le succ√®s' as instruction;
