-- DIAGNOSTIC : V√âRIFIER L'EXISTENCE DES TABLES DE FID√âLIT√â
-- Ex√©cutez ce script dans Supabase SQL Editor pour voir l'√©tat actuel

-- 1. V√âRIFIER LES TABLES DE FID√âLIT√â
SELECT 'üîç V√âRIFICATION DES TABLES DE FID√âLIT√â' as diagnostic;

SELECT 
    table_name,
    CASE 
        WHEN table_name IN ('loyalty_config', 'loyalty_tiers_advanced', 'loyalty_points_history') 
        THEN '‚úÖ Table de fid√©lit√©'
        ELSE 'üìã Table syst√®me'
    END as type_table,
    'Existe' as status
FROM information_schema.tables 
WHERE table_name IN (
    'loyalty_config',
    'loyalty_tiers_advanced', 
    'loyalty_points_history',
    'clients',
    'sales',
    'repairs'
)
AND table_schema = 'public'
ORDER BY table_name;

-- 2. V√âRIFIER LES FONCTIONS DE FID√âLIT√â
SELECT 'üîß V√âRIFICATION DES FONCTIONS DE FID√âLIT√â' as diagnostic;

SELECT 
    routine_name,
    'Fonction de fid√©lit√©' as type,
    CASE 
        WHEN routine_name IN (
            'calculate_loyalty_points',
            'auto_add_loyalty_points_from_purchase',
            'auto_add_loyalty_points_from_sale',
            'auto_add_loyalty_points_from_repair',
            'get_loyalty_statistics'
        ) THEN '‚úÖ Fonction de fid√©lit√©'
        ELSE 'üìã Autre fonction'
    END as status
FROM information_schema.routines 
WHERE routine_name IN (
    'calculate_loyalty_points',
    'auto_add_loyalty_points_from_purchase',
    'auto_add_loyalty_points_from_sale',
    'auto_add_loyalty_points_from_repair',
    'get_loyalty_statistics'
)
AND routine_schema = 'public'
ORDER BY routine_name;

-- 3. V√âRIFIER LES VUES DE FID√âLIT√â
SELECT 'üìä V√âRIFICATION DES VUES DE FID√âLIT√â' as diagnostic;

SELECT 
    table_name,
    'Vue de fid√©lit√©' as type,
    'Existe' as status
FROM information_schema.views 
WHERE table_name IN ('loyalty_dashboard')
AND table_schema = 'public'
ORDER BY table_name;

-- 4. V√âRIFIER LES DONN√âES DANS LES TABLES (si elles existent)
SELECT 'üìã V√âRIFICATION DES DONN√âES' as diagnostic;

-- V√©rifier loyalty_config
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'loyalty_config' AND table_schema = 'public') THEN
        RAISE NOTICE '‚úÖ Table loyalty_config existe - % lignes', (SELECT COUNT(*) FROM loyalty_config);
    ELSE
        RAISE NOTICE '‚ùå Table loyalty_config n''existe pas';
    END IF;
END $$;

-- V√©rifier loyalty_tiers_advanced
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'loyalty_tiers_advanced' AND table_schema = 'public') THEN
        RAISE NOTICE '‚úÖ Table loyalty_tiers_advanced existe - % lignes', (SELECT COUNT(*) FROM loyalty_tiers_advanced);
    ELSE
        RAISE NOTICE '‚ùå Table loyalty_tiers_advanced n''existe pas';
    END IF;
END $$;

-- 5. R√âSUM√â DES ACTIONS N√âCESSAIRES
SELECT 'üìã ACTIONS N√âCESSAIRES' as diagnostic;

SELECT 
    CASE 
        WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'loyalty_config' AND table_schema = 'public')
        AND EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'loyalty_tiers_advanced' AND table_schema = 'public')
        THEN '‚úÖ Syst√®me de fid√©lit√© d√©j√† install√© - V√©rifiez les permissions RLS'
        ELSE '‚ùå Syst√®me de fid√©lit√© manquant - Ex√©cutez le script systeme_fidelite_automatique.sql'
    END as action_requise;

-- 6. V√âRIFIER LES PERMISSIONS RLS
SELECT 'üîí V√âRIFICATION DES PERMISSIONS RLS' as diagnostic;

SELECT 
    schemaname,
    tablename,
    rowsecurity as rls_active
FROM pg_tables 
WHERE tablename IN ('loyalty_config', 'loyalty_tiers_advanced', 'loyalty_points_history')
AND schemaname = 'public';





