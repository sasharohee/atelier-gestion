-- TEST DE CR√âATION DE CLIENTS
-- Ce script teste la cr√©ation de clients pour v√©rifier que tout fonctionne

-- ============================================================================
-- 1. V√âRIFICATION DE L'UTILISATEUR CONNECT√â
-- ============================================================================

DO $$
DECLARE
    current_user_id UUID;
    current_user_email TEXT;
BEGIN
    -- R√©cup√©rer l'utilisateur connect√©
    SELECT auth.uid() INTO current_user_id;
    SELECT email INTO current_user_email FROM auth.users WHERE id = current_user_id;
    
    IF current_user_id IS NULL THEN
        RAISE NOTICE '‚ùå Aucun utilisateur connect√© - Test impossible';
        RETURN;
    END IF;
    
    RAISE NOTICE 'üë§ Test avec l''utilisateur: %', current_user_email;
END $$;

-- ============================================================================
-- 2. V√âRIFICATION DE LA STRUCTURE DE LA TABLE CLIENTS
-- ============================================================================

SELECT 
    'STRUCTURE CLIENTS' as verification,
    column_name,
    data_type,
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_schema = 'public' 
    AND table_name = 'clients'
ORDER BY ordinal_position;

-- ============================================================================
-- 3. V√âRIFICATION DES POLITIQUES RLS
-- ============================================================================

SELECT 
    'POLITIQUES RLS CLIENTS' as verification,
    policyname,
    cmd,
    qual
FROM pg_policies 
WHERE tablename = 'clients'
ORDER BY policyname;

-- ============================================================================
-- 4. TEST D'INSERTION DE CLIENTS
-- ============================================================================

DO $$
DECLARE
    current_user_id UUID;
    test_client_id UUID;
    test_result BOOLEAN := TRUE;
BEGIN
    -- R√©cup√©rer l'utilisateur connect√©
    SELECT auth.uid() INTO current_user_id;
    
    IF current_user_id IS NULL THEN
        RAISE NOTICE '‚ùå Test impossible - aucun utilisateur connect√©';
        RETURN;
    END IF;
    
    RAISE NOTICE 'üß™ Test d''insertion de clients...';
    
    -- Test 1: Client avec tous les champs
    BEGIN
        INSERT INTO public.clients (
            first_name, last_name, email, phone, address, notes, user_id
        ) VALUES (
            'Test', 'Client', 'test@example.com', '0123456789', '123 Test Street', 'Client de test', current_user_id
        ) RETURNING id INTO test_client_id;
        
        RAISE NOTICE '‚úÖ Test 1 r√©ussi: Client cr√©√© avec ID %', test_client_id;
        
        -- V√©rifier que le client est bien visible
        IF EXISTS (SELECT 1 FROM public.clients WHERE id = test_client_id AND user_id = current_user_id) THEN
            RAISE NOTICE '‚úÖ Client visible pour l''utilisateur connect√©';
        ELSE
            RAISE NOTICE '‚ùå Client non visible pour l''utilisateur connect√©';
            test_result := FALSE;
        END IF;
        
        -- Nettoyer
        DELETE FROM public.clients WHERE id = test_client_id;
        
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ùå Test 1 √©chou√©: %', SQLERRM;
        test_result := FALSE;
    END;
    
    -- Test 2: Client avec champs minimaux
    BEGIN
        INSERT INTO public.clients (
            first_name, last_name, email, user_id
        ) VALUES (
            'Minimal', 'Client', 'minimal@example.com', current_user_id
        ) RETURNING id INTO test_client_id;
        
        RAISE NOTICE '‚úÖ Test 2 r√©ussi: Client minimal cr√©√© avec ID %', test_client_id;
        
        -- Nettoyer
        DELETE FROM public.clients WHERE id = test_client_id;
        
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ùå Test 2 √©chou√©: %', SQLERRM;
        test_result := FALSE;
    END;
    
    -- Test 3: Client avec email dupliqu√© (doit √©chouer si contrainte unique)
    BEGIN
        INSERT INTO public.clients (
            first_name, last_name, email, user_id
        ) VALUES (
            'Duplicate', 'Client', 'duplicate@example.com', current_user_id
        );
        
        INSERT INTO public.clients (
            first_name, last_name, email, user_id
        ) VALUES (
            'Duplicate2', 'Client', 'duplicate@example.com', current_user_id
        );
        
        RAISE NOTICE '‚ö†Ô∏è Test 3: Email dupliqu√© autoris√© (pas de contrainte unique)';
        
        -- Nettoyer
        DELETE FROM public.clients WHERE email = 'duplicate@example.com';
        
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚úÖ Test 3: Contrainte unique sur email active - %', SQLERRM;
    END;
    
    IF test_result THEN
        RAISE NOTICE 'üéâ Tous les tests d''insertion r√©ussis';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è Certains tests ont √©chou√©';
    END IF;
END $$;

-- ============================================================================
-- 5. V√âRIFICATION DE L'ISOLATION
-- ============================================================================

DO $$
DECLARE
    current_user_id UUID;
    other_user_id UUID;
    isolation_check BOOLEAN := TRUE;
BEGIN
    -- R√©cup√©rer l'utilisateur connect√©
    SELECT auth.uid() INTO current_user_id;
    
    IF current_user_id IS NULL THEN
        RAISE NOTICE '‚ùå Test d''isolation impossible - aucun utilisateur connect√©';
        RETURN;
    END IF;
    
    -- Cr√©er un client de test
    INSERT INTO public.clients (
        first_name, last_name, email, user_id
    ) VALUES (
        'Isolation', 'Test', 'isolation@test.com', current_user_id
    );
    
    -- V√©rifier que l'utilisateur connect√© peut voir son client
    IF EXISTS (SELECT 1 FROM public.clients WHERE email = 'isolation@test.com' AND user_id = current_user_id) THEN
        RAISE NOTICE '‚úÖ Utilisateur peut voir son propre client';
    ELSE
        RAISE NOTICE '‚ùå Utilisateur ne peut pas voir son propre client';
        isolation_check := FALSE;
    END IF;
    
    -- V√©rifier qu'il n'y a pas de clients d'autres utilisateurs visibles
    SELECT COUNT(*) INTO other_user_id FROM public.clients WHERE user_id != current_user_id;
    IF other_user_id > 0 THEN
        RAISE NOTICE '‚ö†Ô∏è % clients d''autres utilisateurs visibles', other_user_id;
    ELSE
        RAISE NOTICE '‚úÖ Aucun client d''autre utilisateur visible';
    END IF;
    
    -- Nettoyer
    DELETE FROM public.clients WHERE email = 'isolation@test.com';
    
    IF isolation_check THEN
        RAISE NOTICE 'üéâ Test d''isolation r√©ussi';
    ELSE
        RAISE NOTICE '‚ùå Test d''isolation √©chou√©';
    END IF;
END $$;

-- ============================================================================
-- 6. R√âSULTAT FINAL
-- ============================================================================

SELECT 
    'üéâ TEST TERMIN√â' as status,
    'Les tests de cr√©ation de clients sont termin√©s.' as message,
    'V√©rifiez les logs ci-dessus pour les r√©sultats d√©taill√©s.' as details;
