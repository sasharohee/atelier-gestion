-- =====================================================
-- CR√âATION AUTOMATIQUE DES CAT√âGORIES PAR D√âFAUT
-- =====================================================
-- Date: 2025-01-23
-- Objectif: Cr√©er automatiquement les 4 cat√©gories par d√©faut pour chaque utilisateur
-- =====================================================

-- 1. FONCTION POUR CR√âER LES CAT√âGORIES PAR D√âFAUT
CREATE OR REPLACE FUNCTION create_default_categories_for_user(p_user_id UUID)
RETURNS VOID AS $$
DECLARE
    category_exists BOOLEAN;
BEGIN
    -- V√©rifier et cr√©er la cat√©gorie "Smartphones"
    SELECT EXISTS(
        SELECT 1 FROM product_categories 
        WHERE user_id = p_user_id AND name = 'Smartphones'
    ) INTO category_exists;
    
    IF NOT category_exists THEN
        INSERT INTO product_categories (
            id, user_id, name, description, icon, is_active, created_at, updated_at
        ) VALUES (
            gen_random_uuid(), p_user_id, 'Smartphones', 
            'T√©l√©phones mobiles et smartphones', 'smartphone', true, NOW(), NOW()
        );
        RAISE NOTICE '‚úÖ Cat√©gorie "Smartphones" cr√©√©e pour l''utilisateur %', p_user_id;
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Cat√©gorie "Smartphones" existe d√©j√† pour l''utilisateur %', p_user_id;
    END IF;

    -- V√©rifier et cr√©er la cat√©gorie "Tablettes"
    SELECT EXISTS(
        SELECT 1 FROM product_categories 
        WHERE user_id = p_user_id AND name = 'Tablettes'
    ) INTO category_exists;
    
    IF NOT category_exists THEN
        INSERT INTO product_categories (
            id, user_id, name, description, icon, is_active, created_at, updated_at
        ) VALUES (
            gen_random_uuid(), p_user_id, 'Tablettes', 
            'Tablettes tactiles', 'tablet', true, NOW(), NOW()
        );
        RAISE NOTICE '‚úÖ Cat√©gorie "Tablettes" cr√©√©e pour l''utilisateur %', p_user_id;
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Cat√©gorie "Tablettes" existe d√©j√† pour l''utilisateur %', p_user_id;
    END IF;

    -- V√©rifier et cr√©er la cat√©gorie "Ordinateurs portables"
    SELECT EXISTS(
        SELECT 1 FROM product_categories 
        WHERE user_id = p_user_id AND name = 'Ordinateurs portables'
    ) INTO category_exists;
    
    IF NOT category_exists THEN
        INSERT INTO product_categories (
            id, user_id, name, description, icon, is_active, created_at, updated_at
        ) VALUES (
            gen_random_uuid(), p_user_id, 'Ordinateurs portables', 
            'Laptops et notebooks', 'laptop', true, NOW(), NOW()
        );
        RAISE NOTICE '‚úÖ Cat√©gorie "Ordinateurs portables" cr√©√©e pour l''utilisateur %', p_user_id;
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Cat√©gorie "Ordinateurs portables" existe d√©j√† pour l''utilisateur %', p_user_id;
    END IF;

    -- V√©rifier et cr√©er la cat√©gorie "Ordinateurs fixes"
    SELECT EXISTS(
        SELECT 1 FROM product_categories 
        WHERE user_id = p_user_id AND name = 'Ordinateurs fixes'
    ) INTO category_exists;
    
    IF NOT category_exists THEN
        INSERT INTO product_categories (
            id, user_id, name, description, icon, is_active, created_at, updated_at
        ) VALUES (
            gen_random_uuid(), p_user_id, 'Ordinateurs fixes', 
            'PC de bureau et stations de travail', 'desktop', true, NOW(), NOW()
        );
        RAISE NOTICE '‚úÖ Cat√©gorie "Ordinateurs fixes" cr√©√©e pour l''utilisateur %', p_user_id;
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è Cat√©gorie "Ordinateurs fixes" existe d√©j√† pour l''utilisateur %', p_user_id;
    END IF;

    RAISE NOTICE 'üéâ Cr√©ation des cat√©gories par d√©faut termin√©e pour l''utilisateur %', p_user_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 2. TRIGGER POUR CR√âER AUTOMATIQUEMENT LES CAT√âGORIES
CREATE OR REPLACE FUNCTION trigger_create_default_categories()
RETURNS TRIGGER AS $$
BEGIN
    -- Cr√©er les cat√©gories par d√©faut pour le nouvel utilisateur
    PERFORM create_default_categories_for_user(NEW.id);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 3. CR√âER LE TRIGGER SUR LA TABLE users
DROP TRIGGER IF EXISTS create_default_categories_trigger ON auth.users;
CREATE TRIGGER create_default_categories_trigger
    AFTER INSERT ON auth.users
    FOR EACH ROW
    EXECUTE FUNCTION trigger_create_default_categories();

-- 4. NETTOYER LES DONN√âES ORPHELINES AVANT CR√âATION
DO $$
DECLARE
    orphaned_count INTEGER;
BEGIN
    RAISE NOTICE 'üßπ Nettoyage des donn√©es orphelines...';
    
    -- Supprimer les cat√©gories avec user_id invalide ou NULL
    DELETE FROM product_categories 
    WHERE user_id IS NULL 
       OR user_id = '00000000-0000-0000-0000-000000000000'::UUID
       OR user_id NOT IN (SELECT id FROM auth.users);
    
    GET DIAGNOSTICS orphaned_count = ROW_COUNT;
    RAISE NOTICE 'üóëÔ∏è % cat√©gories orphelines supprim√©es', orphaned_count;
END $$;

-- 5. CR√âER LES CAT√âGORIES POUR LES UTILISATEURS EXISTANTS
DO $$
DECLARE
    user_record RECORD;
    success_count INTEGER := 0;
    error_count INTEGER := 0;
BEGIN
    RAISE NOTICE 'üîÑ Cr√©ation des cat√©gories par d√©faut pour les utilisateurs existants...';
    
    FOR user_record IN SELECT id FROM auth.users LOOP
        BEGIN
            PERFORM create_default_categories_for_user(user_record.id);
            success_count := success_count + 1;
        EXCEPTION
            WHEN OTHERS THEN
                error_count := error_count + 1;
                RAISE NOTICE '‚ö†Ô∏è Erreur pour l''utilisateur %: %', user_record.id, SQLERRM;
        END;
    END LOOP;
    
    RAISE NOTICE '‚úÖ % utilisateurs trait√©s avec succ√®s, % erreurs', success_count, error_count;
END $$;

-- 6. V√âRIFICATION
SELECT '=== V√âRIFICATION DES CAT√âGORIES PAR D√âFAUT ===' as section;

SELECT 
    u.email,
    COUNT(pc.id) as nombre_categories,
    STRING_AGG(pc.name, ', ' ORDER BY pc.name) as categories_presentes
FROM auth.users u
LEFT JOIN product_categories pc ON u.id = pc.user_id
GROUP BY u.id, u.email
ORDER BY u.email;

-- 7. DONNER LES PERMISSIONS
GRANT EXECUTE ON FUNCTION create_default_categories_for_user(UUID) TO authenticated;
GRANT EXECUTE ON FUNCTION create_default_categories_for_user(UUID) TO anon;

-- 8. MESSAGE DE CONFIRMATION
SELECT '=== CONFIRMATION ===' as section,
       'Les cat√©gories par d√©faut sont maintenant cr√©√©es automatiquement pour chaque utilisateur.' as message;
