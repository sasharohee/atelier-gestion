-- =====================================================
-- DIAGNOSTIC ISOLATION POINTS DE FID√âLIT√â
-- =====================================================
-- Script pour diagnostiquer les probl√®mes d'isolation
-- dans les tables li√©es aux points de fid√©lit√©
-- Date: 2025-01-23
-- =====================================================

-- 1. V√©rifier l'√©tat RLS des tables de fid√©lit√©
SELECT '=== √âTAT RLS TABLES FID√âLIT√â ===' as etape;

SELECT 
    tablename,
    CASE 
        WHEN rowsecurity THEN '‚úÖ RLS Activ√©'
        ELSE '‚ùå RLS D√©sactiv√©'
    END as rls_status,
    CASE 
        WHEN rowsecurity THEN 'S√©curis√©'
        ELSE 'üö® VULN√âRABLE - Donn√©es visibles par tous'
    END as securite
FROM pg_tables 
WHERE schemaname = 'public'
AND tablename IN ('loyalty_points_history', 'loyalty_tiers_advanced', 'referrals', 'client_loyalty_points')
ORDER BY tablename;

-- 2. Lister toutes les politiques existantes sur les tables de fid√©lit√©
SELECT '=== POLITIQUES EXISTANTES FID√âLIT√â ===' as etape;

SELECT 
    tablename,
    policyname as nom_politique,
    cmd as commande,
    qual as condition,
    with_check as verification,
    CASE 
        WHEN qual LIKE '%workshop_id = auth.uid()%' AND qual LIKE '%auth.uid() IS NOT NULL%' THEN '‚úÖ Ultra-strict'
        WHEN qual LIKE '%workshop_id = auth.uid()%' THEN '‚ö†Ô∏è Standard'
        WHEN qual LIKE '%auth.uid()%' THEN '‚ö†Ô∏è Utilise auth.uid() mais pas workshop_id'
        WHEN qual IS NULL THEN '‚ùå Aucune condition'
        ELSE '‚ùå Autre condition'
    END as type_isolation
FROM pg_policies 
WHERE tablename IN ('loyalty_points_history', 'loyalty_tiers_advanced', 'referrals', 'client_loyalty_points')
ORDER BY tablename, policyname;

-- 3. V√©rifier la structure des tables de fid√©lit√©
SELECT '=== STRUCTURE TABLES FID√âLIT√â ===' as etape;

SELECT 
    table_name as table_cible,
    column_name as colonne,
    data_type as type,
    is_nullable as nullable,
    column_default as valeur_par_defaut
FROM information_schema.columns 
WHERE table_schema = 'public'
AND table_name IN ('loyalty_points_history', 'loyalty_tiers_advanced', 'referrals', 'client_loyalty_points')
ORDER BY table_name, ordinal_position;

-- 4. V√©rifier les triggers sur les tables de fid√©lit√©
SELECT '=== TRIGGERS FID√âLIT√â ===' as etape;

SELECT 
    trigger_name as nom_trigger,
    event_object_table as table_cible,
    event_manipulation as evenement,
    action_timing as moment,
    action_statement as action
FROM information_schema.triggers 
WHERE event_object_schema = 'public'
AND event_object_table IN ('loyalty_points_history', 'loyalty_tiers_advanced', 'referrals', 'client_loyalty_points')
ORDER BY event_object_table, trigger_name;

-- 5. Test d'isolation actuel pour les points de fid√©lit√©
SELECT '=== TEST ISOLATION POINTS FID√âLIT√â ===' as etape;

DO $$
DECLARE
    v_user_id UUID;
    v_count_without_filter INTEGER;
    v_count_with_filter INTEGER;
    v_other_users_count INTEGER;
    v_table_name TEXT;
    v_count INTEGER;
BEGIN
    -- Obtenir l'utilisateur actuel
    v_user_id := auth.uid();
    
    IF v_user_id IS NULL THEN
        RAISE NOTICE '‚ùå Aucun utilisateur connect√© - test impossible';
        RETURN;
    END IF;
    
    RAISE NOTICE '‚úÖ Test d''isolation pour l''utilisateur: %', v_user_id;
    
    -- Tester chaque table de fid√©lit√©
    FOR v_table_name IN 
        SELECT unnest(ARRAY['loyalty_points_history', 'loyalty_tiers_advanced', 'referrals', 'client_loyalty_points'])
    LOOP
        RAISE NOTICE '';
        RAISE NOTICE 'üîç Test de la table: %', v_table_name;
        
        -- Test 1: Compter tous les enregistrements (devrait √™tre limit√© par RLS)
        EXECUTE format('SELECT COUNT(*) FROM %I', v_table_name) INTO v_count_without_filter;
        RAISE NOTICE '  üìä Enregistrements visibles sans filtrage: %', v_count_without_filter;
        
        -- Test 2: Compter les enregistrements avec filtrage
        EXECUTE format('SELECT COUNT(*) FROM %I WHERE workshop_id = $1', v_table_name) USING v_user_id INTO v_count_with_filter;
        RAISE NOTICE '  üìä Mes enregistrements (avec filtrage): %', v_count_with_filter;
        
        -- Test 3: Compter les enregistrements d'autres utilisateurs
        EXECUTE format('SELECT COUNT(*) FROM %I WHERE workshop_id != $1', v_table_name) USING v_user_id INTO v_other_users_count;
        RAISE NOTICE '  üìä Enregistrements d''autres utilisateurs: %', v_other_users_count;
        
        -- Analyse
        IF v_other_users_count > 0 THEN
            RAISE NOTICE '  ‚ùå PROBL√àME: Vous pouvez voir des enregistrements d''autres utilisateurs';
        ELSE
            RAISE NOTICE '  ‚úÖ Isolation correcte: seuls vos enregistrements sont visibles';
        END IF;
        
        IF v_count_without_filter = v_count_with_filter THEN
            RAISE NOTICE '  ‚úÖ RLS fonctionne: m√™me nombre avec et sans filtrage';
        ELSE
            RAISE NOTICE '  ‚ö†Ô∏è RLS ne filtre pas: diff√©rence entre avec et sans filtrage';
        END IF;
    END LOOP;
    
EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Erreur lors du test: %', SQLERRM;
END $$;

-- 6. V√©rifier les donn√©es par utilisateur dans les tables de fid√©lit√©
SELECT '=== DONN√âES PAR UTILISATEUR FID√âLIT√â ===' as etape;

-- loyalty_points_history
SELECT 
    'loyalty_points_history' as table_name,
    workshop_id,
    COUNT(*) as nombre_enregistrements,
    CASE 
        WHEN workshop_id = auth.uid() THEN '‚úÖ Mes enregistrements'
        WHEN workshop_id IS NULL THEN '‚ö†Ô∏è Sans workshop_id'
        ELSE '‚ùå Enregistrements d''autres utilisateurs'
    END as propriete
FROM loyalty_points_history 
GROUP BY workshop_id
ORDER BY nombre_enregistrements DESC;

-- loyalty_tiers_advanced
SELECT 
    'loyalty_tiers_advanced' as table_name,
    workshop_id,
    COUNT(*) as nombre_enregistrements,
    CASE 
        WHEN workshop_id = auth.uid() THEN '‚úÖ Mes enregistrements'
        WHEN workshop_id IS NULL THEN '‚ö†Ô∏è Sans workshop_id'
        ELSE '‚ùå Enregistrements d''autres utilisateurs'
    END as propriete
FROM loyalty_tiers_advanced 
GROUP BY workshop_id
ORDER BY nombre_enregistrements DESC;

-- referrals
SELECT 
    'referrals' as table_name,
    workshop_id,
    COUNT(*) as nombre_enregistrements,
    CASE 
        WHEN workshop_id = auth.uid() THEN '‚úÖ Mes enregistrements'
        WHEN workshop_id IS NULL THEN '‚ö†Ô∏è Sans workshop_id'
        ELSE '‚ùå Enregistrements d''autres utilisateurs'
    END as propriete
FROM referrals 
GROUP BY workshop_id
ORDER BY nombre_enregistrements DESC;

-- client_loyalty_points
SELECT 
    'client_loyalty_points' as table_name,
    workshop_id,
    COUNT(*) as nombre_enregistrements,
    CASE 
        WHEN workshop_id = auth.uid() THEN '‚úÖ Mes enregistrements'
        WHEN workshop_id IS NULL THEN '‚ö†Ô∏è Sans workshop_id'
        ELSE '‚ùå Enregistrements d''autres utilisateurs'
    END as propriete
FROM client_loyalty_points 
GROUP BY workshop_id
ORDER BY nombre_enregistrements DESC;

-- 7. V√©rifier les donn√©es orphelines
SELECT '=== V√âRIFICATION DONN√âES ORPHELINES ===' as etape;

-- Chercher des enregistrements sans workshop_id
SELECT 
    'loyalty_points_history sans workshop_id' as type_probleme,
    COUNT(*) as nombre
FROM loyalty_points_history 
WHERE workshop_id IS NULL

UNION ALL

SELECT 
    'loyalty_tiers_advanced sans workshop_id' as type_probleme,
    COUNT(*) as nombre
FROM loyalty_tiers_advanced 
WHERE workshop_id IS NULL

UNION ALL

SELECT 
    'referrals sans workshop_id' as type_probleme,
    COUNT(*) as nombre
FROM referrals 
WHERE workshop_id IS NULL

UNION ALL

SELECT 
    'client_loyalty_points sans workshop_id' as type_probleme,
    COUNT(*) as nombre
FROM client_loyalty_points 
WHERE workshop_id IS NULL;

-- 8. Recommandations sp√©cifiques
SELECT '=== RECOMMANDATIONS SP√âCIFIQUES ===' as etape;

DO $$
DECLARE
    v_rls_enabled_count INTEGER;
    v_policy_count INTEGER;
    v_workshop_id_column_count INTEGER;
    v_orphan_data_count INTEGER;
    v_total_records INTEGER;
    v_user_records INTEGER;
    v_other_records INTEGER;
    v_table_name TEXT;
BEGIN
    -- Compter les tables avec RLS activ√©
    SELECT COUNT(*) INTO v_rls_enabled_count
    FROM pg_tables 
    WHERE schemaname = 'public'
    AND tablename IN ('loyalty_points_history', 'loyalty_tiers_advanced', 'referrals', 'client_loyalty_points')
    AND rowsecurity = true;
    
    -- Compter les politiques
    SELECT COUNT(*) INTO v_policy_count
    FROM pg_policies 
    WHERE tablename IN ('loyalty_points_history', 'loyalty_tiers_advanced', 'referrals', 'client_loyalty_points');
    
    -- Compter les colonnes workshop_id
    SELECT COUNT(*) INTO v_workshop_id_column_count
    FROM information_schema.columns 
    WHERE table_schema = 'public'
    AND table_name IN ('loyalty_points_history', 'loyalty_tiers_advanced', 'referrals', 'client_loyalty_points')
    AND column_name = 'workshop_id';
    
    -- Compter les donn√©es orphelines
    SELECT 
        (SELECT COUNT(*) FROM loyalty_points_history WHERE workshop_id IS NULL) +
        (SELECT COUNT(*) FROM loyalty_tiers_advanced WHERE workshop_id IS NULL) +
        (SELECT COUNT(*) FROM referrals WHERE workshop_id IS NULL) +
        (SELECT COUNT(*) FROM client_loyalty_points WHERE workshop_id IS NULL)
    INTO v_orphan_data_count;
    
    RAISE NOTICE 'üìä √âtat des tables de fid√©lit√©:';
    RAISE NOTICE '  - Tables avec RLS activ√©: %/4', v_rls_enabled_count;
    RAISE NOTICE '  - Politiques: %', v_policy_count;
    RAISE NOTICE '  - Colonnes workshop_id: %/4', v_workshop_id_column_count;
    RAISE NOTICE '  - Donn√©es orphelines: %', v_orphan_data_count;
    
    RAISE NOTICE '';
    RAISE NOTICE 'üîß Actions selon le probl√®me:';
    
    IF v_rls_enabled_count < 4 THEN
        RAISE NOTICE '  üö® URGENT: Activer RLS sur toutes les tables de fid√©lit√©';
        RAISE NOTICE '     Ex√©cuter: correction_isolation_loyalty_complete.sql';
    END IF;
    
    IF v_policy_count = 0 THEN
        RAISE NOTICE '  üö® URGENT: Cr√©er des politiques RLS';
        RAISE NOTICE '     Ex√©cuter: correction_isolation_loyalty_complete.sql';
    END IF;
    
    IF v_workshop_id_column_count < 4 THEN
        RAISE NOTICE '  üö® URGENT: Ajouter les colonnes workshop_id';
        RAISE NOTICE '     Ex√©cuter: correction_isolation_loyalty_complete.sql';
    END IF;
    
    IF v_orphan_data_count > 0 THEN
        RAISE NOTICE '  ‚ö†Ô∏è Nettoyer les donn√©es orphelines';
        RAISE NOTICE '     Ex√©cuter: correction_isolation_loyalty_complete.sql';
    END IF;
    
    RAISE NOTICE '';
    RAISE NOTICE 'üéØ Solution compl√®te:';
    RAISE NOTICE '  1. Ex√©cuter correction_isolation_loyalty_complete.sql';
    RAISE NOTICE '  2. V√©rifier que toutes les tables ont RLS activ√©';
    RAISE NOTICE '  3. V√©rifier que toutes les politiques sont cr√©√©es';
    RAISE NOTICE '  4. Tester l''isolation avec diff√©rents utilisateurs';
    RAISE NOTICE '  5. Red√©ployer l''application';
    
END $$;
