-- =====================================================
-- FORCE REFRESH LOYALTY POINTS SANS TRIGGERS
-- =====================================================
-- Script pour forcer la mise √† jour des points en d√©sactivant temporairement les triggers
-- Date: 2025-01-23
-- =====================================================

-- 1. DIAGNOSTIC de l'√©tat actuel
SELECT '=== DIAGNOSTIC √âTAT ACTUEL ===' as etape;

-- V√©rifier les points des clients
SELECT 
    'Points des clients' as info,
    first_name,
    last_name,
    loyalty_points,
    current_tier_id,
    updated_at
FROM clients 
WHERE loyalty_points > 0 OR current_tier_id IS NOT NULL
ORDER BY loyalty_points DESC;

-- V√©rifier les niveaux de fid√©lit√©
SELECT 
    'Niveaux de fid√©lit√©' as info,
    workshop_id,
    name,
    points_required,
    discount_percentage,
    is_active,
    updated_at
FROM loyalty_tiers_advanced 
ORDER BY workshop_id, points_required;

-- 2. D√âSACTIVER temporairement les triggers
SELECT '=== D√âSACTIVATION TRIGGERS ===' as etape;

-- D√©sactiver les triggers sur clients
ALTER TABLE clients DISABLE TRIGGER ALL;

-- D√©sactiver les triggers sur loyalty_tiers_advanced
ALTER TABLE loyalty_tiers_advanced DISABLE TRIGGER ALL;

-- D√©sactiver les triggers sur loyalty_config
ALTER TABLE loyalty_config DISABLE TRIGGER ALL;

-- 3. FORCER la mise √† jour des timestamps
SELECT '=== MISE √Ä JOUR TIMESTAMPS ===' as etape;

-- Mettre √† jour les timestamps des clients
UPDATE clients 
SET updated_at = NOW()
WHERE loyalty_points > 0 OR current_tier_id IS NOT NULL;

-- Mettre √† jour les timestamps des niveaux
UPDATE loyalty_tiers_advanced 
SET updated_at = NOW();

-- Mettre √† jour les timestamps des configurations
UPDATE loyalty_config 
SET updated_at = NOW();

-- 4. V√âRIFIER les clients avec des points incoh√©rents
SELECT '=== CLIENTS AVEC POINTS INCOH√âRENTS ===' as etape;

-- Identifier les clients qui ont des points mais des tiers incorrects
SELECT 
    'Clients avec points incoh√©rents' as info,
    c.first_name,
    c.last_name,
    c.loyalty_points,
    c.current_tier_id,
    lta.name as current_tier_name,
    lta.points_required as current_tier_points,
    CASE 
        WHEN c.loyalty_points >= lta.points_required THEN '‚úÖ Coh√©rent'
        WHEN c.loyalty_points < lta.points_required THEN '‚ö†Ô∏è Points insuffisants'
        ELSE '‚ùå Incoh√©rent'
    END as coherence_status
FROM clients c
LEFT JOIN loyalty_tiers_advanced lta ON c.current_tier_id = lta.id
WHERE c.loyalty_points > 0
ORDER BY c.loyalty_points DESC;

-- 5. RECALCULER les tiers bas√©s sur les points actuels
SELECT '=== RECALCUL DES TIERS ===' as etape;

-- Recalculer les tiers pour tous les clients avec des points
UPDATE clients 
SET current_tier_id = (
    SELECT lta.id 
    FROM loyalty_tiers_advanced lta 
    WHERE lta.workshop_id = clients.workshop_id
    AND lta.is_active = true
    AND lta.points_required <= clients.loyalty_points
    ORDER BY lta.points_required DESC 
    LIMIT 1
),
updated_at = NOW()
WHERE loyalty_points > 0;

-- 6. V√âRIFIER les clients apr√®s recalcul
SELECT '=== CLIENTS APR√àS RECALCUL ===' as etape;

SELECT 
    'Clients apr√®s recalcul' as info,
    c.first_name,
    c.last_name,
    c.loyalty_points,
    c.current_tier_id,
    lta.name as tier_name,
    lta.points_required as tier_points_required,
    CASE 
        WHEN c.loyalty_points >= lta.points_required THEN '‚úÖ Coh√©rent'
        WHEN c.loyalty_points < lta.points_required THEN '‚ö†Ô∏è Points insuffisants'
        ELSE '‚ùå Incoh√©rent'
    END as coherence_status
FROM clients c
LEFT JOIN loyalty_tiers_advanced lta ON c.current_tier_id = lta.id
WHERE c.loyalty_points > 0 OR c.current_tier_id IS NOT NULL
ORDER BY c.loyalty_points DESC;

-- 7. R√âACTIVER les triggers
SELECT '=== R√âACTIVATION TRIGGERS ===' as etape;

-- R√©activer les triggers sur clients
ALTER TABLE clients ENABLE TRIGGER ALL;

-- R√©activer les triggers sur loyalty_tiers_advanced
ALTER TABLE loyalty_tiers_advanced ENABLE TRIGGER ALL;

-- R√©activer les triggers sur loyalty_config
ALTER TABLE loyalty_config ENABLE TRIGGER ALL;

-- 8. CR√âER un √©v√©nement de notification pour forcer le refresh
SELECT '=== CR√âATION √âV√âNEMENT NOTIFICATION ===' as etape;

-- Cr√©er un √©v√©nement pour notifier le frontend du changement
NOTIFY loyalty_data_updated, 'Points de fid√©lit√© mis √† jour';

-- 9. V√âRIFIER les donn√©es finales
SELECT '=== V√âRIFICATION FINALE ===' as etape;

-- V√©rifier que tous les clients ont des donn√©es coh√©rentes
SELECT 
    'V√©rification finale' as info,
    COUNT(*) as total_clients,
    COUNT(CASE WHEN loyalty_points > 0 THEN 1 END) as clients_avec_points,
    COUNT(CASE WHEN current_tier_id IS NOT NULL THEN 1 END) as clients_avec_tier,
    COUNT(CASE WHEN loyalty_points > 0 AND current_tier_id IS NOT NULL THEN 1 END) as clients_avec_points_et_tier
FROM clients;

-- 10. CR√âER un rapport de synchronisation
SELECT '=== RAPPORT DE SYNCHRONISATION ===' as etape;

-- Rapport d√©taill√© des clients et leurs tiers
SELECT 
    'Rapport de synchronisation' as info,
    c.first_name,
    c.last_name,
    c.loyalty_points,
    c.current_tier_id,
    lta.name as tier_name,
    lta.points_required as tier_points_required,
    c.updated_at as client_updated_at,
    lta.updated_at as tier_updated_at
FROM clients c
LEFT JOIN loyalty_tiers_advanced lta ON c.current_tier_id = lta.id
WHERE c.loyalty_points > 0 OR c.current_tier_id IS NOT NULL
ORDER BY c.loyalty_points DESC;

-- 11. Instructions finales
SELECT '=== INSTRUCTIONS FINALES ===' as etape;
SELECT '‚úÖ Triggers d√©sactiv√©s temporairement' as message;
SELECT '‚úÖ Timestamps mis √† jour' as timestamps;
SELECT '‚úÖ Tiers recalcul√©s' as recalcul;
SELECT '‚úÖ Triggers r√©activ√©s' as triggers;
SELECT '‚úÖ √âv√©nement de notification cr√©√©' as notification;
SELECT '‚úÖ Donn√©es synchronis√©es' as synchronisation;
SELECT 'üö® RED√âPLOYEZ L''APPLICATION' as deploy;
SELECT '‚ÑπÔ∏è Les points devraient maintenant √™tre √† jour dans l''interface' as note;
SELECT 'üí° Videz le cache du navigateur si n√©cessaire' as cache;
