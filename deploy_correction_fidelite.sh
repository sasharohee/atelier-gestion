#!/bin/bash

# üîß SCRIPT DE D√âPLOIEMENT AUTOMATIS√â - Correction Isolation Fid√©lit√©
# Ce script d√©ploie automatiquement la correction de l'isolation des donn√©es de fid√©lit√©
# Date: 2025-01-23

set -e  # Arr√™ter le script en cas d'erreur

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_FILE="$SCRIPT_DIR/correction_fidelite_$(date +%Y%m%d_%H%M%S).log"
BACKUP_DIR="$SCRIPT_DIR/backups"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}" | tee -a "$LOG_FILE"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}" | tee -a "$LOG_FILE"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}" | tee -a "$LOG_FILE"
}

# Fonction d'affichage du header
show_header() {
    echo -e "${BLUE}"
    echo "=================================================================="
    echo "üîß SCRIPT DE D√âPLOIEMENT - CORRECTION ISOLATION FID√âLIT√â"
    echo "=================================================================="
    echo "üìÖ Date: $(date)"
    echo "üìÅ R√©pertoire: $SCRIPT_DIR"
    echo "üìù Log: $LOG_FILE"
    echo "=================================================================="
    echo -e "${NC}"
}

# Fonction de v√©rification des pr√©requis
check_prerequisites() {
    log "üîç V√©rification des pr√©requis..."
    
    # V√©rifier que les fichiers de correction existent
    if [[ ! -f "$SCRIPT_DIR/correction_isolation_fidelite.sql" ]]; then
        log_error "Fichier correction_isolation_fidelite.sql introuvable"
        exit 1
    fi
    
    if [[ ! -f "$SCRIPT_DIR/test_isolation_fidelite.sql" ]]; then
        log_error "Fichier test_isolation_fidelite.sql introuvable"
        exit 1
    fi
    
    # V√©rifier que psql est install√©
    if ! command -v psql &> /dev/null; then
        log_error "psql n'est pas install√©. Veuillez installer PostgreSQL client."
        exit 1
    fi
    
    log_success "Pr√©requis v√©rifi√©s avec succ√®s"
}

# Fonction de configuration de la base de donn√©es
configure_database() {
    log "üîß Configuration de la base de donn√©es..."
    
    # Demander les informations de connexion
    echo -e "${YELLOW}Veuillez entrer les informations de connexion √† votre base de donn√©es Supabase:${NC}"
    
    read -p "Host (ex: db.wlqyrmntfxwdvkzzsujv.supabase.co): " DB_HOST
    read -p "Port (ex: 5432): " DB_PORT
    read -p "Database (ex: postgres): " DB_NAME
    read -p "Username (ex: postgres): " DB_USER
    read -s -p "Password: " DB_PASSWORD
    echo
    
    # Construire la cha√Æne de connexion
    DB_URL="postgresql://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME"
    
    # Tester la connexion
    log "üß™ Test de connexion √† la base de donn√©es..."
    if psql "$DB_URL" -c "SELECT version();" &> /dev/null; then
        log_success "Connexion √† la base de donn√©es r√©ussie"
    else
        log_error "Impossible de se connecter √† la base de donn√©es"
        exit 1
    fi
}

# Fonction de sauvegarde
create_backup() {
    log "üíæ Cr√©ation d'une sauvegarde de s√©curit√©..."
    
    # Cr√©er le r√©pertoire de sauvegarde
    mkdir -p "$BACKUP_DIR"
    
    # Nom du fichier de sauvegarde
    BACKUP_FILE="$BACKUP_DIR/backup_fidelite_$(date +%Y%m%d_%H%M%S).sql"
    
    # Cr√©er la sauvegarde
    if pg_dump "$DB_URL" --schema=public --data-only --table="loyalty_*" --table="clients" > "$BACKUP_FILE" 2>/dev/null; then
        log_success "Sauvegarde cr√©√©e: $BACKUP_FILE"
    else
        log_warning "Sauvegarde partielle cr√©√©e (certaines tables peuvent √™tre vides)"
    fi
}

# Fonction de d√©ploiement de la correction
deploy_correction() {
    log "üöÄ D√©ploiement de la correction d'isolation..."
    
    # Ex√©cuter le script de correction
    log "üìù Ex√©cution du script de correction..."
    if psql "$DB_URL" -f "$SCRIPT_DIR/correction_isolation_fidelite.sql" >> "$LOG_FILE" 2>&1; then
        log_success "Script de correction ex√©cut√© avec succ√®s"
    else
        log_error "Erreur lors de l'ex√©cution du script de correction"
        log "Consultez le fichier de log: $LOG_FILE"
        exit 1
    fi
}

# Fonction de test de la correction
test_correction() {
    log "üß™ Test de la correction d'isolation..."
    
    # Ex√©cuter le script de test
    log "üìù Ex√©cution du script de test..."
    if psql "$DB_URL" -f "$SCRIPT_DIR/test_isolation_fidelite.sql" >> "$LOG_FILE" 2>&1; then
        log_success "Script de test ex√©cut√© avec succ√®s"
    else
        log_warning "Erreur lors de l'ex√©cution du script de test"
        log "Consultez le fichier de log: $LOG_FILE"
    fi
}

# Fonction de v√©rification finale
verify_correction() {
    log "üîç V√©rification finale de la correction..."
    
    # V√©rifier que les colonnes workshop_id existent
    log "üìä V√©rification des colonnes d'isolation..."
    COLUMNS_CHECK=$(psql "$DB_URL" -t -c "
        SELECT COUNT(*) FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name IN ('loyalty_config', 'loyalty_tiers_advanced', 'loyalty_points_history')
        AND column_name = 'workshop_id';
    " 2>/dev/null | xargs)
    
    if [[ "$COLUMNS_CHECK" == "3" ]]; then
        log_success "Colonnes d'isolation v√©rifi√©es"
    else
        log_error "Probl√®me avec les colonnes d'isolation"
        exit 1
    fi
    
    # V√©rifier que RLS est activ√©
    log "üîí V√©rification de l'activation RLS..."
    RLS_CHECK=$(psql "$DB_URL" -t -c "
        SELECT COUNT(*) FROM pg_tables 
        WHERE schemaname = 'public' 
        AND tablename IN ('loyalty_config', 'loyalty_tiers_advanced', 'loyalty_points_history')
        AND rowsecurity = true;
    " 2>/dev/null | xargs)
    
    if [[ "$RLS_CHECK" == "3" ]]; then
        log_success "RLS activ√© sur toutes les tables"
    else
        log_error "Probl√®me avec l'activation RLS"
        exit 1
    fi
    
    # V√©rifier que la vue fonctionne
    log "üëÅÔ∏è V√©rification de la vue loyalty_dashboard..."
    if psql "$DB_URL" -c "SELECT COUNT(*) FROM loyalty_dashboard;" >> "$LOG_FILE" 2>&1; then
        log_success "Vue loyalty_dashboard fonctionne"
    else
        log_error "Probl√®me avec la vue loyalty_dashboard"
        exit 1
    fi
}

# Fonction de nettoyage
cleanup() {
    log "üßπ Nettoyage des fichiers temporaires..."
    
    # Supprimer les fichiers temporaires si n√©cessaire
    # (ajoutez ici la logique de nettoyage si n√©cessaire)
    
    log_success "Nettoyage termin√©"
}

# Fonction d'affichage du r√©sum√©
show_summary() {
    echo -e "${GREEN}"
    echo "=================================================================="
    echo "üéâ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS !"
    echo "=================================================================="
    echo "üìÅ Fichier de log: $LOG_FILE"
    echo "üíæ Sauvegarde: $BACKUP_DIR/"
    echo "üîí Isolation des donn√©es de fid√©lit√© r√©tablie"
    echo "‚úÖ Tous les tests de v√©rification ont r√©ussi"
    echo "=================================================================="
    echo -e "${NC}"
}

# Fonction principale
main() {
    show_header
    
    # V√©rifier les pr√©requis
    check_prerequisites
    
    # Configuration de la base de donn√©es
    configure_database
    
    # Cr√©er une sauvegarde
    create_backup
    
    # D√©ployer la correction
    deploy_correction
    
    # Tester la correction
    test_correction
    
    # V√©rifier la correction
    verify_correction
    
    # Nettoyage
    cleanup
    
    # Afficher le r√©sum√©
    show_summary
}

# Gestion des erreurs
trap 'log_error "Erreur survenue √† la ligne $LINENO. Consultez le log: $LOG_FILE"; exit 1' ERR

# Ex√©cution du script principal
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
