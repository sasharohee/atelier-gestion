-- =====================================================
-- RESTAURATION NIVEAUX DE FID√âLIT√â
-- =====================================================
-- Script pour recr√©er les niveaux par d√©faut pour tous les utilisateurs
-- Date: 2025-01-23
-- =====================================================

-- 1. DIAGNOSTIC de l'√©tat actuel
SELECT '=== DIAGNOSTIC √âTAT ACTUEL ===' as etape;

-- V√©rifier les donn√©es actuelles
SELECT 
    'loyalty_tiers_advanced' as table_name,
    workshop_id,
    COUNT(*) as count,
    STRING_AGG(name, ', ') as names
FROM loyalty_tiers_advanced 
GROUP BY workshop_id
ORDER BY workshop_id;

SELECT 
    'loyalty_config' as table_name,
    workshop_id,
    COUNT(*) as count,
    STRING_AGG(key, ', ') as keys
FROM loyalty_config 
GROUP BY workshop_id
ORDER BY workshop_id;

-- 2. CR√âER les niveaux par d√©faut pour l'utilisateur actuel
SELECT '=== CR√âATION NIVEAUX PAR D√âFAUT ===' as etape;

DO $$
DECLARE
    v_current_user_id UUID;
    v_tiers_count INTEGER := 0;
    v_config_count INTEGER := 0;
BEGIN
    -- R√©cup√©rer l'utilisateur actuel
    SELECT auth.uid() INTO v_current_user_id;
    
    IF v_current_user_id IS NULL THEN
        RAISE NOTICE '‚ö†Ô∏è Aucun utilisateur connect√©';
        RETURN;
    END IF;
    
    RAISE NOTICE 'üîÑ Cr√©ation des niveaux pour l''utilisateur: %', v_current_user_id;
    
    -- V√©rifier si des niveaux existent d√©j√†
    SELECT COUNT(*) INTO v_tiers_count 
    FROM loyalty_tiers_advanced 
    WHERE workshop_id = v_current_user_id;
    
    IF v_tiers_count = 0 THEN
        -- Cr√©er les niveaux par d√©faut
        INSERT INTO loyalty_tiers_advanced (workshop_id, name, points_required, discount_percentage, color, description, is_active)
        VALUES 
            (v_current_user_id, 'Bronze', 0, 0.00, '#CD7F32', 'Niveau de base', true),
            (v_current_user_id, 'Argent', 100, 5.00, '#C0C0C0', '5% de r√©duction', true),
            (v_current_user_id, 'Or', 500, 10.00, '#FFD700', '10% de r√©duction', true),
            (v_current_user_id, 'Platine', 1000, 15.00, '#E5E4E2', '15% de r√©duction', true),
            (v_current_user_id, 'Diamant', 2000, 20.00, '#B9F2FF', '20% de r√©duction', true);
        
        RAISE NOTICE '‚úÖ 5 niveaux par d√©faut cr√©√©s';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è % niveaux existent d√©j√†', v_tiers_count;
    END IF;
    
    -- V√©rifier si une configuration existe d√©j√†
    SELECT COUNT(*) INTO v_config_count 
    FROM loyalty_config 
    WHERE workshop_id = v_current_user_id;
    
    IF v_config_count = 0 THEN
        -- Cr√©er la configuration par d√©faut
        INSERT INTO loyalty_config (workshop_id, key, value, description)
        VALUES 
            (v_current_user_id, 'points_per_euro', '1', 'Points gagn√©s par euro d√©pens√©'),
            (v_current_user_id, 'minimum_purchase', '10', 'Montant minimum pour gagner des points'),
            (v_current_user_id, 'bonus_threshold', '100', 'Seuil pour bonus de points'),
            (v_current_user_id, 'bonus_multiplier', '1.5', 'Multiplicateur de bonus'),
            (v_current_user_id, 'points_expiry_days', '365', 'Dur√©e de validit√© des points en jours'),
            (v_current_user_id, 'auto_tier_upgrade', 'true', 'Mise √† jour automatique des niveaux de fid√©lit√©');
        
        RAISE NOTICE '‚úÖ 6 configurations par d√©faut cr√©√©es';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è % configurations existent d√©j√†', v_config_count;
    END IF;
    
END $$;

-- 3. V√âRIFIER la cr√©ation
SELECT '=== V√âRIFICATION CR√âATION ===' as etape;

-- V√©rifier les niveaux cr√©√©s
SELECT 
    'loyalty_tiers_advanced' as table_name,
    workshop_id,
    COUNT(*) as count,
    STRING_AGG(name, ', ') as names
FROM loyalty_tiers_advanced 
GROUP BY workshop_id
ORDER BY workshop_id;

-- V√©rifier les configurations cr√©√©es
SELECT 
    'loyalty_config' as table_name,
    workshop_id,
    COUNT(*) as count,
    STRING_AGG(key, ', ') as keys
FROM loyalty_config 
GROUP BY workshop_id
ORDER BY workshop_id;

-- 4. TEST des fonctions
SELECT '=== TEST DES FONCTIONS ===' as etape;

DO $$
DECLARE
    v_tiers_count INTEGER := 0;
    v_config_count INTEGER := 0;
BEGIN
    -- Test de la fonction get_workshop_loyalty_tiers
    BEGIN
        SELECT COUNT(*) INTO v_tiers_count FROM get_workshop_loyalty_tiers();
        RAISE NOTICE '‚úÖ Fonction get_workshop_loyalty_tiers: % niveaux r√©cup√©r√©s', v_tiers_count;
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ùå Erreur fonction get_workshop_loyalty_tiers: %', SQLERRM;
    END;
    
    -- Test de la fonction get_workshop_loyalty_config
    BEGIN
        SELECT COUNT(*) INTO v_config_count FROM get_workshop_loyalty_config();
        RAISE NOTICE '‚úÖ Fonction get_workshop_loyalty_config: % configurations r√©cup√©r√©es', v_config_count;
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ùå Erreur fonction get_workshop_loyalty_config: %', SQLERRM;
    END;
    
END $$;

-- 5. AFFICHER les niveaux cr√©√©s
SELECT '=== NIVEAUX CR√â√âS ===' as etape;

SELECT 
    name,
    points_required,
    discount_percentage,
    color,
    description,
    is_active
FROM loyalty_tiers_advanced 
WHERE workshop_id = auth.uid()
ORDER BY points_required ASC;

-- 6. AFFICHER les configurations cr√©√©es
SELECT '=== CONFIGURATIONS CR√â√âES ===' as etape;

SELECT 
    key,
    value,
    description
FROM loyalty_config 
WHERE workshop_id = auth.uid()
ORDER BY key;

-- 7. Instructions finales
SELECT '=== INSTRUCTIONS FINALES ===' as etape;
SELECT '‚úÖ Niveaux par d√©faut cr√©√©s' as message;
SELECT '‚úÖ Configuration par d√©faut cr√©√©e' as config;
SELECT '‚úÖ Fonctions test√©es' as fonctions;
SELECT 'üö® RED√âPLOYEZ L''APPLICATION' as deploy;
SELECT '‚ÑπÔ∏è Les niveaux sont maintenant disponibles dans l''interface' as note;
