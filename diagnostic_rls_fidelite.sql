-- DIAGNOSTIC DES PERMISSIONS RLS POUR LE SYST√àME DE FID√âLIT√â
-- Ce script v√©rifie et corrige les permissions RLS

-- 1. V√âRIFIER L'√âTAT ACTUEL DES POLITIQUES RLS
SELECT 'üîç √âTAT ACTUEL DES POLITIQUES RLS' as diagnostic;

SELECT 
    schemaname,
    tablename,
    policyname,
    permissive,
    roles,
    cmd,
    qual,
    with_check
FROM pg_policies 
WHERE tablename IN ('loyalty_config', 'loyalty_tiers_advanced', 'loyalty_points_history')
AND schemaname = 'public'
ORDER BY tablename, policyname;

-- 2. V√âRIFIER SI LES TABLES ONT RLS ACTIV√â
SELECT 'üîí √âTAT RLS DES TABLES' as diagnostic;

SELECT 
    schemaname,
    tablename,
    rowsecurity as rls_active
FROM pg_tables 
WHERE tablename IN ('loyalty_config', 'loyalty_tiers_advanced', 'loyalty_points_history')
AND schemaname = 'public';

-- 3. V√âRIFIER LES DONN√âES AVEC L'UTILISATEUR ACTUEL
SELECT 'üë§ TEST D''ACC√àS AVEC L''UTILISATEUR ACTUEL' as diagnostic;

-- Test d'acc√®s √† loyalty_config
SELECT 'üìä Test loyalty_config:' as test;
SELECT COUNT(*) as total_config FROM loyalty_config;

-- Test d'acc√®s √† loyalty_tiers_advanced  
SELECT 'üèÜ Test loyalty_tiers_advanced:' as test;
SELECT COUNT(*) as total_tiers FROM loyalty_tiers_advanced;

-- 4. V√âRIFIER LA FONCTION system_settings
SELECT '‚öôÔ∏è V√âRIFICATION DE system_settings' as diagnostic;

SELECT 
    CASE 
        WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'system_settings' AND table_schema = 'public') 
        THEN '‚úÖ Table system_settings existe'
        ELSE '‚ùå Table system_settings n''existe pas'
    END as status;

-- Si la table existe, v√©rifier les donn√©es
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'system_settings' AND table_schema = 'public') THEN
        RAISE NOTICE 'üìä Donn√©es dans system_settings: % lignes', (SELECT COUNT(*) FROM system_settings);
    END IF;
END $$;

-- 5. CR√âER DES POLITIQUES RLS TEMPORAIRES POUR LE TEST
SELECT 'üîß CR√âATION DE POLITIQUES RLS TEMPORAIRES' as diagnostic;

-- D√©sactiver temporairement RLS pour les tests
ALTER TABLE loyalty_config DISABLE ROW LEVEL SECURITY;
ALTER TABLE loyalty_tiers_advanced DISABLE ROW LEVEL SECURITY;

-- 6. TESTER L'ACC√àS SANS RLS
SELECT 'üß™ TEST D''ACC√àS SANS RLS' as diagnostic;

SELECT 'üìä loyalty_config sans RLS:' as test;
SELECT COUNT(*) as total_config FROM loyalty_config;

SELECT 'üèÜ loyalty_tiers_advanced sans RLS:' as test;  
SELECT COUNT(*) as total_tiers FROM loyalty_tiers_advanced;

-- 7. R√âACTIVER RLS ET CR√âER DES POLITIQUES CORRECTES
SELECT 'üîí R√âACTIVATION RLS AVEC POLITIQUES CORRECTES' as diagnostic;

-- R√©activer RLS
ALTER TABLE loyalty_config ENABLE ROW LEVEL SECURITY;
ALTER TABLE loyalty_tiers_advanced ENABLE ROW LEVEL SECURITY;

-- Supprimer les anciennes politiques (si elles existent)
DROP POLICY IF EXISTS loyalty_config_select_policy ON loyalty_config;
DROP POLICY IF EXISTS loyalty_config_insert_policy ON loyalty_config;
DROP POLICY IF EXISTS loyalty_config_update_policy ON loyalty_config;
DROP POLICY IF EXISTS loyalty_config_delete_policy ON loyalty_config;

DROP POLICY IF EXISTS loyalty_tiers_select_policy ON loyalty_tiers_advanced;
DROP POLICY IF EXISTS loyalty_tiers_insert_policy ON loyalty_tiers_advanced;
DROP POLICY IF EXISTS loyalty_tiers_update_policy ON loyalty_tiers_advanced;
DROP POLICY IF EXISTS loyalty_tiers_delete_policy ON loyalty_tiers_advanced;

-- Cr√©er des politiques permissives pour le test
CREATE POLICY loyalty_config_select_policy ON loyalty_config
    FOR SELECT USING (true);

CREATE POLICY loyalty_config_insert_policy ON loyalty_config
    FOR INSERT WITH CHECK (true);

CREATE POLICY loyalty_config_update_policy ON loyalty_config
    FOR UPDATE USING (true);

CREATE POLICY loyalty_config_delete_policy ON loyalty_config
    FOR DELETE USING (true);

CREATE POLICY loyalty_tiers_select_policy ON loyalty_tiers_advanced
    FOR SELECT USING (true);

CREATE POLICY loyalty_tiers_insert_policy ON loyalty_tiers_advanced
    FOR INSERT WITH CHECK (true);

CREATE POLICY loyalty_tiers_update_policy ON loyalty_tiers_advanced
    FOR UPDATE USING (true);

CREATE POLICY loyalty_tiers_delete_policy ON loyalty_tiers_advanced
    FOR DELETE USING (true);

-- 8. TEST FINAL
SELECT '‚úÖ TEST FINAL AVEC NOUVELLES POLITIQUES' as diagnostic;

SELECT 'üìä Test final loyalty_config:' as test;
SELECT COUNT(*) as total_config FROM loyalty_config;

SELECT 'üèÜ Test final loyalty_tiers_advanced:' as test;
SELECT COUNT(*) as total_tiers FROM loyalty_tiers_advanced;

-- 9. MESSAGE DE CONFIRMATION
SELECT 'üéâ POLITIQUES RLS CORRIG√âES !' as result;
SELECT 'üìã Vous pouvez maintenant tester l''interface de fid√©lit√©.' as next_step;


