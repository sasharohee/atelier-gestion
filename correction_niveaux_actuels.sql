-- CORRECTION DES NIVEAUX ACTUELS
-- Diagnostique et corrige le probl√®me d'affichage des niveaux

-- 1. DIAGNOSTIC DE L'√âTAT ACTUEL
SELECT 'üîç DIAGNOSTIC DES NIVEAUX' as diagnostic;

SELECT 
    c.id as client_id,
    c.first_name,
    c.last_name,
    c.loyalty_points,
    c.current_tier_id,
    lt.id as tier_id,
    lt.name as tier_name,
    lt.points_required,
    CASE 
        WHEN c.current_tier_id IS NULL THEN '‚ùå Aucun niveau assign√©'
        WHEN lt.id IS NULL THEN '‚ùå Niveau introuvable'
        ELSE '‚úÖ Niveau correct'
    END as status
FROM clients c
LEFT JOIN loyalty_tiers_advanced lt ON c.current_tier_id = lt.id
WHERE c.loyalty_points > 0
ORDER BY c.loyalty_points DESC;

-- 2. V√âRIFIER LES NIVEAUX DISPONIBLES
SELECT 'üèÜ NIVEAUX DISPONIBLES' as diagnostic;

SELECT 
    id,
    name,
    points_required,
    discount_percentage,
    is_active
FROM loyalty_tiers_advanced 
ORDER BY points_required;

-- 3. CORRIGER LES NIVEAUX MANQUANTS
SELECT 'üîß CORRECTION DES NIVEAUX' as diagnostic;

-- Supprimer toutes les r√©f√©rences incorrectes
UPDATE clients 
SET current_tier_id = NULL 
WHERE current_tier_id IS NOT NULL;

-- Assigner les niveaux selon les points
UPDATE clients 
SET current_tier_id = (
    SELECT id 
    FROM loyalty_tiers_advanced 
    WHERE points_required <= clients.loyalty_points 
    AND is_active = true
    ORDER BY points_required DESC 
    LIMIT 1
)
WHERE loyalty_points > 0;

-- 4. V√âRIFICATION APR√àS CORRECTION
SELECT '‚úÖ V√âRIFICATION APR√àS CORRECTION' as diagnostic;

SELECT 
    c.id as client_id,
    c.first_name,
    c.last_name,
    c.loyalty_points,
    c.current_tier_id,
    lt.name as niveau_nom,
    lt.points_required,
    lt.discount_percentage,
    CASE 
        WHEN c.current_tier_id IS NOT NULL THEN '‚úÖ Niveau assign√©'
        WHEN c.loyalty_points = 0 THEN '‚ÑπÔ∏è Aucun point'
        ELSE '‚ùå Probl√®me'
    END as statut
FROM clients c
LEFT JOIN loyalty_tiers_advanced lt ON c.current_tier_id = lt.id
WHERE c.loyalty_points > 0
ORDER BY c.loyalty_points DESC;

-- 5. CR√âER UNE FONCTION POUR MAINTENIR LES NIVEAUX √Ä JOUR
CREATE OR REPLACE FUNCTION update_client_tiers()
RETURNS JSON
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    v_updated_count INTEGER;
BEGIN
    -- Mettre √† jour les niveaux de tous les clients avec des points
    UPDATE clients 
    SET current_tier_id = (
        SELECT id 
        FROM loyalty_tiers_advanced 
        WHERE points_required <= clients.loyalty_points 
        AND is_active = true
        ORDER BY points_required DESC 
        LIMIT 1
    )
    WHERE loyalty_points > 0;
    
    GET DIAGNOSTICS v_updated_count = ROW_COUNT;
    
    RETURN json_build_object(
        'success', true,
        'message', 'Niveaux mis √† jour avec succ√®s',
        'clients_updated', v_updated_count
    );
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object(
            'success', false,
            'error', 'Erreur lors de la mise √† jour des niveaux: ' || SQLERRM
        );
END;
$$;

-- 6. ACCORDER LES PERMISSIONS
GRANT EXECUTE ON FUNCTION update_client_tiers() TO authenticated;

-- 7. TESTER LA FONCTION
SELECT 'üß™ TEST DE LA FONCTION' as diagnostic;

SELECT update_client_tiers();

-- 8. V√âRIFICATION FINALE
SELECT '‚úÖ V√âRIFICATION FINALE' as diagnostic;

SELECT 
    c.first_name,
    c.last_name,
    c.loyalty_points,
    lt.name as niveau_actuel,
    lt.points_required,
    lt.discount_percentage
FROM clients c
LEFT JOIN loyalty_tiers_advanced lt ON c.current_tier_id = lt.id
WHERE c.loyalty_points > 0
ORDER BY c.loyalty_points DESC;

-- 9. MESSAGE DE CONFIRMATION
SELECT 'üéâ NIVEAUX CORRIG√âS !' as result;
SELECT 'üìã Les niveaux actuels devraient maintenant s''afficher correctement.' as next_step;
SELECT 'üîÑ Rafra√Æchissez la page pour voir les changements.' as instruction;
