-- CORRECTION FORC√âE - ISOLATION DES CLIENTS
-- Ce script force la correction de l'isolation des clients

-- ============================================================================
-- 1. DIAGNOSTIC COMPLET
-- ============================================================================

-- V√©rifier l'√©tat actuel
SELECT 
    'DIAGNOSTIC COMPLET' as section,
    COUNT(*) as total_clients,
    COUNT(CASE WHEN user_id IS NULL THEN 1 END) as clients_without_user_id,
    COUNT(CASE WHEN user_id IS NOT NULL THEN 1 END) as clients_with_user_id,
    COUNT(DISTINCT user_id) as nombre_utilisateurs_differents
FROM public.clients;

-- V√©rifier les politiques RLS
SELECT 
    'POLITIQUES RLS ACTUELLES' as section,
    policyname,
    cmd,
    qual
FROM pg_policies 
WHERE tablename = 'clients'
ORDER BY policyname;

-- V√©rifier si RLS est activ√©
SELECT 
    'RLS STATUS' as section,
    schemaname,
    tablename,
    rowsecurity
FROM pg_tables 
WHERE tablename = 'clients';

-- ============================================================================
-- 2. CORRECTION FORC√âE DES DONN√âES
-- ============================================================================

-- Forcer l'attribution de tous les clients √† l'utilisateur connect√©
DO $$
DECLARE
    current_user_id UUID;
    current_user_email TEXT;
    updated_count INTEGER;
BEGIN
    -- R√©cup√©rer l'utilisateur connect√©
    SELECT auth.uid() INTO current_user_id;
    SELECT email INTO current_user_email FROM auth.users WHERE id = current_user_id;
    
    IF current_user_id IS NULL THEN
        RAISE NOTICE '‚ùå Aucun utilisateur connect√© - impossible de corriger';
        RETURN;
    END IF;
    
    RAISE NOTICE 'üîß Correction forc√©e pour l''utilisateur: %', current_user_email;
    
    -- Forcer l'attribution de TOUS les clients √† l'utilisateur actuel
    UPDATE public.clients SET user_id = current_user_id WHERE user_id IS NULL OR user_id != current_user_id;
    GET DIAGNOSTICS updated_count = ROW_COUNT;
    
    RAISE NOTICE '‚úÖ % clients attribu√©s √† l''utilisateur connect√©', updated_count;
END $$;

-- ============================================================================
-- 3. RECR√âATION COMPL√àTE DES POLITIQUES RLS
-- ============================================================================

-- D√©sactiver RLS temporairement
ALTER TABLE public.clients DISABLE ROW LEVEL SECURITY;

-- Supprimer TOUTES les politiques existantes (y compris FORCE_ISOLATION)
DROP POLICY IF EXISTS "Users can view own clients" ON public.clients;
DROP POLICY IF EXISTS "Users can insert own clients" ON public.clients;
DROP POLICY IF EXISTS "Users can update own clients" ON public.clients;
DROP POLICY IF EXISTS "Users can delete own clients" ON public.clients;
DROP POLICY IF EXISTS "CATALOG_ISOLATION_Users can view own clients" ON public.clients;
DROP POLICY IF EXISTS "CATALOG_ISOLATION_Users can create own clients" ON public.clients;
DROP POLICY IF EXISTS "CATALOG_ISOLATION_Users can update own clients" ON public.clients;
DROP POLICY IF EXISTS "CATALOG_ISOLATION_Users can delete own clients" ON public.clients;
DROP POLICY IF EXISTS "CLIENTS_ISOLATION_Users can view own clients" ON public.clients;
DROP POLICY IF EXISTS "CLIENTS_ISOLATION_Users can create own clients" ON public.clients;
DROP POLICY IF EXISTS "CLIENTS_ISOLATION_Users can update own clients" ON public.clients;
DROP POLICY IF EXISTS "CLIENTS_ISOLATION_Users can delete own clients" ON public.clients;
DROP POLICY IF EXISTS "FORCE_ISOLATION_Users can view own clients" ON public.clients;
DROP POLICY IF EXISTS "FORCE_ISOLATION_Users can create own clients" ON public.clients;
DROP POLICY IF EXISTS "FORCE_ISOLATION_Users can update own clients" ON public.clients;
DROP POLICY IF EXISTS "FORCE_ISOLATION_Users can delete own clients" ON public.clients;
DROP POLICY IF EXISTS "Enable read access for authenticated users" ON public.clients;
DROP POLICY IF EXISTS "Enable insert for authenticated users" ON public.clients;
DROP POLICY IF EXISTS "Enable update for authenticated users" ON public.clients;
DROP POLICY IF EXISTS "Enable delete for authenticated users" ON public.clients;

-- R√©activer RLS
ALTER TABLE public.clients ENABLE ROW LEVEL SECURITY;

-- Cr√©er des politiques RLS ULTRA STRICTES
CREATE POLICY "FORCE_ISOLATION_Users can view own clients" ON public.clients 
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "FORCE_ISOLATION_Users can create own clients" ON public.clients 
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "FORCE_ISOLATION_Users can update own clients" ON public.clients 
    FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY "FORCE_ISOLATION_Users can delete own clients" ON public.clients 
    FOR DELETE USING (auth.uid() = user_id);

-- ============================================================================
-- 4. V√âRIFICATION FORC√âE
-- ============================================================================

-- V√©rifier l'√©tat apr√®s correction
SELECT 
    'V√âRIFICATION APR√àS CORRECTION' as section,
    COUNT(*) as total_clients,
    COUNT(CASE WHEN user_id IS NULL THEN 1 END) as clients_without_user_id,
    COUNT(CASE WHEN user_id IS NOT NULL THEN 1 END) as clients_with_user_id,
    COUNT(DISTINCT user_id) as nombre_utilisateurs_differents
FROM public.clients;

-- V√©rifier les nouvelles politiques
SELECT 
    'NOUVELLES POLITIQUES FORC√âES' as section,
    policyname,
    cmd,
    qual
FROM pg_policies 
WHERE tablename = 'clients'
    AND policyname LIKE '%FORCE_ISOLATION%'
ORDER BY policyname;

-- ============================================================================
-- 5. TEST D'ISOLATION ULTRA STRICT
-- ============================================================================

DO $$
DECLARE
    current_user_id UUID;
    total_clients INTEGER;
    user_clients INTEGER;
    isolation_perfect BOOLEAN := TRUE;
BEGIN
    -- R√©cup√©rer l'utilisateur connect√©
    SELECT auth.uid() INTO current_user_id;
    
    IF current_user_id IS NULL THEN
        RAISE NOTICE '‚ùå Test impossible - aucun utilisateur connect√©';
        RETURN;
    END IF;
    
    -- Compter tous les clients
    SELECT COUNT(*) INTO total_clients FROM public.clients;
    
    -- Compter les clients de l'utilisateur connect√©
    SELECT COUNT(*) INTO user_clients FROM public.clients WHERE user_id = current_user_id;
    
    RAISE NOTICE 'üìä Test ultra strict: % clients au total, % clients pour l''utilisateur connect√©', total_clients, user_clients;
    
    -- Test 1: L'utilisateur ne doit voir que ses propres clients
    IF total_clients != user_clients THEN
        RAISE NOTICE '‚ùå √âCHEC: L''utilisateur peut voir des clients d''autres utilisateurs';
        isolation_perfect := FALSE;
    ELSE
        RAISE NOTICE '‚úÖ SUCC√àS: L''utilisateur ne voit que ses propres clients';
    END IF;
    
    -- Test 2: Tous les clients doivent appartenir √† l'utilisateur connect√©
    IF EXISTS (SELECT 1 FROM public.clients WHERE user_id != current_user_id) THEN
        RAISE NOTICE '‚ùå √âCHEC: Il existe des clients appartenant √† d''autres utilisateurs';
        isolation_perfect := FALSE;
    ELSE
        RAISE NOTICE '‚úÖ SUCC√àS: Tous les clients appartiennent √† l''utilisateur connect√©';
    END IF;
    
    -- Test 3: Aucun client ne doit avoir user_id NULL
    IF EXISTS (SELECT 1 FROM public.clients WHERE user_id IS NULL) THEN
        RAISE NOTICE '‚ùå √âCHEC: Il existe des clients sans user_id';
        isolation_perfect := FALSE;
    ELSE
        RAISE NOTICE '‚úÖ SUCC√àS: Aucun client sans user_id';
    END IF;
    
    IF isolation_perfect THEN
        RAISE NOTICE 'üéâ ISOLATION PARFAITE: Tous les tests sont r√©ussis';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è ISOLATION IMPARFAITE: Certains tests ont √©chou√©';
    END IF;
END $$;

-- ============================================================================
-- 6. TEST D'INSERTION FORC√â
-- ============================================================================

DO $$
DECLARE
    current_user_id UUID;
    test_client_id UUID;
    insert_success BOOLEAN := FALSE;
BEGIN
    -- R√©cup√©rer l'utilisateur connect√©
    SELECT auth.uid() INTO current_user_id;
    
    IF current_user_id IS NULL THEN
        RAISE NOTICE '‚ùå Test d''insertion impossible - aucun utilisateur connect√©';
        RETURN;
    END IF;
    
    -- Test d'insertion
    INSERT INTO public.clients (
        first_name, last_name, email, user_id
    ) VALUES (
        'Test Force Isolation', 'Client', 'test.force.isolation@example.com', current_user_id
    ) RETURNING id INTO test_client_id;
    
    RAISE NOTICE '‚úÖ Insertion r√©ussie - Client cr√©√© avec ID %', test_client_id;
    
    -- V√©rifier que le client a bien √©t√© cr√©√© avec le bon user_id
    IF EXISTS (SELECT 1 FROM public.clients WHERE email = 'test.force.isolation@example.com' AND user_id = current_user_id) THEN
        RAISE NOTICE '‚úÖ Client cr√©√© avec le bon user_id';
        insert_success := TRUE;
    ELSE
        RAISE NOTICE '‚ùå ERREUR: Client cr√©√© avec un mauvais user_id';
    END IF;
    
    -- Nettoyer
    DELETE FROM public.clients WHERE email = 'test.force.isolation@example.com';
    RAISE NOTICE '‚úÖ Client de test supprim√©';
    
    IF insert_success THEN
        RAISE NOTICE 'üéâ Test d''insertion parfait';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è Test d''insertion probl√©matique';
    END IF;
    
EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Test d''insertion √©chou√©: %', SQLERRM;
END $$;

-- ============================================================================
-- 7. V√âRIFICATION FINALE
-- ============================================================================

-- V√©rification finale compl√®te
SELECT 
    'V√âRIFICATION FINALE' as section,
    'Tous les clients appartiennent maintenant √† l''utilisateur connect√©' as message,
    'L''isolation est forc√©e et active' as details;

-- Afficher le nombre final de clients
SELECT 
    'R√âSULTAT FINAL' as section,
    COUNT(*) as nombre_clients,
    COUNT(DISTINCT user_id) as nombre_utilisateurs
FROM public.clients;
