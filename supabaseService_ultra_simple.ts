// Version ultra-simplifi√©e du service d'authentification
// Cette version √©vite compl√®tement les appels √† la base de donn√©es lors de l'inscription

import { supabase } from '../lib/supabase';
import { User } from '../types';

// Fonction de gestion d'erreur simplifi√©e
const handleError = (error: any) => {
  console.error('Erreur:', error);
  return {
    success: false,
    error: error?.message || 'Une erreur est survenue'
  };
};

// Fonction de succ√®s simplifi√©e
const handleSuccess = <T>(data: T) => {
  return {
    success: true,
    data
  };
};

// Service d'authentification ultra-simplifi√©
export const userService = {
  // Inscription ultra-simple - SEULEMENT Supabase Auth, pas de base de donn√©es
  async signUp(email: string, password: string, userData: Partial<User>) {
    try {
      console.log('üîß Inscription ultra-simple via Supabase Auth uniquement:', { email });
      
      // Appel direct √† Supabase Auth SANS options de donn√©es pour √©viter les triggers
      const { data, error } = await supabase.auth.signUp({
        email: email,
        password: password
        // PAS d'options.data pour √©viter les triggers
        // PAS d'emailRedirectTo pour √©viter les probl√®mes
      });
      
      if (error) {
        console.error('‚ùå Erreur lors de l\'inscription:', error);
        
        // Gestion des erreurs sp√©cifiques
        if (error.message.includes('already registered')) {
          return handleError({
            message: 'Un compte avec cet email existe d√©j√†. Veuillez vous connecter.',
            code: 'ACCOUNT_EXISTS'
          });
        }
        
        return handleError({
          message: 'Erreur lors de l\'inscription. Veuillez r√©essayer.',
          code: 'SIGNUP_ERROR'
        });
      }
      
      console.log('‚úÖ Inscription r√©ussie:', data);
      
      // Stocker les donn√©es utilisateur pour traitement diff√©r√©
      if (data.user) {
        const pendingUserData = {
          userId: data.user.id,
          email: email,
          firstName: userData.firstName || 'Utilisateur',
          lastName: userData.lastName || 'Test',
          role: userData.role || 'technician',
          timestamp: new Date().toISOString()
        };
        
        localStorage.setItem('pendingUserData', JSON.stringify(pendingUserData));
        console.log('üíæ Donn√©es utilisateur stock√©es pour traitement diff√©r√©');
      }
      
      // Stocker l'email pour v√©rification
      localStorage.setItem('pendingSignupEmail', email);
      
      return handleSuccess({
        message: 'Inscription r√©ussie ! V√©rifiez votre email pour confirmer votre compte. Les donn√©es seront cr√©√©es lors de votre premi√®re connexion.',
        status: 'pending',
        data: data.user,
        emailSent: true,
        needsDataCreation: true
      });
    } catch (err) {
      console.error('üí• Exception lors de l\'inscription:', err);
      return handleError({
        message: 'Erreur inattendue lors de l\'inscription. Veuillez r√©essayer.',
        code: 'UNEXPECTED_ERROR'
      });
    }
  },

  // Connexion simple
  async signIn(email: string, password: string) {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    });
    if (error) return handleError(error);
    return handleSuccess(data);
  },

  // D√©connexion simple
  async signOut() {
    const { error } = await supabase.auth.signOut();
    if (error) return handleError(error);
    
    // Nettoyer les donn√©es en attente
    localStorage.removeItem('pendingUserData');
    localStorage.removeItem('pendingSignupEmail');
    
    return handleSuccess(true);
  },

  // Traitement des donn√©es utilisateur en attente lors de la connexion
  async processPendingUserData() {
    try {
      const pendingData = localStorage.getItem('pendingUserData');
      if (!pendingData) return;

      const userData = JSON.parse(pendingData);
      console.log('üîÑ Traitement des donn√©es utilisateur en attente:', userData);

      // V√©rifier que l'utilisateur est connect√©
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError || !user) {
        console.log('‚ö†Ô∏è Utilisateur non connect√©, traitement diff√©r√©');
        return;
      }

      // Cr√©er l'utilisateur dans la table users
      const newUserData = {
        id: user.id,
        email: userData.email,
        first_name: userData.firstName,
        last_name: userData.lastName,
        role: userData.role,
        avatar: null,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      const { data: insertData, error: insertError } = await supabase
        .from('users')
        .insert([newUserData])
        .select()
        .single();

      if (insertError) {
        console.error('‚ùå Erreur lors de la cr√©ation de l\'utilisateur:', insertError);
        return;
      }

      console.log('‚úÖ Utilisateur cr√©√© avec succ√®s:', insertData);

      // Cr√©er les donn√©es par d√©faut de mani√®re asynchrone
      setTimeout(async () => {
        try {
          const { data: rpcData, error: rpcError } = await supabase.rpc('create_user_default_data', {
            p_user_id: user.id
          });

          if (rpcError) {
            console.warn('‚ö†Ô∏è Erreur lors de la cr√©ation des donn√©es par d√©faut (non bloquant):', rpcError);
          } else {
            console.log('‚úÖ Donn√©es par d√©faut cr√©√©es pour l\'utilisateur:', user.id);
          }
        } catch (rpcError) {
          console.warn('‚ö†Ô∏è Exception lors de la cr√©ation des donn√©es par d√©faut (non bloquant):', rpcError);
        }
      }, 2000);

      // Nettoyer les donn√©es en attente
      localStorage.removeItem('pendingUserData');
      console.log('‚úÖ Donn√©es utilisateur trait√©es avec succ√®s');

    } catch (err) {
      console.error('‚ùå Erreur lors du traitement des donn√©es utilisateur:', err);
    }
  }
};
