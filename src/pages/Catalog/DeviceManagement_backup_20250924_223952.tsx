// @ts-nocheck
import React, { useState, useEffect } from 'react';
import { useAppStore } from '../../store';
import { DeviceCategory, DeviceBrand, DeviceModel } from '../../types/deviceManagement';
import { categoryService, ProductCategory } from '../../services/categoryService';
import { brandService } from '../../services/deviceManagementService';
import {
  Box,
  Typography,
  Card,
  CardContent,
  Grid,
  Button,
  TextField,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  IconButton,
  Chip,
  Avatar,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Alert,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Tooltip,
  Badge,
  Tabs,
  Tab,
  Divider,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  Switch,
  FormControlLabel,
  CircularProgress,
} from '@mui/material';
import {
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Search as SearchIcon,
  FilterList as FilterIcon,
  Sort as SortIcon,
  Phone as PhoneIcon,
  Tablet as TabletIcon,
  Laptop as LaptopIcon,
  Computer as ComputerIcon,
  DeviceHub as DeviceHubIcon,
  ExpandMore as ExpandMoreIcon,
  Warning as WarningIcon,
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon,
  Category as CategoryIcon,
  Grading as BrandingIcon,
  ModelTraining as ModelIcon,
  Inventory as InventoryIcon,
  Settings as SettingsIcon,
  // Ic√¥nes de base pour les cat√©gories (test√©es et s√ªres)
  Watch as WatchIcon,
  Headphones as HeadphonesIcon,
  CameraAlt as CameraIcon,
  Tv as TvIcon,
  Speaker as SpeakerIcon,
  Keyboard as KeyboardIcon,
  Mouse as MouseIcon,
  Router as RouterIcon,
  Memory as MemoryIcon,
  Storage as StorageIcon,
  BatteryChargingFull as BatteryIcon,
  Wifi as WifiIcon,
  Bluetooth as BluetoothIcon,
  Usb as UsbIcon,
  Power as PowerIcon,
  Security as SecurityIcon,
  Speed as SpeedIcon,
  SdCard as SdCardIcon,
  SimCard as SimCardIcon,
  NetworkCheck as NetworkIcon,
  SignalCellular4Bar as SignalIcon,
  GpsFixed as GpsIcon,
  Sensors as SensorsIcon,
  FlashOn as FlashIcon,
  VolumeUp as VolumeIcon,
  Mic as MicIcon,
  Videocam as VideocamIcon,
  PhotoCamera as PhotoCameraIcon,
  Print as PrintIcon,
  Scanner as ScannerIcon,
  Fax as FaxIcon,
  Monitor as MonitorIcon,
  DisplaySettings as DisplayIcon,
  Brightness6 as BrightnessIcon,
  Contrast as ContrastIcon,
  ColorLens as ColorIcon,
  HdrOn as HdrIcon,
  AutoAwesome as AutoAwesomeIcon,
  HighQuality as QualityIcon,
  SurroundSound as SurroundIcon,
  Subscriptions as SubscriptionsIcon,
  LiveTv as LiveTvIcon,
  MusicNote as MusicIcon,
  Radio as RadioIcon,
  Podcasts as PodcastsIcon,
  Audiotrack as AudiotrackIcon,
  Equalizer as EqualizerIcon,
  GraphicEq as GraphicEqIcon,
  VolumeOff as VolumeOffIcon,
  VolumeDown as VolumeDownIcon,
  BluetoothAudio as BluetoothAudioIcon,
  Airplay as AirplayIcon,
  Cast as CastIcon,
  ScreenShare as ScreenShareIcon,
  ConnectedTv as ConnectedTvIcon,
  SmartDisplay as SmartDisplayIcon,
  VideoCall as VideoCallIcon,
  VideoChat as VideoChatIcon,
  VideoSettings as VideoSettingsIcon,
  VideoStable as VideoStableIcon,
  VideoFile as VideoFileIcon,
  VideoLabel as VideoLabelIcon,
} from '@mui/icons-material';
import { Device, DeviceType } from '../../types';
import SpecificationsDisplay from '../../components/SpecificationsDisplay';



const DeviceManagement: React.FC = () => {
  const { 
    deviceCategories,
    deviceBrands,
    deviceModels,
    addDeviceCategory,
    updateDeviceCategory,
    deleteDeviceCategory,
    addDeviceBrand,
    updateDeviceBrand,
    deleteDeviceBrand,
    addDeviceModel,
    updateDeviceModel,
    deleteDeviceModel,
    getDeviceCategories,
    getDeviceBrands,
    getDeviceModels,
  } = useAppStore();
  
  // √âtat principal pour les onglets
  const [mainTab, setMainTab] = useState(0);
  
  // √âtats pour les cat√©gories
  const [categoryDialogOpen, setCategoryDialogOpen] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState<DeviceCategory | null>(null);
  const [newCategory, setNewCategory] = useState({
    name: '',
    description: '',
    icon: 'smartphone',
    isActive: true,
  });

  // √âtats pour les marques
  const [brandDialogOpen, setBrandDialogOpen] = useState(false);
  const [selectedBrand, setSelectedBrand] = useState<DeviceBrand | null>(null);
  const [newBrand, setNewBrand] = useState({
    name: '',
    categoryIds: [] as string[], // Tableau pour plusieurs cat√©gories
    description: '',
    logo: '',
    isActive: true,
  });

  // √âtats pour les mod√®les
  const [modelDialogOpen, setModelDialogOpen] = useState(false);
  const [selectedModel, setSelectedModel] = useState<DeviceModel | null>(null);
  const [newModel, setNewModel] = useState<any>({
    name: '', // Le champ 'name' du formulaire correspond au 'model' de la base
    brand: '',
    brandId: '',
    categoryId: '',
    type: 'smartphone',
    year: new Date().getFullYear(),
    specifications: {},
    commonIssues: [''],
    repairDifficulty: 'medium',
    partsAvailability: 'medium',
    isActive: true,
  });



  // √âtats g√©n√©raux
  const [searchQuery, setSearchQuery] = useState('');
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [itemToDelete, setItemToDelete] = useState<any>(null);
  const [deleteType, setDeleteType] = useState<'category' | 'brand' | 'model'>('category');
  const [selectedCategoryForBrands, setSelectedCategoryForBrands] = useState<string>('all');
  const [categoriesLoading, setCategoriesLoading] = useState(true);
  const [categoriesError, setCategoriesError] = useState<string | null>(null);

  // √âtat pour les cat√©gories depuis la base de donn√©es
  const [dbCategories, setDbCategories] = useState<ProductCategory[]>([]);
  
  // √âtat pour les marques depuis la base de donn√©es
  const [dbBrands, setDbBrands] = useState<DeviceBrand[]>([]);
  const [brandsLoading, setBrandsLoading] = useState(true);
  const [brandsError, setBrandsError] = useState<string | null>(null);

  // Charger les cat√©gories depuis la base de donn√©es avec isolation
  useEffect(() => {
    const loadCategories = async () => {
      try {
        setCategoriesLoading(true);
        setCategoriesError(null);
        
        const result = await categoryService.getAll();
        if (result.success && result.data) {
          setDbCategories(result.data);
          console.log('‚úÖ Cat√©gories charg√©es depuis la base de donn√©es:', result.data.length);
          
          // Si aucune cat√©gorie n'existe, cr√©er les cat√©gories par d√©faut
          if (result.data.length === 0) {
            console.log('üìù Aucune cat√©gorie trouv√©e, cr√©ation des cat√©gories par d√©faut...');
            await createDefaultCategories();
          }
        } else {
          setCategoriesError(result.error || 'Erreur lors du chargement des cat√©gories');
          console.error('‚ùå Erreur lors du chargement des cat√©gories:', result.error);
        }
      } catch (error) {
        setCategoriesError('Erreur lors du chargement des cat√©gories');
        console.error('‚ùå Erreur lors du chargement des cat√©gories:', error);
      } finally {
        setCategoriesLoading(false);
      }
    };

    loadCategories();
  }, []);

  // Fonction pour cr√©er les cat√©gories par d√©faut
  const createDefaultCategories = async () => {
    const defaultCategoryData = [
      { name: 'Smartphone', description: 'T√©l√©phones intelligents', icon: 'smartphone' },
      { name: 'Tablette', description: 'Tablettes tactiles', icon: 'tablet' },
      { name: 'Ordinateur portable', description: 'Laptops et notebooks', icon: 'laptop' },
      { name: 'Ordinateur fixe', description: 'Ordinateurs de bureau', icon: 'desktop' },
      { name: 'Autre', description: 'Autres appareils √©lectroniques', icon: 'other' }
    ];

    try {
      for (const categoryData of defaultCategoryData) {
        const result = await categoryService.create(categoryData);
        if (result.success) {
          console.log('‚úÖ Cat√©gorie par d√©faut cr√©√©e:', categoryData.name);
        } else {
          console.error('‚ùå Erreur lors de la cr√©ation de la cat√©gorie:', categoryData.name, result.error);
        }
      }
      
      // Recharger les cat√©gories apr√®s cr√©ation
      const categoriesResult = await categoryService.getAll();
      if (categoriesResult.success && categoriesResult.data) {
        setDbCategories(categoriesResult.data);
        console.log('‚úÖ Cat√©gories recharg√©es apr√®s cr√©ation:', categoriesResult.data.length);
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation des cat√©gories par d√©faut:', error);
    }
  };

  // Charger les marques depuis la base de donn√©es
  useEffect(() => {
    const loadBrands = async () => {
      try {
        setBrandsLoading(true);
        setBrandsError(null);
        
        const result = await brandService.getAll();
        if (result.success && result.data) {
          setDbBrands(result.data);
          console.log('‚úÖ Marques charg√©es depuis la base de donn√©es:', result.data.length);
        } else {
          setBrandsError(result.error || 'Erreur lors du chargement des marques');
          console.error('‚ùå Erreur lors du chargement des marques:', result.error);
        }
      } catch (error) {
        setBrandsError('Erreur lors du chargement des marques');
        console.error('‚ùå Erreur lors du chargement des marques:', error);
      } finally {
        setBrandsLoading(false);
      }
    };

    loadBrands();
  }, []);

  // Convertir les cat√©gories de la base de donn√©es au format DeviceCategory
  const convertDbCategoryToDeviceCategory = (dbCategory: ProductCategory): DeviceCategory => ({
    id: dbCategory.id,
    name: dbCategory.name,
    description: dbCategory.description,
    icon: dbCategory.icon,
    isActive: dbCategory.is_active,
    createdAt: new Date(dbCategory.created_at),
    updatedAt: new Date(dbCategory.updated_at),
  });

  // Utiliser uniquement les cat√©gories de la base de donn√©es (pas de fallback hardcod√©)
  const defaultCategories: DeviceCategory[] = dbCategories.map(convertDbCategoryToDeviceCategory);

  // Donn√©es de test pour les marques
  const defaultBrands: DeviceBrand[] = [
    // Smartphones
    {
      id: '1',
      name: 'Apple',
      categoryId: '1',
      description: 'Fabricant am√©ricain de produits √©lectroniques premium',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '2',
      name: 'Samsung',
      categoryId: '1',
      description: 'Fabricant cor√©en leader en √©lectronique et smartphones',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '3',
      name: 'Xiaomi',
      categoryId: '1',
      description: 'Fabricant chinois de smartphones et IoT',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '4',
      name: 'Huawei',
      categoryId: '1',
      description: 'Fabricant chinois de t√©l√©communications et smartphones',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '5',
      name: 'OnePlus',
      categoryId: '1',
      description: 'Marque de smartphones premium',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '6',
      name: 'Google',
      categoryId: '1',
      description: 'Fabricant des smartphones Pixel',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '7',
      name: 'Sony',
      categoryId: '1',
      description: 'Fabricant japonais d\'√©lectronique',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '8',
      name: 'LG',
      categoryId: '1',
      description: 'Fabricant cor√©en d\'√©lectronique',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '9',
      name: 'Nokia',
      categoryId: '1',
      description: 'Fabricant finlandais de t√©l√©communications',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '10',
      name: 'Motorola',
      categoryId: '1',
      description: 'Fabricant am√©ricain de t√©l√©communications',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '11',
      name: 'HTC',
      categoryId: '1',
      description: 'Fabricant ta√Øwanais de smartphones',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '12',
      name: 'ASUS',
      categoryId: '1',
      description: 'Fabricant ta√Øwanais d\'√©lectronique',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '13',
      name: 'ZTE',
      categoryId: '1',
      description: 'Fabricant chinois de t√©l√©communications',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '14',
      name: 'OPPO',
      categoryId: '1',
      description: 'Fabricant chinois de smartphones',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '15',
      name: 'Vivo',
      categoryId: '1',
      description: 'Fabricant chinois de smartphones',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '16',
      name: 'Realme',
      categoryId: '1',
      description: 'Marque de smartphones chinoise',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '17',
      name: 'Honor',
      categoryId: '1',
      description: 'Marque de smartphones chinoise',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '18',
      name: 'Nothing',
      categoryId: '1',
      description: 'Marque de smartphones innovante',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '19',
      name: 'Fairphone',
      categoryId: '1',
      description: 'Fabricant de smartphones √©thiques',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '20',
      name: 'Cat',
      categoryId: '1',
      description: 'Smartphones robustes pour professionnels',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    // Tablettes
    {
      id: '21',
      name: 'iPad',
      categoryId: '2',
      description: 'Tablettes Apple',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '22',
      name: 'Samsung Galaxy Tab',
      categoryId: '2',
      description: 'Tablettes Samsung',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '23',
      name: 'Lenovo',
      categoryId: '2',
      description: 'Fabricant chinois d\'ordinateurs et tablettes',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '24',
      name: 'Huawei MediaPad',
      categoryId: '2',
      description: 'Tablettes Huawei',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '25',
      name: 'Xiaomi Mi Pad',
      categoryId: '2',
      description: 'Tablettes Xiaomi',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '26',
      name: 'Amazon',
      categoryId: '2',
      description: 'Fabricant des tablettes Kindle et Fire',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '27',
      name: 'Microsoft',
      categoryId: '2',
      description: 'Fabricant des tablettes Surface',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    // Ordinateurs portables
    {
      id: '28',
      name: 'Dell',
      categoryId: '3',
      description: 'Fabricant am√©ricain d\'ordinateurs',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '29',
      name: 'HP',
      categoryId: '3',
      description: 'Fabricant am√©ricain d\'imprimantes et ordinateurs',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '30',
      name: 'Lenovo',
      categoryId: '3',
      description: 'Fabricant chinois d\'ordinateurs',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '31',
      name: 'Acer',
      categoryId: '3',
      description: 'Fabricant ta√Øwanais d\'ordinateurs',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '32',
      name: 'ASUS',
      categoryId: '3',
      description: 'Fabricant ta√Øwanais d\'ordinateurs',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '33',
      name: 'MSI',
      categoryId: '3',
      description: 'Fabricant ta√Øwanais d\'ordinateurs gaming',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '34',
      name: 'Razer',
      categoryId: '3',
      description: 'Fabricant am√©ricain d\'ordinateurs gaming',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '35',
      name: 'Alienware',
      categoryId: '3',
      description: 'Marque gaming de Dell',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '36',
      name: 'Gigabyte',
      categoryId: '3',
      description: 'Fabricant ta√Øwanais d\'ordinateurs',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '37',
      name: 'Toshiba',
      categoryId: '3',
      description: 'Fabricant japonais d\'√©lectronique',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '38',
      name: 'Fujitsu',
      categoryId: '3',
      description: 'Fabricant japonais d\'informatique',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '39',
      name: 'Sony VAIO',
      categoryId: '3',
      description: 'Ordinateurs portables Sony',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '40',
      name: 'Samsung',
      categoryId: '3',
      description: 'Ordinateurs portables Samsung',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '41',
      name: 'LG',
      categoryId: '3',
      description: 'Ordinateurs portables LG',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '42',
      name: 'Huawei',
      categoryId: '3',
      description: 'Ordinateurs portables Huawei',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '43',
      name: 'Xiaomi',
      categoryId: '3',
      description: 'Ordinateurs portables Xiaomi',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '44',
      name: 'Microsoft',
      categoryId: '3',
      description: 'Fabricant des ordinateurs Surface',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '45',
      name: 'Apple',
      categoryId: '3',
      description: 'Fabricant des MacBook',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    // Ordinateurs fixes
    {
      id: '46',
      name: 'Dell',
      categoryId: '4',
      description: 'Ordinateurs de bureau Dell',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '47',
      name: 'HP',
      categoryId: '4',
      description: 'Ordinateurs de bureau HP',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '48',
      name: 'Lenovo',
      categoryId: '4',
      description: 'Ordinateurs de bureau Lenovo',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '49',
      name: 'Acer',
      categoryId: '4',
      description: 'Ordinateurs de bureau Acer',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '50',
      name: 'ASUS',
      categoryId: '4',
      description: 'Ordinateurs de bureau ASUS',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '51',
      name: 'MSI',
      categoryId: '4',
      description: 'Ordinateurs de bureau gaming MSI',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '52',
      name: 'Alienware',
      categoryId: '4',
      description: 'Ordinateurs de bureau gaming Alienware',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '53',
      name: 'Corsair',
      categoryId: '4',
      description: 'Fabricant am√©ricain de composants gaming',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '54',
      name: 'CyberPowerPC',
      categoryId: '4',
      description: 'Fabricant am√©ricain d\'ordinateurs gaming',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '55',
      name: 'iBUYPOWER',
      categoryId: '4',
      description: 'Fabricant am√©ricain d\'ordinateurs gaming',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '56',
      name: 'Origin PC',
      categoryId: '4',
      description: 'Fabricant am√©ricain d\'ordinateurs gaming',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '57',
      name: 'Falcon Northwest',
      categoryId: '4',
      description: 'Fabricant am√©ricain d\'ordinateurs haut de gamme',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '58',
      name: 'Maingear',
      categoryId: '4',
      description: 'Fabricant am√©ricain d\'ordinateurs gaming',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '59',
      name: 'Digital Storm',
      categoryId: '4',
      description: 'Fabricant am√©ricain d\'ordinateurs gaming',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: '60',
      name: 'Apple',
      categoryId: '4',
      description: 'Fabricant des iMac et Mac Pro',
      logo: '',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
  ];

  // Charger les donn√©es au montage
  useEffect(() => {
    // Les donn√©es sont maintenant g√©r√©es par le store centralis√©
    // Pas besoin de charger ici car elles sont d√©j√† initialis√©es dans le store
  }, []);

  // Initialiser les valeurs par d√©faut des formulaires quand les cat√©gories sont charg√©es
  useEffect(() => {
    if (dbCategories.length > 0) {
      // Initialiser newBrand si categoryId est vide
      if (!newBrand.categoryId) {
        setNewBrand(prev => ({
          ...prev,
          categoryId: dbCategories[0].id
        }));
      }
      
      // Initialiser newModel si categoryId est vide
      if (!newModel.categoryId) {
        setNewModel(prev => ({
          ...prev,
          categoryId: dbCategories[0].id
        }));
      }
    }
  }, [dbCategories]);

  // Liste des ic√¥nes disponibles pour les cat√©gories (ic√¥nes s√ªres et test√©es)
  const availableIcons = [
    { value: 'smartphone', label: 'Smartphone', color: '#2196f3' },
    { value: 'tablet', label: 'Tablette', color: '#9c27b0' },
    { value: 'laptop', label: 'Ordinateur portable', color: '#ff9800' },
    { value: 'desktop', label: 'Ordinateur fixe', color: '#4caf50' },
    { value: 'watch', label: 'Montre connect√©e', color: '#e91e63' },
    { value: 'headphones', label: 'Casque audio', color: '#795548' },
    { value: 'camera', label: 'Appareil photo', color: '#607d8b' },
    { value: 'tv', label: 'T√©l√©vision', color: '#3f51b5' },
    { value: 'speaker', label: 'Haut-parleur', color: '#8bc34a' },
    { value: 'keyboard', label: 'Clavier', color: '#ff5722' },
    { value: 'mouse', label: 'Souris', color: '#9e9e9e' },
    { value: 'router', label: 'Routeur', color: '#00bcd4' },
    { value: 'memory', label: 'M√©moire', color: '#673ab7' },
    { value: 'storage', label: 'Stockage', color: '#ffc107' },
    { value: 'battery', label: 'Batterie', color: '#4caf50' },
    { value: 'wifi', label: 'Wi-Fi', color: '#2196f3' },
    { value: 'bluetooth', label: 'Bluetooth', color: '#3f51b5' },
    { value: 'usb', label: 'USB', color: '#ff9800' },
    { value: 'power', label: 'Alimentation', color: '#f44336' },
    { value: 'security', label: 'S√©curit√©', color: '#e91e63' },
    { value: 'speed', label: 'Performance', color: '#00bcd4' },
    { value: 'sdcard', label: 'Carte SD', color: '#795548' },
    { value: 'simcard', label: 'Carte SIM', color: '#607d8b' },
    { value: 'network', label: 'R√©seau', color: '#3f51b5' },
    { value: 'signal', label: 'Signal', color: '#4caf50' },
    { value: 'gps', label: 'GPS', color: '#2196f3' },
    { value: 'sensors', label: 'Capteurs', color: '#9c27b0' },
    { value: 'flash', label: 'Flash', color: '#ffc107' },
    { value: 'volume', label: 'Volume', color: '#ff9800' },
    { value: 'mic', label: 'Microphone', color: '#795548' },
    { value: 'videocam', label: 'Cam√©ra vid√©o', color: '#e91e63' },
    { value: 'photocamera', label: 'Appareil photo', color: '#607d8b' },
    { value: 'print', label: 'Imprimante', color: '#9e9e9e' },
    { value: 'scanner', label: 'Scanner', color: '#795548' },
    { value: 'fax', label: 'Fax', color: '#607d8b' },
    { value: 'monitor', label: '√âcran', color: '#3f51b5' },
    { value: 'display', label: 'Affichage', color: '#2196f3' },
    { value: 'brightness', label: 'Luminosit√©', color: '#ffc107' },
    { value: 'contrast', label: 'Contraste', color: '#9e9e9e' },
    { value: 'color', label: 'Couleur', color: '#e91e63' },
    { value: 'hdr', label: 'HDR', color: '#ff9800' },
    { value: 'autoawesome', label: 'Auto', color: '#4caf50' },
    { value: 'quality', label: 'Qualit√©', color: '#2196f3' },
    { value: 'surround', label: 'Surround', color: '#3f51b5' },
    { value: 'subscriptions', label: 'Abonnements', color: '#e91e63' },
    { value: 'livetv', label: 'TV en direct', color: '#f44336' },
    { value: 'music', label: 'Musique', color: '#9c27b0' },
    { value: 'radio', label: 'Radio', color: '#ff9800' },
    { value: 'podcasts', label: 'Podcasts', color: '#795548' },
    { value: 'audiotrack', label: 'Piste audio', color: '#607d8b' },
    { value: 'equalizer', label: '√âgaliseur', color: '#3f51b5' },
    { value: 'graphiceq', label: 'Graphic EQ', color: '#2196f3' },
    { value: 'volumeoff', label: 'Volume off', color: '#9e9e9e' },
    { value: 'volumedown', label: 'Volume bas', color: '#ff9800' },
    { value: 'bluetoothaudio', label: 'Audio Bluetooth', color: '#3f51b5' },
    { value: 'airplay', label: 'AirPlay', color: '#2196f3' },
    { value: 'cast', label: 'Cast', color: '#ff5722' },
    { value: 'screenshare', label: 'Partage √©cran', color: '#00bcd4' },
    { value: 'connectedtv', label: 'TV connect√©e', color: '#673ab7' },
    { value: 'smartdisplay', label: '√âcran intelligent', color: '#4caf50' },
    { value: 'videocall', label: 'Appel vid√©o', color: '#e91e63' },
    { value: 'videochat', label: 'Chat vid√©o', color: '#2196f3' },
    { value: 'videosettings', label: 'Param√®tres vid√©o', color: '#3f51b5' },
    { value: 'videostable', label: 'Stabilisation vid√©o', color: '#ff9800' },
    { value: 'videofile', label: 'Fichier vid√©o', color: '#795548' },
    { value: 'videolabel', label: 'Label vid√©o', color: '#607d8b' },
    { value: 'other', label: 'Autre', color: '#757575' },
  ];

  // Fonctions utilitaires
  const getDeviceTypeIcon = (icon: string) => {
    switch (icon) {
      case 'smartphone': return <PhoneIcon />;
      case 'tablet': return <TabletIcon />;
      case 'laptop': return <LaptopIcon />;
      case 'desktop': return <ComputerIcon />;
      case 'watch': return <WatchIcon />;
      case 'headphones': return <HeadphonesIcon />;
      case 'camera': return <CameraIcon />;
      case 'tv': return <TvIcon />;
      case 'speaker': return <SpeakerIcon />;
      case 'keyboard': return <KeyboardIcon />;
      case 'mouse': return <MouseIcon />;
      case 'router': return <RouterIcon />;
      case 'memory': return <MemoryIcon />;
      case 'storage': return <StorageIcon />;
      case 'battery': return <BatteryIcon />;
      case 'wifi': return <WifiIcon />;
      case 'bluetooth': return <BluetoothIcon />;
      case 'usb': return <UsbIcon />;
      case 'power': return <PowerIcon />;
      case 'security': return <SecurityIcon />;
      case 'speed': return <SpeedIcon />;
      case 'sdcard': return <SdCardIcon />;
      case 'simcard': return <SimCardIcon />;
      case 'network': return <NetworkIcon />;
      case 'signal': return <SignalIcon />;
      case 'gps': return <GpsIcon />;
      case 'sensors': return <SensorsIcon />;
      case 'flash': return <FlashIcon />;
      case 'volume': return <VolumeIcon />;
      case 'mic': return <MicIcon />;
      case 'videocam': return <VideocamIcon />;
      case 'photocamera': return <PhotoCameraIcon />;
      case 'print': return <PrintIcon />;
      case 'scanner': return <ScannerIcon />;
      case 'fax': return <FaxIcon />;
      case 'monitor': return <MonitorIcon />;
      case 'display': return <DisplayIcon />;
      case 'brightness': return <BrightnessIcon />;
      case 'contrast': return <ContrastIcon />;
      case 'color': return <ColorIcon />;
      case 'hdr': return <HdrIcon />;
      case 'autoawesome': return <AutoAwesomeIcon />;
      case 'quality': return <QualityIcon />;
      case 'surround': return <SurroundIcon />;
      case 'subscriptions': return <SubscriptionsIcon />;
      case 'livetv': return <LiveTvIcon />;
      case 'music': return <MusicIcon />;
      case 'radio': return <RadioIcon />;
      case 'podcasts': return <PodcastsIcon />;
      case 'audiotrack': return <AudiotrackIcon />;
      case 'equalizer': return <EqualizerIcon />;
      case 'graphiceq': return <GraphicEqIcon />;
      case 'volumeoff': return <VolumeOffIcon />;
      case 'volumedown': return <VolumeDownIcon />;
      case 'bluetoothaudio': return <BluetoothAudioIcon />;
      case 'airplay': return <AirplayIcon />;
      case 'cast': return <CastIcon />;
      case 'screenshare': return <ScreenShareIcon />;
      case 'connectedtv': return <ConnectedTvIcon />;
      case 'smartdisplay': return <SmartDisplayIcon />;
      case 'videocall': return <VideoCallIcon />;
      case 'videochat': return <VideoChatIcon />;
      case 'videosettings': return <VideoSettingsIcon />;
      case 'videostable': return <VideoStableIcon />;
      case 'videofile': return <VideoFileIcon />;
      case 'videolabel': return <VideoLabelIcon />;
      default: return <DeviceHubIcon />;
    }
  };

  const getDeviceTypeColor = (icon: string) => {
    const iconData = availableIcons.find(i => i.value === icon);
    return iconData ? iconData.color : '#757575';
  };

  const getDeviceTypeLabel = (icon: string) => {
    const iconData = availableIcons.find(i => i.value === icon);
    return iconData ? iconData.label : 'Autre';
  };

  const getDifficultyColor = (difficulty: string): 'success' | 'warning' | 'error' | 'default' => {
    const colors: Record<string, 'success' | 'warning' | 'error'> = {
      easy: 'success',
      medium: 'warning',
      hard: 'error',
    };
    return colors[difficulty] || 'default';
  };

  const getAvailabilityColor = (availability: string): 'success' | 'warning' | 'error' | 'default' => {
    const colors: Record<string, 'success' | 'warning' | 'error'> = {
      high: 'success',
      medium: 'warning',
      low: 'error',
    };
    return colors[availability] || 'default';
  };



  // Fonctions pour les cat√©gories
  const handleCreateCategory = async () => {
    try {
      const result = await categoryService.create({
        name: newCategory.name,
        description: newCategory.description,
        icon: newCategory.icon,
        is_active: newCategory.isActive,
      });

      if (result.success && result.data) {
        console.log('‚úÖ Cat√©gorie cr√©√©e avec succ√®s:', result.data);
        
        // Recharger les cat√©gories depuis la base de donn√©es
        const categoriesResult = await categoryService.getAll();
        if (categoriesResult.success && categoriesResult.data) {
          setDbCategories(categoriesResult.data);
          console.log('‚úÖ Cat√©gories recharg√©es:', categoriesResult.data.length);
        } else {
          console.error('‚ùå Erreur lors du rechargement des cat√©gories:', categoriesResult.error);
        }
        
        setCategoryDialogOpen(false);
        resetCategoryForm();
      } else {
        console.error('‚ùå Erreur lors de la cr√©ation de la cat√©gorie:', result.error);
        setCategoriesError(result.error || 'Erreur lors de la cr√©ation de la cat√©gorie');
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation de la cat√©gorie:', error);
      setCategoriesError('Erreur lors de la cr√©ation de la cat√©gorie');
    }
  };

  const handleUpdateCategory = async () => {
    if (selectedCategory) {
      try {
        const result = await categoryService.update(selectedCategory.id, {
          name: newCategory.name,
          description: newCategory.description,
          icon: newCategory.icon,
          color: '#1976d2',
          is_active: newCategory.isActive,
        });

        if (result.success && result.data) {
          console.log('‚úÖ Cat√©gorie mise √† jour avec succ√®s:', result.data);
          
          // Recharger les cat√©gories depuis la base de donn√©es
          const categoriesResult = await categoryService.getAll();
          if (categoriesResult.success && categoriesResult.data) {
            setDbCategories(categoriesResult.data);
            console.log('‚úÖ Cat√©gories recharg√©es apr√®s mise √† jour:', categoriesResult.data.length);
          }
          
          setCategoryDialogOpen(false);
          setSelectedCategory(null);
          resetCategoryForm();
        } else {
          console.error('‚ùå Erreur lors de la mise √† jour de la cat√©gorie:', result.error);
          setCategoriesError(result.error || 'Erreur lors de la mise √† jour de la cat√©gorie');
        }
      } catch (error) {
        console.error('‚ùå Erreur lors de la mise √† jour de la cat√©gorie:', error);
        setCategoriesError('Erreur lors de la mise √† jour de la cat√©gorie');
      }
    }
  };

  const resetCategoryForm = () => {
    setNewCategory({
      name: '',
      description: '',
      icon: 'smartphone',
      isActive: true,
    });
  };

  const openCategoryEditDialog = (category: DeviceCategory) => {
    setSelectedCategory(category);
    setNewCategory({
      name: category.name,
      description: category.description,
      icon: category.icon,
      isActive: category.isActive,
    });
    setCategoryDialogOpen(true);
  };

  // Fonctions pour les marques
  const handleCreateBrand = async () => {
    try {
      const result = await brandService.create({
        name: newBrand.name,
        categoryIds: newBrand.categoryIds, // Utiliser le tableau de cat√©gories
        description: newBrand.description,
        logo: newBrand.logo,
        isActive: newBrand.isActive,
      });

      if (result.success && result.data) {
        console.log('‚úÖ Marque cr√©√©e avec succ√®s:', result.data);
        console.log('üìã Cat√©gories associ√©es:', result.data.categories?.map(c => c.name));
        
        // Recharger les marques depuis la base de donn√©es
        const brandsResult = await brandService.getAll();
        if (brandsResult.success && brandsResult.data) {
          setDbBrands(brandsResult.data);
          console.log('‚úÖ Marques recharg√©es:', brandsResult.data.length);
        }
        
        setBrandDialogOpen(false);
        resetBrandForm();
      } else {
        console.error('‚ùå Erreur lors de la cr√©ation de la marque:', result.error);
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation de la marque:', error);
    }
  };

  const handleUpdateBrand = async () => {
    console.log('üîß handleUpdateBrand appel√©');
    console.log('üìã selectedBrand:', selectedBrand);
    console.log('üìã newBrand:', newBrand);
    
    if (selectedBrand) {
      // V√©rifier si c'est une marque hardcod√©e (ID non-UUID)
      const isHardcodedBrand = !selectedBrand.id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i);
      
      if (isHardcodedBrand) {
        console.log('‚ö†Ô∏è Modification de cat√©gories pour une marque hardcod√©e:', selectedBrand.id);
        
        // Pour les marques hardcod√©es, on permet seulement la modification des cat√©gories
        // via la cr√©ation d'entr√©es dans la table brand_categories
        
        // V√©rifier si le script SQL a √©t√© ex√©cut√© (si la fonction RPC existe)
        try {
          const testResult = await supabase.rpc('update_brand_categories', {
            p_brand_id: selectedBrand.id,
            p_category_ids: []
          });
          
          // Si √ßa fonctionne, on peut modifier les cat√©gories
          console.log('‚úÖ Syst√®me many-to-many disponible, modification des cat√©gories autoris√©e');
        } catch (error) {
          console.log('‚ö†Ô∏è Syst√®me many-to-many non disponible, fallback vers l\'ancien syst√®me');
          
          // Fallback : modifier seulement le champ category_id avec la premi√®re cat√©gorie
          if (newBrand.categoryIds.length > 0) {
            try {
              // Utiliser le service brandService pour la mise √† jour
              const updateData = {
                categoryId: newBrand.categoryIds[0] // Utiliser le premier ID de cat√©gorie
              };
              
              const result = await brandService.update(selectedBrand.id, updateData);
              
              if (result.success) {
                console.log('‚úÖ Cat√©gorie mise √† jour avec succ√®s');
                alert('Cat√©gorie mise √† jour avec succ√®s !');
                
                // Recharger les marques
                const brandsResult = await brandService.getAll();
                if (brandsResult.success && brandsResult.data) {
                  setDbBrands(brandsResult.data);
                }
                
                setBrandDialogOpen(false);
                setSelectedBrand(null);
                resetBrandForm();
                return;
              } else {
                console.error('‚ùå Erreur lors de la mise √† jour de la cat√©gorie:', result.error);
                alert('Erreur lors de la mise √† jour de la cat√©gorie: ' + result.error);
                return;
              }
            } catch (error) {
              console.error('‚ùå Erreur lors de la mise √† jour:', error);
              alert('Erreur lors de la mise √† jour: ' + error);
              return;
            }
          } else {
            alert('Veuillez s√©lectionner au moins une cat√©gorie.');
            return;
          }
        }
      }
      
      try {
        console.log('üöÄ D√©but de la mise √† jour de la marque:', selectedBrand.id);
        
        const updateData = {
          name: newBrand.name,
          categoryIds: newBrand.categoryIds, // Utiliser le tableau de cat√©gories
          description: newBrand.description,
          logo: newBrand.logo,
          isActive: newBrand.isActive,
        };
        
        console.log('üì§ Donn√©es √† envoyer:', updateData);
        
        const result = await brandService.update(selectedBrand.id, updateData);
        
        console.log('üì• R√©sultat de la mise √† jour:', result);

        if (result.success && result.data) {
          console.log('‚úÖ Marque mise √† jour avec succ√®s:', result.data);
          console.log('üìã Cat√©gories associ√©es:', result.data.categories?.map(c => c.name));
          
          // Recharger les marques depuis la base de donn√©es
          const brandsResult = await brandService.getAll();
          if (brandsResult.success && brandsResult.data) {
            setDbBrands(brandsResult.data);
            console.log('‚úÖ Marques recharg√©es apr√®s mise √† jour:', brandsResult.data.length);
          }
          
          setBrandDialogOpen(false);
          setSelectedBrand(null);
          resetBrandForm();
        } else {
          console.error('‚ùå Erreur lors de la mise √† jour de la marque:', result.error);
          alert('Erreur lors de la mise √† jour: ' + (result.error || 'Erreur inconnue'));
        }
      } catch (error) {
        console.error('‚ùå Erreur lors de la mise √† jour de la marque:', error);
        alert('Erreur lors de la mise √† jour: ' + error);
      }
    } else {
      console.error('‚ùå Aucune marque s√©lectionn√©e pour la mise √† jour');
      alert('Aucune marque s√©lectionn√©e');
    }
  };

  const resetBrandForm = () => {
    setNewBrand({
      name: '',
      categoryIds: [], // R√©initialiser le tableau de cat√©gories
      description: '',
      logo: '',
      isActive: true,
    });
  };

  const openBrandEditDialog = (brand: DeviceBrand) => {
    console.log('üîß openBrandEditDialog appel√© avec:', brand);
    
    setSelectedBrand(brand);
    
    // D√©terminer les cat√©gories √† afficher
    let categoryIds: string[] = [];
    if (brand.categoryIds && brand.categoryIds.length > 0) {
      categoryIds = brand.categoryIds;
      console.log('üìã Utilisation des categoryIds:', categoryIds);
    } else if (brand.categoryId) {
      categoryIds = [brand.categoryId];
      console.log('üìã Utilisation du categoryId (fallback):', categoryIds);
    } else {
      console.log('‚ö†Ô∏è Aucune cat√©gorie trouv√©e pour cette marque');
    }
    
    const formData = {
      name: brand.name,
      categoryIds: categoryIds,
      description: brand.description || '',
      logo: brand.logo || '',
      isActive: brand.isActive,
    };
    
    console.log('üìù Donn√©es du formulaire:', formData);
    
    setNewBrand(formData);
    setBrandDialogOpen(true);
  };

  // Fonctions pour les mod√®les
  const handleCreateModel = async () => {
    try {
      // Trouver le nom de la marque √† partir de l'ID
      const selectedBrand = allBrands.find(brand => brand.id === newModel.brandId);
      const brandName = selectedBrand ? selectedBrand.name : newModel.brandId;
      
      // Trouver le nom de la cat√©gorie √† partir de l'ID
      const selectedCategory = defaultCategories.find(cat => cat.id === newModel.categoryId);
      const categoryType = selectedCategory ? selectedCategory.name.toLowerCase() : 'smartphone';
      
      const modelData = {
        brand: brandName,
        model: newModel.name, // Le champ 'name' du formulaire correspond au 'model' de la base
        type: categoryType as any,
        year: newModel.year,
        specifications: newModel.specifications,
        commonIssues: newModel.commonIssues.filter(issue => issue.trim() !== ''),
        repairDifficulty: newModel.repairDifficulty,
        partsAvailability: newModel.partsAvailability,
        isActive: newModel.isActive,
      };

      console.log('üì§ Cr√©ation du mod√®le avec les donn√©es:', modelData);
      
      const result = await addDeviceModel(modelData);
      console.log('‚úÖ Mod√®le cr√©√© avec succ√®s');
      
      setModelDialogOpen(false);
      resetModelForm();
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation du mod√®le:', error);
    }
  };

  const handleUpdateModel = async () => {
    if (selectedModel) {
      try {
        // Trouver le nom de la marque √† partir de l'ID
        const selectedBrand = allBrands.find(brand => brand.id === newModel.brandId);
        const brandName = selectedBrand ? selectedBrand.name : newModel.brandId;
        
        // Trouver le nom de la cat√©gorie √† partir de l'ID
        const selectedCategory = defaultCategories.find(cat => cat.id === newModel.categoryId);
        const categoryType = selectedCategory ? selectedCategory.name.toLowerCase() : 'smartphone';
        
        const updateData = {
          brand: brandName,
          model: newModel.name, // Le champ 'name' du formulaire correspond au 'model' de la base
          type: categoryType as any,
          year: newModel.year,
          specifications: newModel.specifications,
          commonIssues: newModel.commonIssues.filter((issue: string) => issue.trim() !== ''),
          repairDifficulty: newModel.repairDifficulty,
          partsAvailability: newModel.partsAvailability,
          isActive: newModel.isActive,
        };

        console.log('üì§ Mise √† jour du mod√®le avec les donn√©es:', updateData);
        
        await updateDeviceModel(selectedModel.id, updateData);
        console.log('‚úÖ Mod√®le mis √† jour avec succ√®s');
        
        setModelDialogOpen(false);
        setSelectedModel(null);
        resetModelForm();
      } catch (error) {
        console.error('‚ùå Erreur lors de la mise √† jour du mod√®le:', error);
      }
    }
  };

  const resetModelForm = () => {
    setNewModel({
      name: '', // Le champ 'name' du formulaire
      brand: '',
      brandId: '',
      categoryId: dbCategories.length > 0 ? dbCategories[0].id : '',
      type: 'smartphone',
      year: new Date().getFullYear(),
      specifications: {},
      commonIssues: [''],
      repairDifficulty: 'medium',
      partsAvailability: 'medium',
      isActive: true,
    });
  };

  const openModelEditDialog = (model: DeviceModel) => {
    setSelectedModel(model);
    
    // Trouver l'ID de la marque √† partir du nom
    const brandId = allBrands.find(brand => brand.name === model.brand)?.id || '';
    
    // Trouver l'ID de la cat√©gorie √† partir du type
    const categoryId = defaultCategories.find(cat => cat.name.toLowerCase() === model.type)?.id || '';
    
    setNewModel({
      name: model.model, // Le champ 'model' de la base correspond au 'name' du formulaire
      brand: model.brand,
      brandId: brandId,
      categoryId: categoryId,
      type: model.type,
      year: model.year,
      specifications: model.specifications,
      commonIssues: [...model.commonIssues],
      repairDifficulty: model.repairDifficulty,
      partsAvailability: model.partsAvailability,
      isActive: model.isActive,
    });
    setModelDialogOpen(true);
  };



  // Fonction de suppression g√©n√©rique
  const handleDelete = async () => {
    if (itemToDelete) {
      try {
        switch (deleteType) {
          case 'category':
            const result = await categoryService.delete(itemToDelete.id);
            if (result.success) {
              console.log('‚úÖ Cat√©gorie supprim√©e avec succ√®s');
              
              // Recharger les cat√©gories depuis la base de donn√©es
              const categoriesResult = await categoryService.getAll();
              if (categoriesResult.success && categoriesResult.data) {
                setDbCategories(categoriesResult.data);
                console.log('‚úÖ Cat√©gories recharg√©es apr√®s suppression:', categoriesResult.data.length);
              }
            } else {
              console.error('‚ùå Erreur lors de la suppression de la cat√©gorie:', result.error);
              setCategoriesError(result.error || 'Erreur lors de la suppression de la cat√©gorie');
            }
            break;
          case 'brand':
            // V√©rifier si c'est une marque hardcod√©e (ID non-UUID)
            const isHardcodedBrand = !itemToDelete.id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i);
            
            if (isHardcodedBrand) {
              console.log('‚ö†Ô∏è Tentative de suppression d\'une marque hardcod√©e:', itemToDelete.id);
              alert('Impossible de supprimer les marques pr√©d√©finies.');
              setDeleteDialogOpen(false);
              setItemToDelete(null);
              setDeleteType(null);
              return;
            }
            
            try {
              const result = await brandService.delete(itemToDelete.id);
              if (result.success) {
                console.log('‚úÖ Marque supprim√©e avec succ√®s');
                
                // Recharger les marques depuis la base de donn√©es
                const brandsResult = await brandService.getAll();
                if (brandsResult.success && brandsResult.data) {
                  setDbBrands(brandsResult.data);
                  console.log('‚úÖ Marques recharg√©es apr√®s suppression:', brandsResult.data.length);
                }
              } else {
                console.error('‚ùå Erreur lors de la suppression de la marque:', result.error);
                alert('Erreur lors de la suppression: ' + (result.error || 'Erreur inconnue'));
              }
            } catch (error) {
              console.error('‚ùå Erreur lors de la suppression de la marque:', error);
              alert('Erreur lors de la suppression: ' + error);
            }
            break;
          case 'model':
            deleteDeviceModel(itemToDelete.id);
            break;
        }
        setDeleteDialogOpen(false);
        setItemToDelete(null);
      } catch (error) {
        console.error('‚ùå Erreur lors de la suppression:', error);
        setCategoriesError('Erreur lors de la suppression');
      }
    }
  };

  const openDeleteDialog = (item: any, type: 'category' | 'brand' | 'model') => {
    setItemToDelete(item);
    setDeleteType(type);
    setDeleteDialogOpen(true);
  };

  // Filtrage des donn√©es
  const filteredCategories = defaultCategories.filter(cat =>
    cat.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  // Combiner les marques de la base de donn√©es avec les marques hardcod√©es (fallback)
  // Mais d'abord, corriger les categoryId des marques hardcod√©es pour qu'ils correspondent aux cat√©gories existantes
  const correctedDefaultBrands = defaultBrands.map(brand => {
    // Mapper les anciens IDs vers les nouveaux UUIDs des cat√©gories
    let correctedCategoryId = brand.categoryId;
    let categories: DeviceCategory[] = [];
    
    if (defaultCategories.length > 0) {
      // Mapping bas√© sur l'ordre des cat√©gories (smartphone=0, tablet=1, laptop=2, desktop=3, etc.)
      const categoryMapping: { [key: string]: number } = {
        '1': 0, // Smartphone
        '2': 1, // Tablette  
        '3': 2, // Ordinateur portable
        '4': 3, // Ordinateur fixe
        '5': 4, // Autre
      };
      
      const categoryIndex = categoryMapping[brand.categoryId] || 0;
      if (defaultCategories[categoryIndex]) {
        correctedCategoryId = defaultCategories[categoryIndex].id;
        categories = [defaultCategories[categoryIndex]]; // Pour le nouveau syst√®me
      } else {
        correctedCategoryId = defaultCategories[0].id; // Fallback vers la premi√®re cat√©gorie
        categories = [defaultCategories[0]];
      }
    }
    
    return {
      ...brand,
      categoryId: correctedCategoryId,
      categoryIds: categories.map(cat => cat.id),
      categories: categories
    };
  });

  const allBrands = [...dbBrands, ...correctedDefaultBrands.filter(brand => 
    !dbBrands.some(dbBrand => dbBrand.name === brand.name)
  )];

  const filteredBrands = allBrands.filter(brand => {
    const matchesSearch = brand.name.toLowerCase().includes(searchQuery.toLowerCase());
    
    // V√©rifier si la marque appartient √† la cat√©gorie s√©lectionn√©e
    let matchesCategory = true;
    if (selectedCategoryForBrands !== 'all') {
      if (brand.categories && brand.categories.length > 0) {
        // Nouveau syst√®me : v√©rifier si une des cat√©gories correspond
        matchesCategory = brand.categories.some(cat => cat.id === selectedCategoryForBrands);
      } else {
        // Ancien syst√®me : v√©rifier l'ancien categoryId
        matchesCategory = brand.categoryId === selectedCategoryForBrands;
      }
    }
    
    return matchesSearch && matchesCategory;
  });

  const filteredModels = deviceModels.filter(model => {
    const modelName = (model as any).name || (model as any).model || 'N/A';
    return modelName.toLowerCase().includes(searchQuery.toLowerCase());
  });



  // Fonction pour obtenir les informations d'un mod√®le
  const getModelInfo = (modelId: string) => {
    const model = deviceModels.find(m => m.id === modelId);
    if (!model) return { name: 'N/A', brand: 'N/A', category: 'N/A' };
    
    // Utiliser la nouvelle structure des mod√®les
    const modelName = (model as any).name || (model as any).model || 'N/A';
    const brandName = (model as any).brand || 'N/A';
    const categoryName = (model as any).type || 'N/A';
    
    return {
      name: modelName,
      brand: brandName,
      category: categoryName,
    };
  };

  return (
    <Box>
      {/* En-t√™te */}
      <Box sx={{ mb: 4 }}>
        <Typography variant="h4" gutterBottom sx={{ fontWeight: 600 }}>
          Gestion des Appareils et Mod√®les
        </Typography>
        <Typography variant="body1" color="text.secondary">
          Gestion centralis√©e des cat√©gories, marques, mod√®les et instances d'appareils
        </Typography>
      </Box>

      {/* Onglets principaux */}
      <Card sx={{ mb: 3 }}>
        <Tabs 
          value={mainTab} 
          onChange={(e, newValue) => setMainTab(newValue)}
          sx={{ borderBottom: 1, borderColor: 'divider' }}
        >
          <Tab 
            icon={<CategoryIcon />} 
            label="Cat√©gories" 
            iconPosition="start"
          />
          <Tab 
            icon={<BrandingIcon />} 
            label="Marques" 
            iconPosition="start"
          />
          <Tab 
            icon={<ModelIcon />} 
            label="Mod√®les" 
            iconPosition="start"
          />

        </Tabs>
      </Card>

      {/* Barre de recherche et filtres */}
      <Box sx={{ mb: 3, display: 'flex', gap: 2, alignItems: 'center' }}>
        <TextField
          placeholder="Rechercher..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          InputProps={{
            startAdornment: <SearchIcon sx={{ mr: 1, color: 'text.secondary' }} />,
          }}
          sx={{ flexGrow: 1 }}
        />
        
        {mainTab === 1 && (
          <FormControl sx={{ minWidth: 200 }}>
            <InputLabel>Filtrer par cat√©gorie</InputLabel>
            <Select
              value={selectedCategoryForBrands}
              label="Filtrer par cat√©gorie"
              onChange={(e) => setSelectedCategoryForBrands(e.target.value)}
            >
              <MenuItem value="all">Toutes les cat√©gories</MenuItem>
              {deviceCategories.map((category) => (
                <MenuItem key={category.id} value={category.id}>
                  {category.name}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        )}
        

        
        <Button
          variant="contained"
          startIcon={<AddIcon />}
          onClick={() => {
            switch (mainTab) {
              case 0:
                setCategoryDialogOpen(true);
                break;
              case 1:
                setBrandDialogOpen(true);
                break;
              case 2:
                setModelDialogOpen(true);
                break;
            }
          }}
        >
          Ajouter
        </Button>
      </Box>

      {/* Contenu des onglets */}
      {mainTab === 0 && (
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              Cat√©gories d'Appareils ({filteredCategories.length})
            </Typography>
            <Grid container spacing={2}>
              {filteredCategories.map((category) => (
                <Grid item xs={12} sm={6} md={4} key={category.id}>
                  <Card variant="outlined">
                    <CardContent>
                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                        <Avatar
                          sx={{
                            bgcolor: getDeviceTypeColor(category.icon),
                            mr: 2,
                            width: 48,
                            height: 48,
                          }}
                        >
                          {getDeviceTypeIcon(category.icon)}
                        </Avatar>
                        <Box sx={{ flexGrow: 1 }}>
                          <Typography variant="h6">{category.name}</Typography>
                          <Typography variant="body2" color="text.secondary">
                            {category.description}
                          </Typography>
                          <Chip
                            label={getDeviceTypeLabel(category.icon)}
                            size="small"
                            sx={{ 
                              mt: 0.5,
                              bgcolor: getDeviceTypeColor(category.icon),
                              color: 'white',
                              fontSize: '0.7rem'
                            }}
                          />
                        </Box>
                      </Box>
                      <Box sx={{ display: 'flex', gap: 1 }}>
                        <Button
                          size="small"
                          startIcon={<EditIcon />}
                          onClick={() => openCategoryEditDialog(category)}
                        >
                          Modifier
                        </Button>
                        <Button
                          size="small"
                          color="error"
                          startIcon={<DeleteIcon />}
                          onClick={() => openDeleteDialog(category, 'category')}
                        >
                          Supprimer
                        </Button>
                      </Box>
                    </CardContent>
                  </Card>
                </Grid>
              ))}
            </Grid>
          </CardContent>
        </Card>
      )}

      {mainTab === 1 && (
        <Card>
          <CardContent>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
              <Typography variant="h6">
                Marques ({filteredBrands.length})
              </Typography>
              <Box sx={{ display: 'flex', gap: 1 }}>
                {defaultCategories.map((category) => {
                  const brandCount = allBrands.filter(brand => {
                    if (brand.categories && brand.categories.length > 0) {
                      // Nouveau syst√®me : v√©rifier si une des cat√©gories correspond
                      return brand.categories.some(cat => cat.id === category.id);
                    } else {
                      // Ancien syst√®me : v√©rifier l'ancien categoryId
                      return brand.categoryId === category.id;
                    }
                  }).length;
                  return (
                    <Chip
                      key={category.id}
                      label={`${category.name}: ${brandCount}`}
                      size="small"
                      color={selectedCategoryForBrands === category.id ? 'primary' : 'default'}
                      onClick={() => setSelectedCategoryForBrands(
                        selectedCategoryForBrands === category.id ? 'all' : category.id
                      )}
                      sx={{ cursor: 'pointer' }}
                    />
                  );
                })}
              </Box>
            </Box>
            <TableContainer component={Paper} variant="outlined">
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Marque</TableCell>
                    <TableCell>Cat√©gorie</TableCell>
                    <TableCell>Description</TableCell>
                    <TableCell>Mod√®les</TableCell>
                    <TableCell>Actions</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {filteredBrands.map((brand) => {
                    const category = defaultCategories.find(cat => cat.id === brand.categoryId);
                    const modelCount = deviceModels.filter(model => (model as any).brand === brand.name).length;
                    
                    console.log('üîç Debug marque:', {
                      brandName: brand.name,
                      brandCategoryId: brand.categoryId,
                      foundCategory: category?.name || 'NON TROUV√âE',
                      availableCategories: defaultCategories.map(c => ({ id: c.id, name: c.name }))
                    });
                    return (
                      <TableRow key={brand.id} hover>
                        <TableCell>
                          <Typography variant="subtitle2" sx={{ fontWeight: 600 }}>
                            {brand.name}
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Box sx={{ display: 'flex', gap: 0.5, flexWrap: 'wrap' }}>
                            {brand.categories && brand.categories.length > 0 ? (
                              brand.categories.map((cat, index) => (
                                <Chip
                                  key={cat.id || index}
                                  label={cat.name}
                                  size="small"
                                  sx={{
                                    bgcolor: getDeviceTypeColor(cat.icon),
                                    color: 'white',
                                    fontSize: '0.7rem'
                                  }}
                                />
                              ))
                            ) : (
                              <Chip
                                label="N/A"
                                size="small"
                                sx={{
                                  bgcolor: '#9e9e9e',
                                  color: 'white',
                                  fontSize: '0.7rem'
                                }}
                              />
                            )}
                          </Box>
                        </TableCell>
                        <TableCell>
                          <Typography variant="body2" color="text.secondary">
                            {brand.description}
                          </Typography>
                        </TableCell>
                        <TableCell>
                          <Chip
                            label={modelCount}
                            size="small"
                            color={modelCount > 0 ? 'success' : 'default'}
                            variant={modelCount > 0 ? 'filled' : 'outlined'}
                          />
                        </TableCell>
                        <TableCell>
                          <Box sx={{ display: 'flex', gap: 1 }}>
                            <IconButton
                              size="small"
                              onClick={() => openBrandEditDialog(brand)}
                            >
                              <EditIcon />
                            </IconButton>
                            <IconButton
                              size="small"
                              color="error"
                              onClick={() => openDeleteDialog(brand, 'brand')}
                            >
                              <DeleteIcon />
                            </IconButton>
                          </Box>
                        </TableCell>
                      </TableRow>
                    );
                  })}
                </TableBody>
              </Table>
            </TableContainer>
          </CardContent>
        </Card>
      )}

      {mainTab === 2 && (
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              Mod√®les ({filteredModels.length})
            </Typography>
            <TableContainer component={Paper} variant="outlined">
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Mod√®le</TableCell>
                    <TableCell>Marque</TableCell>
                    <TableCell>Cat√©gorie</TableCell>
                    <TableCell>Ann√©e</TableCell>
                    <TableCell>Difficult√©</TableCell>
                    <TableCell>Pi√®ces</TableCell>
                    <TableCell>Actions</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {filteredModels.map((model) => (
                    <TableRow key={model.id} hover>
                      <TableCell>
                        <Typography variant="subtitle2" sx={{ fontWeight: 600 }}>
                          {(model as any).name || (model as any).model || 'N/A'}
                        </Typography>
                      </TableCell>
                      <TableCell>
                        {(model as any).brand || 'N/A'}
                      </TableCell>
                      <TableCell>
                        {(model as any).type || 'N/A'}
                      </TableCell>
                      <TableCell>{model.year}</TableCell>
                      <TableCell>
                        <Chip
                          label={model.repairDifficulty}
                          size="small"
                          color={getDifficultyColor(model.repairDifficulty)}
                        />
                      </TableCell>
                      <TableCell>
                        <Chip
                          label={model.partsAvailability}
                          size="small"
                          color={getAvailabilityColor(model.partsAvailability)}
                        />
                      </TableCell>
                      <TableCell>
                        <Box sx={{ display: 'flex', gap: 1 }}>
                          <IconButton
                            size="small"
                            onClick={() => openModelEditDialog(model)}
                          >
                            <EditIcon />
                          </IconButton>
                          <IconButton
                            size="small"
                            color="error"
                            onClick={() => openDeleteDialog(model, 'model')}
                          >
                            <DeleteIcon />
                          </IconButton>
                        </Box>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </CardContent>
        </Card>
      )}



      {/* Dialog pour les cat√©gories */}
      <Dialog open={categoryDialogOpen} onClose={() => setCategoryDialogOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>
          {selectedCategory ? 'Modifier la cat√©gorie' : 'Cr√©er une nouvelle cat√©gorie'}
        </DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Nom de la cat√©gorie *"
                value={newCategory.name}
                onChange={(e) => setNewCategory(prev => ({ ...prev, name: e.target.value }))}
                required
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Description"
                multiline
                rows={3}
                value={newCategory.description}
                onChange={(e) => setNewCategory(prev => ({ ...prev, description: e.target.value }))}
              />
            </Grid>

            <Grid item xs={12}>
              <Typography variant="subtitle2" gutterBottom>
                S√©lectionner une ic√¥ne pour la cat√©gorie
              </Typography>
              <Box sx={{ 
                display: 'grid', 
                gridTemplateColumns: 'repeat(auto-fill, minmax(120px, 1fr))', 
                gap: 1,
                maxHeight: 300,
                overflowY: 'auto',
                border: 1,
                borderColor: 'divider',
                borderRadius: 1,
                p: 1
              }}>
                {availableIcons.map((iconData) => (
                  <Box
                    key={iconData.value}
                    onClick={() => setNewCategory(prev => ({ ...prev, icon: iconData.value }))}
                    sx={{
                      display: 'flex',
                      flexDirection: 'column',
                      alignItems: 'center',
                      p: 1,
                      borderRadius: 1,
                      cursor: 'pointer',
                      border: newCategory.icon === iconData.value ? 2 : 1,
                      borderColor: newCategory.icon === iconData.value ? 'primary.main' : 'divider',
                      bgcolor: newCategory.icon === iconData.value ? 'primary.50' : 'transparent',
                      '&:hover': {
                        bgcolor: 'action.hover',
                      },
                      transition: 'all 0.2s',
                    }}
                  >
                    <Avatar sx={{ bgcolor: iconData.color, width: 40, height: 40, mb: 1 }}>
                      {getDeviceTypeIcon(iconData.value)}
                    </Avatar>
                    <Typography variant="caption" textAlign="center" sx={{ fontSize: '0.7rem' }}>
                      {iconData.label}
                    </Typography>
                  </Box>
                ))}
              </Box>
              <Typography variant="caption" color="text.secondary" sx={{ mt: 1, display: 'block' }}>
                Ic√¥ne s√©lectionn√©e : {getDeviceTypeLabel(newCategory.icon)}
              </Typography>
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setCategoryDialogOpen(false)}>
            Annuler
          </Button>
          <Button 
            variant="contained" 
            onClick={selectedCategory ? handleUpdateCategory : handleCreateCategory}
            disabled={!newCategory.name}
          >
            {selectedCategory ? 'Modifier' : 'Cr√©er'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Dialog pour les marques */}
      <Dialog open={brandDialogOpen} onClose={() => setBrandDialogOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>
          {selectedBrand ? 
            (selectedBrand.id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i) ? 
              'Modifier la marque' : 
              'Modifier les cat√©gories de la marque pr√©d√©finie'
            ) : 
            'Cr√©er une nouvelle marque'
          }
        </DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Nom de la marque *"
                value={newBrand.name}
                onChange={(e) => setNewBrand(prev => ({ ...prev, name: e.target.value }))}
                required
                disabled={selectedBrand && !selectedBrand.id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)}
                helperText={selectedBrand && !selectedBrand.id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i) ? "Marque pr√©d√©finie - nom non modifiable" : ""}
              />
            </Grid>
            <Grid item xs={12}>
              <FormControl fullWidth>
                <InputLabel>Cat√©gories *</InputLabel>
                <Select
                  multiple
                  value={newBrand.categoryIds}
                  label="Cat√©gories *"
                  onChange={(e) => setNewBrand(prev => ({ 
                    ...prev, 
                    categoryIds: typeof e.target.value === 'string' ? e.target.value.split(',') : e.target.value
                  }))}
                  required
                  renderValue={(selected) => (
                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                      {(selected as string[]).map((value) => {
                        const category = defaultCategories.find(cat => cat.id === value);
                        return (
                          <Chip
                            key={value}
                            label={category?.name || value}
                            size="small"
                            sx={{
                              bgcolor: getDeviceTypeColor(category?.icon || 'other'),
                              color: 'white',
                              fontSize: '0.7rem'
                            }}
                          />
                        );
                      })}
                    </Box>
                  )}
                >
                  {defaultCategories.map((category) => (
                    <MenuItem key={category.id} value={category.id}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Avatar sx={{ 
                          bgcolor: getDeviceTypeColor(category.icon), 
                          width: 24, 
                          height: 24 
                        }}>
                          {getDeviceTypeIcon(category.icon)}
                        </Avatar>
                        {category.name}
                      </Box>
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Description"
                multiline
                rows={3}
                value={newBrand.description}
                onChange={(e) => setNewBrand(prev => ({ ...prev, description: e.target.value }))}
                disabled={selectedBrand && !selectedBrand.id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)}
                helperText={selectedBrand && !selectedBrand.id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i) ? "Marque pr√©d√©finie - description non modifiable" : ""}
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setBrandDialogOpen(false)}>
            Annuler
          </Button>
          <Button 
            variant="contained" 
            onClick={selectedBrand ? handleUpdateBrand : handleCreateBrand}
            disabled={!newBrand.name || newBrand.categoryIds.length === 0}
          >
            {selectedBrand ? 'Modifier' : 'Cr√©er'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Dialog pour les mod√®les */}
      <Dialog open={modelDialogOpen} onClose={() => setModelDialogOpen(false)} maxWidth="md" fullWidth>
        <DialogTitle>
          {selectedModel ? 'Modifier le mod√®le' : 'Cr√©er un nouveau mod√®le'}
        </DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Nom du mod√®le *"
                value={newModel.name}
                onChange={(e) => setNewModel((prev: any) => ({ ...prev, name: e.target.value }))}
                required
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel>Marque *</InputLabel>
                <Select
                  value={newModel.brandId}
                  label="Marque *"
                  onChange={(e) => setNewModel((prev: any) => ({ ...prev, brandId: e.target.value }))}
                  required
                >
                  {allBrands.map((brand) => (
                    <MenuItem key={brand.id} value={brand.id}>
                      {brand.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} md={6}>
                              <FormControl fullWidth>
                <InputLabel>Cat√©gorie *</InputLabel>
                <Select
                  value={newModel.categoryId}
                  label="Cat√©gorie *"
                  onChange={(e) => setNewModel(prev => ({ ...prev, categoryId: e.target.value }))}
                  required
                >
                  {defaultCategories.map((category) => (
                    <MenuItem key={category.id} value={category.id}>
                      {category.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Ann√©e"
                type="number"
                value={newModel.year}
                onChange={(e) => setNewModel(prev => ({ ...prev, year: parseInt(e.target.value) }))}
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel>Difficult√© de r√©paration</InputLabel>
                <Select
                  value={newModel.repairDifficulty}
                  onChange={(e) => setNewModel(prev => ({ ...prev, repairDifficulty: e.target.value as any }))}
                  label="Difficult√© de r√©paration"
                >
                  <MenuItem value="easy">Facile</MenuItem>
                  <MenuItem value="medium">Moyenne</MenuItem>
                  <MenuItem value="hard">Difficile</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel>Disponibilit√© des pi√®ces</InputLabel>
                <Select
                  value={newModel.partsAvailability}
                  onChange={(e) => setNewModel(prev => ({ ...prev, partsAvailability: e.target.value as any }))}
                  label="Disponibilit√© des pi√®ces"
                >
                  <MenuItem value="high">√âlev√©e</MenuItem>
                  <MenuItem value="medium">Moyenne</MenuItem>
                  <MenuItem value="low">Faible</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12}>
              <Typography variant="subtitle2" gutterBottom>
                Probl√®mes courants rencontr√©s
              </Typography>
              {newModel.commonIssues.map((issue, index) => (
                <Box key={index} sx={{ display: 'flex', gap: 1, mb: 1 }}>
                  <TextField
                    fullWidth
                    label={`Probl√®me ${index + 1}`}
                    value={issue}
                    onChange={(e) => {
                      const updatedIssues = [...newModel.commonIssues];
                      updatedIssues[index] = e.target.value;
                      setNewModel(prev => ({ ...prev, commonIssues: updatedIssues }));
                    }}
                  />
                  <IconButton
                    color="error"
                    onClick={() => {
                      const updatedIssues = newModel.commonIssues.filter((_, i) => i !== index);
                      setNewModel(prev => ({ ...prev, commonIssues: updatedIssues }));
                    }}
                  >
                    <DeleteIcon />
                  </IconButton>
                </Box>
              ))}
              <Button
                startIcon={<AddIcon />}
                onClick={() => setNewModel(prev => ({ 
                  ...prev, 
                  commonIssues: [...prev.commonIssues, '']
                }))}
                sx={{ mt: 1 }}
              >
                Ajouter un probl√®me
              </Button>
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setModelDialogOpen(false)}>
            Annuler
          </Button>
          <Button 
            variant="contained" 
            onClick={selectedModel ? handleUpdateModel : handleCreateModel}
            disabled={!newModel.name || !newModel.brandId || !newModel.categoryId}
          >
            {selectedModel ? 'Modifier' : 'Cr√©er'}
          </Button>
        </DialogActions>
      </Dialog>



      {/* Dialog de confirmation de suppression */}
      <Dialog
        open={deleteDialogOpen}
        onClose={() => setDeleteDialogOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>
          Confirmer la suppression
        </DialogTitle>
        <DialogContent>
          {itemToDelete && (
            <Alert severity="warning">
              √ätes-vous s√ªr de vouloir supprimer cet √©l√©ment ?
              Cette action est irr√©versible.
            </Alert>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDeleteDialogOpen(false)}>
            Annuler
          </Button>
          <Button 
            variant="contained" 
            color="error"
            onClick={handleDelete}
          >
            Supprimer
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default DeviceManagement;
