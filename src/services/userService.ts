import { supabase } from '../lib/supabase';
import { User } from '@supabase/supabase-js';

// Types pour les r√©ponses du service utilisateur
export interface UserResponse {
  success: boolean;
  data?: any;
  error?: string | null;
  message?: string;
}

export interface UserProfile {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  role: string;
  avatar?: string;
  createdAt: Date;
  updatedAt: Date;
  isEmailConfirmed: boolean;
}

// Service utilisateur simplifi√© et robuste
export const userService = {
  /**
   * R√©cup√©rer le profil de l'utilisateur actuel
   */
  async getCurrentUser(): Promise<UserResponse> {
    try {
      console.log('üë§ R√©cup√©ration du profil utilisateur...');

      // R√©cup√©rer l'utilisateur depuis Supabase Auth
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        console.log('‚ö†Ô∏è Aucun utilisateur authentifi√©');
        return {
          success: false,
          error: 'Utilisateur non authentifi√©',
          message: 'Veuillez vous connecter'
        };
      }

      // R√©cup√©rer les donn√©es compl√®tes depuis la table users
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('*')
        .eq('id', user.id)
        .single();

      if (userError) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des donn√©es utilisateur:', userError);
        
        // Si l'utilisateur n'existe pas dans la table users, le cr√©er
        if (userError.code === 'PGRST116') {
          console.log('üîÑ Cr√©ation automatique du profil utilisateur...');
          return await this.createUserProfile(user);
        }
        
        return {
          success: false,
          error: 'Erreur lors de la r√©cup√©ration du profil',
          message: 'Impossible de charger les donn√©es utilisateur'
        };
      }

      // Convertir les donn√©es vers le format attendu
      const profile: UserProfile = {
        id: userData.id,
        firstName: userData.first_name,
        lastName: userData.last_name,
        email: userData.email,
        role: userData.role,
        avatar: userData.avatar,
        createdAt: new Date(userData.created_at),
        updatedAt: new Date(userData.updated_at),
        isEmailConfirmed: !!user.email_confirmed_at
      };

      console.log('‚úÖ Profil utilisateur r√©cup√©r√©:', profile.email);
      
      return {
        success: true,
        data: profile,
        message: 'Profil r√©cup√©r√© avec succ√®s'
      };

    } catch (error) {
      console.error('üí• Exception lors de la r√©cup√©ration du profil:', error);
      return {
        success: false,
        error: 'Erreur inattendue',
        message: 'Erreur lors de la r√©cup√©ration du profil'
      };
    }
  },

  /**
   * Cr√©er le profil utilisateur dans la table users
   */
  async createUserProfile(authUser: User): Promise<UserResponse> {
    try {
      console.log('üîÑ Cr√©ation du profil utilisateur pour:', authUser.email);

      const userData = {
        id: authUser.id,
        first_name: authUser.user_metadata?.firstName || 'Utilisateur',
        last_name: authUser.user_metadata?.lastName || '',
        email: authUser.email || '',
        role: authUser.user_metadata?.role || 'technician',
        avatar: authUser.user_metadata?.avatar || null,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      const { data, error } = await supabase
        .from('users')
        .insert([userData])
        .select()
        .single();

      if (error) {
        console.error('‚ùå Erreur lors de la cr√©ation du profil:', error);
        return {
          success: false,
          error: 'Erreur lors de la cr√©ation du profil',
          message: 'Impossible de cr√©er le profil utilisateur'
        };
      }

      // Convertir les donn√©es vers le format attendu
      const profile: UserProfile = {
        id: data.id,
        firstName: data.first_name,
        lastName: data.last_name,
        email: data.email,
        role: data.role,
        avatar: data.avatar,
        createdAt: new Date(data.created_at),
        updatedAt: new Date(data.updated_at),
        isEmailConfirmed: !!authUser.email_confirmed_at
      };

      console.log('‚úÖ Profil utilisateur cr√©√©:', profile.email);
      
      return {
        success: true,
        data: profile,
        message: 'Profil cr√©√© avec succ√®s'
      };

    } catch (error) {
      console.error('üí• Exception lors de la cr√©ation du profil:', error);
      return {
        success: false,
        error: 'Erreur inattendue',
        message: 'Erreur lors de la cr√©ation du profil'
      };
    }
  },

  /**
   * Mettre √† jour le profil utilisateur
   */
  async updateProfile(updates: Partial<UserProfile>): Promise<UserResponse> {
    try {
      console.log('üîÑ Mise √† jour du profil utilisateur...');

      // R√©cup√©rer l'utilisateur actuel
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        return {
          success: false,
          error: 'Utilisateur non authentifi√©',
          message: 'Veuillez vous connecter'
        };
      }

      // Pr√©parer les donn√©es √† mettre √† jour
      const updateData: any = {
        updated_at: new Date().toISOString()
      };

      if (updates.firstName) updateData.first_name = updates.firstName;
      if (updates.lastName) updateData.last_name = updates.lastName;
      if (updates.avatar !== undefined) updateData.avatar = updates.avatar;
      if (updates.role) updateData.role = updates.role;

      // Mettre √† jour dans la table users
      const { data, error } = await supabase
        .from('users')
        .update(updateData)
        .eq('id', user.id)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Erreur lors de la mise √† jour:', error);
        return {
          success: false,
          error: 'Erreur lors de la mise √† jour',
          message: 'Impossible de mettre √† jour le profil'
        };
      }

      // Mettre √† jour les m√©tadonn√©es dans auth.users si n√©cessaire
      if (updates.firstName || updates.lastName || updates.role) {
        const metadata: any = {};
        if (updates.firstName) metadata.firstName = updates.firstName;
        if (updates.lastName) metadata.lastName = updates.lastName;
        if (updates.role) metadata.role = updates.role;

        const { error: metadataError } = await supabase.auth.updateUser({
          data: metadata
        });

        if (metadataError) {
          console.warn('‚ö†Ô∏è Erreur lors de la mise √† jour des m√©tadonn√©es:', metadataError);
        }
      }

      // Convertir les donn√©es vers le format attendu
      const profile: UserProfile = {
        id: data.id,
        firstName: data.first_name,
        lastName: data.last_name,
        email: data.email,
        role: data.role,
        avatar: data.avatar,
        createdAt: new Date(data.created_at),
        updatedAt: new Date(data.updated_at),
        isEmailConfirmed: !!user.email_confirmed_at
      };

      console.log('‚úÖ Profil utilisateur mis √† jour:', profile.email);
      
      return {
        success: true,
        data: profile,
        message: 'Profil mis √† jour avec succ√®s'
      };

    } catch (error) {
      console.error('üí• Exception lors de la mise √† jour:', error);
      return {
        success: false,
        error: 'Erreur inattendue',
        message: 'Erreur lors de la mise √† jour du profil'
      };
    }
  },

  /**
   * R√©cup√©rer tous les utilisateurs (pour les admins)
   */
  async getAllUsers(): Promise<UserResponse> {
    try {
      console.log('üë• R√©cup√©ration de tous les utilisateurs...');

      // V√©rifier que l'utilisateur actuel est admin ou technicien
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        return {
          success: false,
          error: 'Utilisateur non authentifi√©',
          message: 'Veuillez vous connecter'
        };
      }

      // R√©cup√©rer le r√¥le de l'utilisateur actuel
      const { data: currentUser, error: roleError } = await supabase
        .from('users')
        .select('role')
        .eq('id', user.id)
        .single();

      if (roleError || !currentUser) {
        return {
          success: false,
          error: 'Impossible de v√©rifier les permissions',
          message: 'Erreur de permissions'
        };
      }

      if (!['admin', 'technician'].includes(currentUser.role)) {
        return {
          success: false,
          error: 'Permissions insuffisantes',
          message: 'Seuls les administrateurs et techniciens peuvent voir tous les utilisateurs'
        };
      }

      // R√©cup√©rer tous les utilisateurs
      const { data: usersData, error: usersError } = await supabase
        .from('users')
        .select(`
          *,
          auth_users:auth.users(email_confirmed_at)
        `)
        .order('created_at', { ascending: false });

      if (usersError) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des utilisateurs:', usersError);
        return {
          success: false,
          error: 'Erreur lors de la r√©cup√©ration',
          message: 'Impossible de r√©cup√©rer la liste des utilisateurs'
        };
      }

      // Convertir les donn√©es vers le format attendu
      const profiles: UserProfile[] = usersData.map((userData: any) => ({
        id: userData.id,
        firstName: userData.first_name,
        lastName: userData.last_name,
        email: userData.email,
        role: userData.role,
        avatar: userData.avatar,
        createdAt: new Date(userData.created_at),
        updatedAt: new Date(userData.updated_at),
        isEmailConfirmed: !!userData.auth_users?.email_confirmed_at
      }));

      console.log('‚úÖ Utilisateurs r√©cup√©r√©s:', profiles.length);
      
      return {
        success: true,
        data: profiles,
        message: `${profiles.length} utilisateur(s) r√©cup√©r√©(s)`
      };

    } catch (error) {
      console.error('üí• Exception lors de la r√©cup√©ration des utilisateurs:', error);
      return {
        success: false,
        error: 'Erreur inattendue',
        message: 'Erreur lors de la r√©cup√©ration des utilisateurs'
      };
    }
  },

  /**
   * Supprimer un utilisateur (pour les admins)
   */
  async deleteUser(userId: string): Promise<UserResponse> {
    try {
      console.log('üóëÔ∏è Suppression de l\'utilisateur:', userId);

      // V√©rifier que l'utilisateur actuel est admin
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError || !user) {
        return {
          success: false,
          error: 'Utilisateur non authentifi√©',
          message: 'Veuillez vous connecter'
        };
      }

      // R√©cup√©rer le r√¥le de l'utilisateur actuel
      const { data: currentUser, error: roleError } = await supabase
        .from('users')
        .select('role')
        .eq('id', user.id)
        .single();

      if (roleError || !currentUser || currentUser.role !== 'admin') {
        return {
          success: false,
          error: 'Permissions insuffisantes',
          message: 'Seuls les administrateurs peuvent supprimer des utilisateurs'
        };
      }

      // Emp√™cher l'auto-suppression
      if (userId === user.id) {
        return {
          success: false,
          error: 'Auto-suppression interdite',
          message: 'Vous ne pouvez pas supprimer votre propre compte'
        };
      }

      // Supprimer l'utilisateur de la table users
      const { error: deleteError } = await supabase
        .from('users')
        .delete()
        .eq('id', userId);

      if (deleteError) {
        console.error('‚ùå Erreur lors de la suppression:', deleteError);
        return {
          success: false,
          error: 'Erreur lors de la suppression',
          message: 'Impossible de supprimer l\'utilisateur'
        };
      }

      console.log('‚úÖ Utilisateur supprim√©:', userId);
      
      return {
        success: true,
        message: 'Utilisateur supprim√© avec succ√®s'
      };

    } catch (error) {
      console.error('üí• Exception lors de la suppression:', error);
      return {
        success: false,
        error: 'Erreur inattendue',
        message: 'Erreur lors de la suppression de l\'utilisateur'
      };
    }
  }
};

// Export par d√©faut
export default userService;
