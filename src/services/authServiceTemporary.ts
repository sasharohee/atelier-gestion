// Service d'authentification temporaire pour contourner l'erreur de trigger
// Ce service cr√©e les utilisateurs directement dans les tables sans passer par les triggers

import { supabase } from '../lib/supabase';
import { User } from '../types/User';

export const temporaryAuthService = {
  // Inscription temporaire qui contourne les triggers
  async signUp(email: string, password: string, userData: Partial<User>) {
    try {
      console.log('üîß Inscription temporaire - Contournement du trigger probl√©matique');
      
      // √âtape 1: Cr√©er l'utilisateur dans auth.users via l'API Supabase
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: email,
        password: password
      });

      if (authError) {
        console.error('‚ùå Erreur auth Supabase:', authError);
        return {
          success: false,
          error: authError.message
        };
      }

      if (!authData.user) {
        return {
          success: false,
          error: 'Aucun utilisateur cr√©√©'
        };
      }

      console.log('‚úÖ Utilisateur auth cr√©√©:', authData.user.id);

      // √âtape 2: Cr√©er manuellement les enregistrements dans les tables publiques
      try {
        // Cr√©er l'utilisateur dans public.users
        const { error: userError } = await supabase
          .from('users')
          .insert({
            id: authData.user.id,
            first_name: userData.firstName || 'Utilisateur',
            last_name: userData.lastName || '',
            email: email,
            role: userData.role || 'technician',
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          });

        if (userError) {
          console.warn('‚ö†Ô∏è Erreur cr√©ation users (non bloquante):', userError);
        } else {
          console.log('‚úÖ Utilisateur cr√©√© dans public.users');
        }

        // Cr√©er le profil utilisateur
        const { error: profileError } = await supabase
          .from('user_profiles')
          .insert({
            user_id: authData.user.id,
            first_name: userData.firstName || 'Utilisateur',
            last_name: userData.lastName || '',
            email: email,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          });

        if (profileError) {
          console.warn('‚ö†Ô∏è Erreur cr√©ation profile (non bloquante):', profileError);
        } else {
          console.log('‚úÖ Profil cr√©√© dans public.user_profiles');
        }

        // Cr√©er les pr√©f√©rences utilisateur
        const { error: prefsError } = await supabase
          .from('user_preferences')
          .insert({
            user_id: authData.user.id,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          });

        if (prefsError) {
          console.warn('‚ö†Ô∏è Erreur cr√©ation preferences (non bloquante):', prefsError);
        } else {
          console.log('‚úÖ Pr√©f√©rences cr√©√©es dans public.user_preferences');
        }

      } catch (manualError) {
        console.warn('‚ö†Ô∏è Erreur lors de la cr√©ation manuelle (non bloquante):', manualError);
      }

      return {
        success: true,
        data: {
          user: authData.user,
          session: authData.session,
          message: 'Inscription r√©ussie ! V√©rifiez votre email pour confirmer votre compte.'
        }
      };

    } catch (error: any) {
      console.error('‚ùå Erreur inattendue lors de l\'inscription temporaire:', error);
      return {
        success: false,
        error: error.message || 'Erreur lors de l\'inscription'
      };
    }
  },

  // Connexion normale (inchang√©e)
  async signIn(email: string, password: string) {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    });
    if (error) return { success: false, error: error.message };
    return { success: true, data };
  },

  // D√©connexion
  async signOut() {
    const { error } = await supabase.auth.signOut();
    if (error) return { success: false, error: error.message };
    return { success: true };
  }
};
