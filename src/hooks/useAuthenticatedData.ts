import { useEffect, useState, useRef } from 'react';
import { useAuth } from './useAuth';
import { useAppStore } from '../store';

export const useAuthenticatedData = () => {
  const { user, isAuthenticated } = useAuth();
  const [isDataLoaded, setIsDataLoaded] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<Error | null>(null);
  const hasLoadedOnce = useRef(false);
  const userIdRef = useRef<string | null>(null);

  useEffect(() => {
    // V√©rifier que l'utilisateur est authentifi√©
    if (!isAuthenticated || !user) {
      setIsDataLoaded(false);
      hasLoadedOnce.current = false;
      userIdRef.current = null;
      return;
    }

    // √âviter de charger plusieurs fois pour le m√™me utilisateur
    if (hasLoadedOnce.current && userIdRef.current === user.id) {
      return;
    }

    userIdRef.current = user.id;
    hasLoadedOnce.current = true;

    const loadData = async () => {
      console.log('‚úÖ Chargement des donn√©es pour utilisateur:', user.email);
      setIsLoading(true);
      setError(null);

      // Obtenir les fonctions directement du store pour √©viter les probl√®mes de d√©pendances
      const store = useAppStore.getState();

      try {
        // Chargement progressif par priorit√©
        // 1. Donn√©es essentielles (priorit√© haute)
        console.log('üìä Chargement des donn√©es essentielles...');
        await Promise.all([
          store.loadUsers(),
          store.loadClients(),
          store.loadDevices(),
        ]);

        // 2. Donn√©es secondaires (priorit√© moyenne)
        console.log('üìã Chargement des donn√©es secondaires...');
        await Promise.all([
          store.loadDeviceModels(),
          store.loadServices(),
          store.loadParts(),
        ]);

        // 3. Donn√©es volumineuses (priorit√© basse) - en arri√®re-plan
        console.log('üìà Chargement des donn√©es volumineuses...');
        Promise.all([
          store.loadProducts(),
          store.loadRepairs(),
          store.loadSales(),
          store.loadAppointments(),
        ]).then(() => {
          console.log('‚úÖ Donn√©es volumineuses charg√©es en arri√®re-plan');
        }).catch(err => {
          console.warn('‚ö†Ô∏è Erreur lors du chargement des donn√©es volumineuses:', err);
        });

        setIsDataLoaded(true);
        console.log('‚úÖ Donn√©es essentielles charg√©es avec succ√®s');
      } catch (err) {
        console.error('‚ùå Erreur lors du chargement des donn√©es:', err);
        setError(err instanceof Error ? err : new Error('Erreur inconnue'));
        hasLoadedOnce.current = false; // Permettre de r√©essayer en cas d'erreur
      } finally {
        setIsLoading(false);
      }
    };

    loadData();
  }, [isAuthenticated, user]);

  const reload = () => {
    hasLoadedOnce.current = false;
    setIsDataLoaded(false);
    setError(null);
    
    // Obtenir les fonctions directement du store
    const store = useAppStore.getState();
    
    const loadData = async () => {
      console.log('‚úÖ Rechargement des donn√©es...');
      setIsLoading(true);
      setError(null);

      try {
        await Promise.all([
          store.loadUsers(),
          store.loadClients(),
          store.loadDevices(),
        ]);

        await Promise.all([
          store.loadDeviceModels(),
          store.loadServices(),
          store.loadParts(),
        ]);

        Promise.all([
          store.loadProducts(),
          store.loadRepairs(),
          store.loadSales(),
          store.loadAppointments(),
        ]).then(() => {
          console.log('‚úÖ Donn√©es volumineuses recharg√©es');
        }).catch(err => {
          console.warn('‚ö†Ô∏è Erreur lors du rechargement des donn√©es volumineuses:', err);
        });

        setIsDataLoaded(true);
        hasLoadedOnce.current = true;
        console.log('‚úÖ Rechargement termin√© avec succ√®s');
      } catch (err) {
        console.error('‚ùå Erreur lors du rechargement des donn√©es:', err);
        setError(err instanceof Error ? err : new Error('Erreur inconnue'));
      } finally {
        setIsLoading(false);
      }
    };

    loadData();
  };

  return {
    isDataLoaded,
    isLoading,
    error,
    reload
  };
};
