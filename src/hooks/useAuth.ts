import { useState, useEffect, useRef } from 'react';
import { supabase } from '../lib/supabase';
import { userService } from '../services/supabaseService';
import { User } from '@supabase/supabase-js';

// Variable GLOBALE pour tracker l'√©tat d'authentification (partag√©e entre toutes les instances)
let globalPreviousAuthState = false;
let globalUserId: string | null = null;

export const useAuth = () => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [authError, setAuthError] = useState<string | null>(null);
  const isMounted = useRef(true);
  const authStateRef = useRef<'stable' | 'changing'>('stable');
  const hasCheckedSession = useRef(false);
  const sessionCheckTimeout = useRef<NodeJS.Timeout | null>(null);

  const clearAuthState = () => {
    localStorage.removeItem('pendingUserData');
    localStorage.removeItem('pendingSignupEmail');
    // R√©initialiser les variables globales
    globalPreviousAuthState = false;
    globalUserId = null;
  };

  // Fonction pour mettre √† jour l'utilisateur seulement si l'√©tat change vraiment
  const updateUser = (newUser: User | null) => {
    const newAuthState = !!newUser;
    const newUserId = newUser?.id || null;
    
    // Ne mettre √† jour que si l'√©tat d'authentification CHANGE ou si l'utilisateur change
    if (newAuthState !== globalPreviousAuthState) {
      console.log(`üîÑ √âtat d'authentification chang√©: ${globalPreviousAuthState ? 'connect√©' : 'd√©connect√©'} ‚Üí ${newAuthState ? 'connect√©' : 'd√©connect√©'}`);
      globalPreviousAuthState = newAuthState;
      globalUserId = newUserId;
      setUser(newUser);
    } else if (newUserId && newUserId !== globalUserId) {
      // Utilisateur diff√©rent mais toujours authentifi√©
      console.log(`üîÑ Utilisateur chang√©: ${globalUserId} ‚Üí ${newUserId}`);
      globalUserId = newUserId;
      setUser(newUser);
    }
    // Sinon, ne rien faire (√©viter les mises √† jour inutiles)
  };

  useEffect(() => {
    isMounted.current = true;
    hasCheckedSession.current = false;
    
    // Nettoyer le timeout pr√©c√©dent s'il existe
    if (sessionCheckTimeout.current) {
      clearTimeout(sessionCheckTimeout.current);
    }
    
    const getCurrentUser = async () => {
      // √âviter les v√©rifications multiples
      if (hasCheckedSession.current) {
        return;
      }
      
      hasCheckedSession.current = true;
      
      try {
        const { data: { user }, error } = await supabase.auth.getUser();
        
        if (!isMounted.current) return;
        
        if (error) {
          // G√©rer sp√©cifiquement l'erreur de session manquante sans la logger
          if (error.message.includes('Auth session missing')) {
            updateUser(null);
            setAuthError(null);
            setLoading(false);
            return;
          }
          
          // G√©rer les erreurs CORS/r√©seau sans les afficher √† l'utilisateur
          if (error.message.includes('Failed to fetch') || 
              error.message.includes('CORS') ||
              error.message.includes('502')) {
            console.warn('‚ö†Ô∏è Erreur r√©seau temporaire lors de la r√©cup√©ration de l\'utilisateur');
            // Ne pas afficher d'erreur √† l'utilisateur, simplement consid√©rer comme non connect√©
            updateUser(null);
            setAuthError(null);
            setLoading(false);
            return;
          }
          
          console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'utilisateur:', error);
          
          // G√©rer les erreurs de token sp√©cifiques
          if (error.message.includes('Invalid Refresh Token') || 
              error.message.includes('Refresh Token Not Found')) {
            console.log('üîÑ Token invalide, nettoyage de l\'√©tat...');
            clearAuthState();
            updateUser(null);
            setAuthError('Session expir√©e. Veuillez vous reconnecter.');
          } else {
            setAuthError(error.message);
          }
        } else {
          updateUser(user);
          setAuthError(null);
          
          // Traiter les donn√©es utilisateur en attente si l'utilisateur est connect√©
          if (user && localStorage.getItem('pendingUserData')) {
            await userService.processPendingUserData();
          }
        }
      } catch (error: any) {
        if (isMounted.current) {
          // G√©rer les erreurs r√©seau sans les afficher √† l'utilisateur
          if (error?.message?.includes('Failed to fetch') || 
              error?.message?.includes('CORS') ||
              error?.message?.includes('502')) {
            console.warn('‚ö†Ô∏è Erreur r√©seau temporaire lors de la r√©cup√©ration de l\'utilisateur');
            updateUser(null);
            setAuthError(null);
          } else {
            console.error('üí• Exception lors de la r√©cup√©ration de l\'utilisateur:', error);
            updateUser(null);
            setAuthError('Erreur inattendue lors de l\'authentification');
          }
        }
      } finally {
        if (isMounted.current) {
          setLoading(false);
        }
      }
    };

    // D√©lai pour √©viter les v√©rifications trop fr√©quentes
    sessionCheckTimeout.current = setTimeout(() => {
      getCurrentUser();
    }, 100);

    // √âcouter les changements d'authentification avec stabilisation
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (!isMounted.current) return;
        
        // √âviter les changements d'√©tat trop fr√©quents
        if (authStateRef.current === 'changing') {
          return;
        }
        
        // Ignorer l'√©v√©nement INITIAL_SESSION pour √©viter la boucle infinie
        if (event === 'INITIAL_SESSION') {
          return;
        }
        
        authStateRef.current = 'changing';
        
        try {
          if (event === 'SIGNED_IN' && session?.user) {
            console.log('‚úÖ Utilisateur connect√©:', session.user.email);
            updateUser(session.user);
            setAuthError(null);
            
            // Traiter les donn√©es utilisateur en attente lors de la connexion
            if (localStorage.getItem('pendingUserData')) {
              await userService.processPendingUserData();
            }
          } else if (event === 'TOKEN_REFRESHED') {
            // Ne rien faire - pas besoin de mettre √† jour l'utilisateur
            console.log('‚úÖ Token rafra√Æchi avec succ√®s (pas de mise √† jour de l\'√©tat)');
            setAuthError(null);
          } else if (event === 'SIGNED_OUT') {
            console.log('üëã Utilisateur d√©connect√©');
            updateUser(null);
            setAuthError(null);
            // Nettoyer les donn√©es en attente
            clearAuthState();
          }
        } finally {
          // Remettre l'√©tat √† stable apr√®s un d√©lai
          setTimeout(() => {
            authStateRef.current = 'stable';
          }, 1000);
        }
        
        setLoading(false);
      }
    );

    return () => {
      isMounted.current = false;
      if (sessionCheckTimeout.current) {
        clearTimeout(sessionCheckTimeout.current);
      }
      subscription.unsubscribe();
    };
  }, []); // D√©pendances vides pour √©viter les re-ex√©cutions

  // Fonction pour forcer la r√©initialisation de l'authentification
  const resetAuth = async () => {
    setLoading(true);
    try {
      await supabase.auth.signOut();
      clearAuthState();
      updateUser(null);
      setAuthError(null);
      window.location.reload();
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©initialisation:', error);
      setAuthError('Erreur lors de la r√©initialisation');
    } finally {
      setLoading(false);
    }
  };

  return {
    user,
    loading,
    authError,
    isAuthenticated: !!user,
    resetAuth
  };
};
