#!/usr/bin/env node

/**
 * Script de diagnostic pour le d√©ploiement Vercel
 * V√©rifie la configuration et les pr√©requis
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Diagnostic Vercel - Atelier Gestion');
console.log('=====================================');

let hasErrors = false;

// V√©rifier les fichiers essentiels
const requiredFiles = [
  'package.json',
  'vite.config.ts',
  'vercel.json',
  'src/App.tsx',
  'src/index.tsx'
];

console.log('\nüìÅ V√©rification des fichiers essentiels...');
requiredFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - MANQUANT`);
    hasErrors = true;
  }
});

// V√©rifier package.json
console.log('\nüì¶ V√©rification de package.json...');
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  
  if (!packageJson.scripts || !packageJson.scripts.build) {
    console.log('‚ùå Script "build" manquant dans package.json');
    hasErrors = true;
  } else {
    console.log('‚úÖ Script build trouv√©');
  }
  
  if (!packageJson.dependencies) {
    console.log('‚ùå Aucune d√©pendance trouv√©e');
    hasErrors = true;
  } else {
    console.log(`‚úÖ ${Object.keys(packageJson.dependencies).length} d√©pendances trouv√©es`);
  }
} catch (error) {
  console.log('‚ùå Erreur lors de la lecture de package.json:', error.message);
  hasErrors = true;
}

// V√©rifier vercel.json
console.log('\n‚öôÔ∏è V√©rification de vercel.json...');
try {
  const vercelConfig = JSON.parse(fs.readFileSync('vercel.json', 'utf8'));
  
  if (!vercelConfig.buildCommand) {
    console.log('‚ö†Ô∏è buildCommand non sp√©cifi√© dans vercel.json');
  } else {
    console.log('‚úÖ buildCommand configur√©');
  }
  
  if (!vercelConfig.outputDirectory) {
    console.log('‚ö†Ô∏è outputDirectory non sp√©cifi√© dans vercel.json');
  } else {
    console.log('‚úÖ outputDirectory configur√©');
  }
} catch (error) {
  console.log('‚ùå Erreur lors de la lecture de vercel.json:', error.message);
  hasErrors = true;
}

// V√©rifier les variables d'environnement
console.log('\nüîê V√©rification des variables d\'environnement...');
const envFile = '.env';
if (fs.existsSync(envFile)) {
  console.log('‚úÖ Fichier .env trouv√©');
} else {
  console.log('‚ö†Ô∏è Fichier .env non trouv√© (peut √™tre configur√© sur Vercel)');
}

// V√©rifier le r√©pertoire src
console.log('\nüìÇ V√©rification de la structure src...');
if (fs.existsSync('src')) {
  const srcFiles = fs.readdirSync('src', { recursive: true });
  console.log(`‚úÖ R√©pertoire src trouv√© avec ${srcFiles.length} fichiers`);
} else {
  console.log('‚ùå R√©pertoire src manquant');
  hasErrors = true;
}

// R√©sum√©
console.log('\nüìä R√©sum√© du diagnostic:');
if (hasErrors) {
  console.log('‚ùå Des erreurs ont √©t√© d√©tect√©es. Veuillez les corriger avant le d√©ploiement.');
  process.exit(1);
} else {
  console.log('‚úÖ Tous les tests sont pass√©s. Pr√™t pour le d√©ploiement !');
  process.exit(0);
}
