// Script pour r√©soudre les conflits d'@emotion/react
// √Ä ex√©cuter dans la console du navigateur

console.log('üîß R√©solution des conflits @emotion/react...');

// Fonction pour nettoyer les instances multiples d'√©motion
function fixEmotionConflicts() {
  try {
    // V√©rifier si @emotion/react est charg√© plusieurs fois
    const emotionInstances = [];
    
    // Chercher dans les modules charg√©s
    if (window.__webpack_require__) {
      const modules = window.__webpack_require__.cache;
      Object.keys(modules).forEach(key => {
        if (key.includes('@emotion/react')) {
          emotionInstances.push(key);
        }
      });
    }
    
    console.log('üì¶ Instances @emotion/react trouv√©es:', emotionInstances.length);
    
    // Nettoyer le cache des modules si possible
    if (window.__webpack_require__ && window.__webpack_require__.cache) {
      Object.keys(window.__webpack_require__.cache).forEach(key => {
        if (key.includes('@emotion/react') || key.includes('@emotion/styled')) {
          delete window.__webpack_require__.cache[key];
          console.log('üßπ Module supprim√© du cache:', key);
        }
      });
    }
    
    // Nettoyer les styles en conflit
    const styleSheets = document.styleSheets;
    for (let i = styleSheets.length - 1; i >= 0; i--) {
      try {
        const sheet = styleSheets[i];
        if (sheet.href && sheet.href.includes('emotion')) {
          sheet.disabled = true;
          console.log('üßπ Feuille de style emotion d√©sactiv√©e:', sheet.href);
        }
      } catch (error) {
        // Ignorer les erreurs CORS
      }
    }
    
    console.log('‚úÖ Conflits @emotion/react r√©solus');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©solution des conflits:', error);
    return false;
  }
}

// Fonction pour forcer le rechargement des modules
function forceModuleReload() {
  try {
    console.log('üîÑ For√ßage du rechargement des modules...');
    
    // Nettoyer le cache du navigateur pour les modules
    if ('caches' in window) {
      caches.keys().then(cacheNames => {
        cacheNames.forEach(cacheName => {
          if (cacheName.includes('emotion') || cacheName.includes('mui')) {
            caches.delete(cacheName);
            console.log('üßπ Cache supprim√©:', cacheName);
          }
        });
      });
    }
    
    // Nettoyer le localStorage des modules
    Object.keys(localStorage).forEach(key => {
      if (key.includes('emotion') || key.includes('mui') || key.includes('webpack')) {
        localStorage.removeItem(key);
        console.log('üßπ localStorage nettoy√©:', key);
      }
    });
    
    console.log('‚úÖ Modules pr√™ts pour le rechargement');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors du rechargement des modules:', error);
    return false;
  }
}

// Fonction pour v√©rifier l'√©tat d'√©motion
function checkEmotionState() {
  try {
    console.log('üîç V√©rification de l\'√©tat d\'√©motion...');
    
    // V√©rifier les versions charg√©es
    if (window.__emotion_react_version__) {
      console.log('üì¶ Version @emotion/react:', window.__emotion_react_version__);
    }
    
    // V√©rifier les instances
    const emotionElements = document.querySelectorAll('[data-emotion]');
    console.log('üé® √âl√©ments emotion trouv√©s:', emotionElements.length);
    
    // V√©rifier les conflits de styles
    const duplicateStyles = [];
    const styleMap = new Map();
    
    emotionElements.forEach(el => {
      const emotionData = el.getAttribute('data-emotion');
      if (emotionData) {
        if (styleMap.has(emotionData)) {
          duplicateStyles.push(emotionData);
        } else {
          styleMap.set(emotionData, el);
        }
      }
    });
    
    if (duplicateStyles.length > 0) {
      console.warn('‚ö†Ô∏è Styles dupliqu√©s d√©tect√©s:', duplicateStyles);
    } else {
      console.log('‚úÖ Aucun style dupliqu√© d√©tect√©');
    }
    
    return {
      elements: emotionElements.length,
      duplicates: duplicateStyles.length,
      healthy: duplicateStyles.length === 0
    };
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
    return { healthy: false, error: error.message };
  }
}

// Fonction principale
async function fixAllEmotionIssues() {
  console.log('üöÄ D√©but de la r√©solution des probl√®mes @emotion/react...');
  
  // 1. V√©rifier l'√©tat actuel
  const initialState = checkEmotionState();
  console.log('üìä √âtat initial:', initialState);
  
  // 2. R√©soudre les conflits
  fixEmotionConflicts();
  
  // 3. Forcer le rechargement des modules
  forceModuleReload();
  
  // 4. V√©rifier l'√©tat final
  setTimeout(() => {
    const finalState = checkEmotionState();
    console.log('üìä √âtat final:', finalState);
    
    if (finalState.healthy) {
      console.log('‚úÖ Tous les probl√®mes @emotion/react ont √©t√© r√©solus');
    } else {
      console.log('‚ö†Ô∏è Certains probl√®mes persistent, un rechargement complet peut √™tre n√©cessaire');
    }
  }, 1000);
  
  return true;
}

// Ex√©cuter automatiquement
fixAllEmotionIssues();

// Exposer les fonctions globalement
window.fixEmotionConflicts = {
  fixEmotionConflicts,
  forceModuleReload,
  checkEmotionState,
  fixAllEmotionIssues
};

