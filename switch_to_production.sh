#!/bin/bash

# =====================================================
# Script de Passage en Production - Atelier Gestion
# =====================================================
# Date: 2024-12-19
# Description: Passe l'application de dev √† production
# =====================================================

set -e  # Arr√™ter le script en cas d'erreur

echo "üöÄ PASSAGE EN PRODUCTION - ATELIER GESTION"
echo "=========================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions d'affichage
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# =====================================================
# 1. V√âRIFICATIONS PR√âALABLES
# =====================================================

print_status "V√©rification de l'environnement..."

# V√©rifier qu'on est dans le bon r√©pertoire
if [ ! -f "package.json" ]; then
    print_error "package.json non trouv√©. Assurez-vous d'√™tre dans le r√©pertoire du projet."
    exit 1
fi

# V√©rifier Node.js
if ! command -v node &> /dev/null; then
    print_error "Node.js n'est pas install√©"
    exit 1
fi

print_success "Node.js trouv√©: $(node --version)"

# V√©rifier npm
if ! command -v npm &> /dev/null; then
    print_error "npm n'est pas install√©"
    exit 1
fi

print_success "npm trouv√©: $(npm --version)"

# =====================================================
# 2. V√âRIFICATION DE LA CONFIGURATION SUPABASE
# =====================================================

print_status "V√©rification de la configuration Supabase..."

# V√©rifier que la configuration Supabase pointe vers la production
if grep -q "wlqyrmntfxwdvkzzsujv.supabase.co" src/lib/supabase.ts; then
    print_success "Configuration Supabase : Production ‚úÖ"
else
    print_warning "Configuration Supabase : V√©rifiez que vous pointez vers la production"
fi

# =====================================================
# 3. NETTOYAGE ET PR√âPARATION
# =====================================================

print_status "Nettoyage des anciens builds..."

# Nettoyer les anciens builds
rm -rf dist
rm -rf .vercel
rm -rf node_modules/.vite

print_success "Nettoyage termin√©"

# =====================================================
# 4. INSTALLATION DES D√âPENDANCES
# =====================================================

print_status "Installation des d√©pendances de production..."

npm install --production=false

if [ $? -ne 0 ]; then
    print_error "√âchec de l'installation des d√©pendances"
    exit 1
fi

print_success "D√©pendances install√©es"

# =====================================================
# 5. BUILD DE PRODUCTION
# =====================================================

print_status "Build de production..."

# D√©finir les variables d'environnement pour la production
export NODE_ENV=production
export VITE_NODE_ENV=production

# Build avec optimisations
npm run build

if [ $? -ne 0 ]; then
    print_error "√âchec du build de production"
    exit 1
fi

print_success "Build de production r√©ussi"

# =====================================================
# 6. V√âRIFICATION DU BUILD
# =====================================================

print_status "V√©rification du build..."

# V√©rifier que les fichiers essentiels existent
if [ ! -f "dist/index.html" ]; then
    print_error "dist/index.html non trouv√©"
    exit 1
fi

if [ ! -f "dist/assets/index.js" ] && [ ! -f "dist/assets/index.css" ]; then
    print_error "Fichiers de build manquants"
    exit 1
fi

print_success "Build v√©rifi√© avec succ√®s"

# =====================================================
# 7. TEST LOCAL DU BUILD
# =====================================================

print_status "Test local du build de production..."

# D√©marrer le serveur de preview
npm run preview &
PREVIEW_PID=$!

# Attendre que le serveur d√©marre
sleep 5

# V√©rifier si le serveur fonctionne
if curl -s http://localhost:4173 > /dev/null; then
    print_success "Test local r√©ussi"
    
    # Afficher l'URL de test
    echo ""
    print_status "üåê Application disponible sur: http://localhost:4173"
    print_status "‚è±Ô∏è  Testez votre application pendant 30 secondes..."
    
    # Attendre 30 secondes pour les tests
    sleep 30
else
    print_warning "Test local √©chou√©, mais continuation du processus"
fi

# Arr√™ter le serveur de preview
kill $PREVIEW_PID 2>/dev/null

# =====================================================
# 8. CR√âATION DU FICHIER .env PRODUCTION
# =====================================================

print_status "Cr√©ation du fichier .env de production..."

cat > .env.production << EOF
# Configuration Production - Atelier Gestion
# G√©n√©r√© automatiquement le $(date)

# Supabase Production
VITE_SUPABASE_URL=https://wlqyrmntfxwdvkzzsujv.supabase.co
VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndscXlybW50Znh3ZHZrenpzdWp2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU0MjUyMDAsImV4cCI6MjA3MTAwMTIwMH0.9XvA_8VtPhBdF80oycWefBgY9nIyvqQUPHDGlw3f2D8

# Configuration EmailJS
VITE_EMAILJS_SERVICE_ID=service_lisw5h9
VITE_EMAILJS_TEMPLATE_ID=template_dabl0od
VITE_EMAILJS_PUBLIC_KEY=mh5fruIpuHfRxF7YC

# Configuration PostgreSQL Production
VITE_POSTGRES_HOST=db.wlqyrmntfxwdvkzzsujv.supabase.co
VITE_POSTGRES_PORT=5432
VITE_POSTGRES_DB=postgres
VITE_POSTGRES_USER=postgres
VITE_POSTGRES_PASSWORD=EGQUN6paP21OlNUu

# Mot de passe administrateur
VITE_ADMIN_PASSWORD=At3l13r@dm1n#2024\$ecur3!

# Mode Production
NODE_ENV=production
VITE_NODE_ENV=production
EOF

print_success "Fichier .env.production cr√©√©"

# =====================================================
# 9. OPTIONS DE D√âPLOIEMENT
# =====================================================

echo ""
print_status "üöÄ OPTIONS DE D√âPLOIEMENT"
echo "================================"
echo ""
echo "Votre application est maintenant pr√™te pour la production !"
echo ""
echo "Choisissez votre option de d√©ploiement :"
echo ""
echo "1. üåê D√©ploiement Vercel (Recommand√©)"
echo "2. üì¶ D√©ploiement manuel (Fichiers dist/)"
echo "3. üîß Configuration seulement (Pas de d√©ploiement)"
echo "4. ‚ùå Annuler"
echo ""

read -p "Votre choix (1-4): " choice

case $choice in
    1)
        print_status "D√©ploiement Vercel..."
        
        # V√©rifier Vercel CLI
        if ! command -v vercel &> /dev/null; then
            print_warning "Vercel CLI non trouv√©. Installation..."
            npm install -g vercel
        fi
        
        # D√©ployer sur Vercel
        vercel --prod --yes
        
        if [ $? -eq 0 ]; then
            print_success "D√©ploiement Vercel r√©ussi !"
        else
            print_error "√âchec du d√©ploiement Vercel"
        fi
        ;;
    2)
        print_status "D√©ploiement manuel..."
        print_success "Vos fichiers de production sont dans le dossier 'dist/'"
        print_status "Vous pouvez maintenant d√©ployer ces fichiers sur votre serveur web"
        ;;
    3)
        print_status "Configuration termin√©e..."
        print_success "Votre application est configur√©e pour la production"
        ;;
    4)
        print_status "D√©ploiement annul√©"
        exit 0
        ;;
    *)
        print_error "Choix invalide"
        exit 1
        ;;
esac

# =====================================================
# 10. R√âSUM√â FINAL
# =====================================================

echo ""
print_success "üéâ PASSAGE EN PRODUCTION TERMIN√â !"
echo "=========================================="
echo ""

print_status "üìã R√©sum√© des actions effectu√©es :"
echo "‚úÖ Configuration Supabase v√©rifi√©e (Production)"
echo "‚úÖ D√©pendances install√©es"
echo "‚úÖ Build de production cr√©√©"
echo "‚úÖ Fichiers de build v√©rifi√©s"
echo "‚úÖ Test local effectu√©"
echo "‚úÖ Fichier .env.production cr√©√©"

echo ""
print_status "üîß Configuration de production :"
echo "‚Ä¢ Base de donn√©es : wlqyrmntfxwdvkzzsujv.supabase.co"
echo "‚Ä¢ Mode : Production"
echo "‚Ä¢ Build optimis√© : Oui"
echo "‚Ä¢ Source maps : D√©sactiv√©es"

echo ""
print_status "üìÅ Fichiers importants :"
echo "‚Ä¢ dist/ - Fichiers de production"
echo "‚Ä¢ .env.production - Variables d'environnement"
echo "‚Ä¢ package.json - Configuration du projet"

echo ""
print_status "üöÄ Prochaines √©tapes :"
echo "1. Testez votre application en production"
echo "2. V√©rifiez que toutes les fonctionnalit√©s marchent"
echo "3. Configurez votre serveur web (si d√©ploiement manuel)"
echo "4. Mettez √† jour vos DNS si n√©cessaire"
echo "5. Configurez HTTPS pour la s√©curit√©"

echo ""
print_success "Votre application Atelier Gestion est maintenant en production ! üéâ"
